pub type AddrType = u32;
macro_rules! impl_read_to_type {
    ($ unsigned_type : ty , $ signed_type : ty , $ len : literal , $ read_unsigned : ident , $ read_signed : ident , $ write_unsigned : ident , $ write_signed : ident) => {
        const fn $read_unsigned<const BIG_ENDIAN: bool>(
            data: [u8; $len],
            start_bit: usize,
            len_bits: usize,
        ) -> $unsigned_type {
            const TYPE_BITS: usize = <$unsigned_type>::BITS as usize;
            assert!(TYPE_BITS / 8 == $len);
            assert!(len_bits > 0);
            assert!(len_bits + start_bit <= TYPE_BITS);
            let mut data = if BIG_ENDIAN {
                <$unsigned_type>::from_be_bytes(data)
            } else {
                <$unsigned_type>::from_le_bytes(data)
            };
            let value_mask = <$unsigned_type>::MAX >> (TYPE_BITS - len_bits);
            data = data >> start_bit;
            data = data & value_mask;
            data
        }
        const fn $read_signed<const BIG_ENDIAN: bool>(
            data: [u8; $len],
            start_bit: usize,
            len_bits: usize,
        ) -> $signed_type {
            const TYPE_BITS: usize = <$signed_type>::BITS as usize;
            assert!(len_bits > 1);
            assert!(TYPE_BITS / 8 == $len);
            let data = $read_unsigned::<BIG_ENDIAN>(data, start_bit, len_bits);
            let value_mask =
                <$signed_type>::MAX as $unsigned_type >> (TYPE_BITS - len_bits);
            let sign_mask = !value_mask;
            let value_part = data & value_mask;
            let sign_part = data & sign_mask;
            if sign_part != 0 {
                sign_mask as $signed_type | value_part as $signed_type
            } else {
                data as $signed_type
            }
        }
        const fn $write_unsigned<const BIG_ENDIAN: bool>(
            value: $unsigned_type,
            mem: $unsigned_type,
            start_bit: usize,
            len_bits: usize,
        ) -> [u8; $len] {
            const TYPE_BITS: usize = <$unsigned_type>::BITS as usize;
            assert!(len_bits > 0);
            assert!(len_bits + start_bit <= TYPE_BITS);
            let value_max = <$unsigned_type>::MAX >> (TYPE_BITS - len_bits);
            let mask = value_max << start_bit;
            let mut value = value;
            value <<= start_bit;
            value = (mem & !mask) | value;
            if BIG_ENDIAN {
                value.to_be_bytes()
            } else {
                value.to_le_bytes()
            }
        }
        const fn $write_signed<const BIG_ENDIAN: bool>(
            value: $signed_type,
            mem: $signed_type,
            start_bit: usize,
            len_bits: usize,
        ) -> [u8; $len] {
            const TYPE_BITS: usize = <$unsigned_type>::BITS as usize;
            assert!(len_bits > 0);
            assert!(len_bits + start_bit <= TYPE_BITS);
            let value_max = <$signed_type>::MAX >> (TYPE_BITS - len_bits);
            let value_min = <$signed_type>::MIN >> (TYPE_BITS - len_bits);
            let mask = <$unsigned_type>::MAX >> (TYPE_BITS - len_bits);
            let value = value as $unsigned_type & mask;
            let mem = mem as $unsigned_type;
            $write_unsigned::<BIG_ENDIAN>(value, mem, start_bit, len_bits)
        }
    };
}
impl_read_to_type!(u8, i8, 1, read_u8, read_i8, write_u8, write_i8);
impl_read_to_type!(u16, i16, 2, read_u16, read_i16, write_u16, write_i16);
impl_read_to_type!(u32, i32, 4, read_u32, read_i32, write_u32, write_i32);
impl_read_to_type!(u64, i64, 8, read_u64, read_i64, write_u64, write_i64);
impl_read_to_type!(
    u128, i128, 16, read_u128, read_i128, write_u128, write_i128
);
pub trait GlobalSetTrait {
    fn set_PCPMode(&mut self, address: Option<u32>, value: i64);
}
pub trait MemoryRead {
    type AddressType;
    fn read(&self, addr: Self::AddressType, buf: &mut [u8]);
}
pub trait MemoryWrite {
    type AddressType;
    fn write(&mut self, addr: Self::AddressType, buf: &[u8]);
}
pub trait ContextregisterTrait:
    MemoryRead<AddressType = u32> + MemoryWrite<AddressType = u32>
{
    fn read_PCPMode_raw(&self) -> u8 {
        let mut work_value = [0u8; 1u64 as usize];
        self.read(0u64 as u32, &mut work_value[0..1]);
        let value = read_u8::<false>(work_value, 0u64 as usize, 1u64 as usize);
        u8::try_from(value).unwrap()
    }
    fn write_PCPMode_raw(&mut self, param: u8) {
        let mut mem = [0u8; 1];
        self.read(0u64 as u32, &mut mem[0..1]);
        let mem = u8::from_le_bytes(mem);
        let mem =
            write_u8::<false>(param as u8, mem, 0u64 as usize, 1u64 as usize);
        self.write(0u64 as u32, &mem[0..1]);
    }
    fn read_PCPMode_disassembly(&self) -> i64 {
        i64::try_from(self.read_PCPMode_raw()).unwrap()
    }
    fn write_PCPMode_disassembly(&mut self, param: i64) {
        self.write_PCPMode_raw(param as u8)
    }
    fn read_PCPMode_execution(&self) -> u8 {
        self.read_PCPMode_raw()
    }
    fn write_PCPMode_execution(&mut self, param: u8) {
        self.write_PCPMode_raw(param)
    }
    fn PCPMode_display(&self) -> DisplayElement {
        meaning_number(true, self.read_PCPMode_raw())
    }
}
pub trait ContextTrait {
    type Typeregister: ContextregisterTrait;
    fn register(&self) -> &Self::Typeregister;
    fn register_mut(&mut self) -> &mut Self::Typeregister;
}
#[derive(Debug, Clone, Copy, Default)]
pub struct ContextregisterStruct {
    pub chunk_0x0: [u8; 4u64 as usize],
}
impl ContextregisterTrait for ContextregisterStruct {}
impl MemoryRead for ContextregisterStruct {
    type AddressType = u32;
    fn read(&self, addr: Self::AddressType, buf: &mut [u8]) {
        let addr = <u64>::try_from(addr).unwrap();
        let buf_len = <u64>::try_from(buf.len()).unwrap();
        let addr_end = addr + buf_len;
        match (addr, addr_end) {
            (0u64..=3u64, 0u64..=4u64) => {
                let start = addr - 0u64;
                let end = usize::try_from(start + buf_len).unwrap();
                let start = usize::try_from(start).unwrap();
                buf.copy_from_slice(&self.chunk_0x0[start..end]);
            }
            _ => panic!("undefined mem {}:{}", addr, buf.len()),
        }
    }
}
impl MemoryWrite for ContextregisterStruct {
    type AddressType = u32;
    fn write(&mut self, addr: Self::AddressType, buf: &[u8]) {
        let addr = <u64>::try_from(addr).unwrap();
        let buf_len = <u64>::try_from(buf.len()).unwrap();
        let addr_end = addr + buf_len;
        match (addr, addr_end) {
            (0u64..=3u64, 0u64..=4u64) => {
                let start = addr - 0u64;
                let end = usize::try_from(start + buf_len).unwrap();
                let start = usize::try_from(start).unwrap();
                self.chunk_0x0[start..end].copy_from_slice(buf);
            }
            _ => panic!("undefined mem {}:{}", addr, buf.len()),
        }
    }
}
#[derive(Debug, Clone, Copy, Default)]
pub struct SpacesStruct {
    pub register: ContextregisterStruct,
}
impl ContextTrait for SpacesStruct {
    type Typeregister = ContextregisterStruct;
    fn register(&self) -> &Self::Typeregister {
        &self.register
    }
    fn register_mut(&mut self) -> &mut Self::Typeregister {
        &mut self.register
    }
}
fn meaning_number<T>(hex: bool, num: T) -> DisplayElement
where
    i64: TryFrom<T>,
    <i64 as TryFrom<T>>::Error: core::fmt::Debug,
{
    DisplayElement::Number(hex, i64::try_from(num).unwrap())
}
fn meaning_0_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_0_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_0_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d0,
        1 => Register::d1,
        2 => Register::d2,
        3 => Register::d3,
        4 => Register::d4,
        5 => Register::d5,
        6 => Register::d6,
        7 => Register::d7,
        8 => Register::d8,
        9 => Register::d9,
        10 => Register::d10,
        11 => Register::d11,
        12 => Register::d12,
        13 => Register::d13,
        14 => Register::d14,
        15 => Register::d15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_1_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_1_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_1_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a0,
        1 => Register::a1,
        2 => Register::a2,
        3 => Register::a3,
        4 => Register::a4,
        5 => Register::a5,
        6 => Register::a6,
        7 => Register::a7,
        8 => Register::a8,
        9 => Register::a9,
        10 => Register::a10,
        11 => Register::a11,
        12 => Register::a12,
        13 => Register::a13,
        14 => Register::a14,
        15 => Register::a15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_2_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_2_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_2_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::e0,
        2 => Register::e2,
        4 => Register::e4,
        6 => Register::e6,
        8 => Register::e8,
        10 => Register::e10,
        12 => Register::e12,
        14 => Register::e14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_3_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_3_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_3_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d0,
        2 => Register::d2,
        4 => Register::d4,
        6 => Register::d6,
        8 => Register::d8,
        10 => Register::d10,
        12 => Register::d12,
        14 => Register::d14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_4_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_4_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_4_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d1,
        2 => Register::d3,
        4 => Register::d5,
        6 => Register::d7,
        8 => Register::d9,
        10 => Register::d11,
        12 => Register::d13,
        14 => Register::d15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_5_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_5_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_5_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::e2,
        2 => Register::e4,
        4 => Register::e6,
        6 => Register::e8,
        8 => Register::e10,
        10 => Register::e12,
        12 => Register::e14,
        14 => Register::e0,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_6_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_6_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_6_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::p0,
        2 => Register::p2,
        4 => Register::p4,
        6 => Register::p6,
        8 => Register::p8,
        10 => Register::p10,
        12 => Register::p12,
        14 => Register::p14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_7_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_7_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_7_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a0,
        2 => Register::a2,
        4 => Register::a4,
        6 => Register::a6,
        8 => Register::a8,
        10 => Register::a10,
        12 => Register::a12,
        14 => Register::a14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_8_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_8_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_8_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a1,
        2 => Register::a3,
        4 => Register::a5,
        6 => Register::a7,
        8 => Register::a9,
        10 => Register::a11,
        12 => Register::a13,
        14 => Register::a15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_9_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_9_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_9_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::R0,
        1 => Register::R1,
        2 => Register::R2,
        3 => Register::R3,
        4 => Register::R4,
        5 => Register::R5,
        6 => Register::R6,
        7 => Register::R7,
        _ => unreachable!("Invalid Attach Value"),
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0003(u8);
impl TokenField_op0003 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0005(u8);
impl TokenField_op0005 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0006(u8);
impl TokenField_op0006 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0007(u8);
impl TokenField_op0007 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0404(u8);
impl TokenField_op0404 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0405(u8);
impl TokenField_op0405 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0407(u8);
impl TokenField_op0407 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0606(u8);
impl TokenField_op0606 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0607(u8);
impl TokenField_op0607 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0707(u8);
impl TokenField_op0707 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0810(u8);
impl TokenField_op0810 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd0811(u8);
impl TokenField_Rd0811 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ra0811(u8);
impl TokenField_Ra0811 {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Re0811(u8);
impl TokenField_Re0811 {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ree0811(u8);
impl TokenField_Ree0811 {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Reo0811(u8);
impl TokenField_Reo0811 {
    fn execution(&self) -> Register {
        meaning_4_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_4_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ReN0811(u8);
impl TokenField_ReN0811 {
    fn execution(&self) -> Register {
        meaning_5_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_5_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0811(u8);
impl TokenField_op0811 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rp0811(u8);
impl TokenField_Rp0811 {
    fn execution(&self) -> Register {
        meaning_6_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_6_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpe0811(u8);
impl TokenField_Rpe0811 {
    fn execution(&self) -> Register {
        meaning_7_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_7_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpo0811(u8);
impl TokenField_Rpo0811 {
    fn execution(&self) -> Register {
        meaning_8_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_8_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0815(u8);
impl TokenField_op0815 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop0815(i8);
impl TokenField_sop0815 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1111(u8);
impl TokenField_op1111 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd1215(u8);
impl TokenField_Rd1215 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1215(u8);
impl TokenField_op1215 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1215(i8);
impl TokenField_sop1215 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ra1215(u8);
impl TokenField_Ra1215 {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpe1215(u8);
impl TokenField_Rpe1215 {
    fn execution(&self) -> Register {
        meaning_7_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_7_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpo1215(u8);
impl TokenField_Rpo1215 {
    fn execution(&self) -> Register {
        meaning_8_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_8_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1515(u8);
impl TokenField_op1515 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1617(u8);
impl TokenField_op1617 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1620(u8);
impl TokenField_op1620 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1620(i8);
impl TokenField_sop1620 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1621(u8);
impl TokenField_op1621 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1622(u8);
impl TokenField_op1622 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1623(u8);
impl TokenField_op1623 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1627(u16);
impl TokenField_op1627 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1627(i16);
impl TokenField_sop1627 {
    fn execution(&self) -> i16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1630(i16);
impl TokenField_sop1630 {
    fn execution(&self) -> i16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1631(u16);
impl TokenField_op1631 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1819(u8);
impl TokenField_op1819 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1823(u8);
impl TokenField_op1823 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1827(u16);
impl TokenField_op1827 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2020(u8);
impl TokenField_op2020 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2023(u8);
impl TokenField_op2023 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2027(u8);
impl TokenField_op2027 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2122(u8);
impl TokenField_op2122 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2123(u8);
impl TokenField_op2123 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2127(u8);
impl TokenField_op2127 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2131(u16);
impl TokenField_op2131 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2225(u8);
impl TokenField_op2225 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2227(u8);
impl TokenField_op2227 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop2227(i8);
impl TokenField_sop2227 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2327(u8);
impl TokenField_op2327 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd2427(u8);
impl TokenField_Rd2427 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Re2427(u8);
impl TokenField_Re2427 {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ree2427(u8);
impl TokenField_Ree2427 {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Reo2427(u8);
impl TokenField_Reo2427 {
    fn execution(&self) -> Register {
        meaning_4_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_4_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2627(u8);
impl TokenField_op2627 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd2831(u8);
impl TokenField_Rd2831 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ra2831(u8);
impl TokenField_Ra2831 {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Re2831(u8);
impl TokenField_Re2831 {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ree2831(u8);
impl TokenField_Ree2831 {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Reo2831(u8);
impl TokenField_Reo2831 {
    fn execution(&self) -> Register {
        meaning_4_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_4_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2831(u8);
impl TokenField_op2831 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop2831(i8);
impl TokenField_sop2831 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op3131(u8);
impl TokenField_op3131 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0000(u8);
impl TokenField_pcp_op0000 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0001(u8);
impl TokenField_pcp_op0001 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0002(u8);
impl TokenField_pcp_op0002 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ccAB(u8);
impl TokenField_ccAB {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ccA(u8);
impl TokenField_ccA {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0004(u8);
impl TokenField_pcp_op0004 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0005(u8);
impl TokenField_pcp_op0005 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0009(u16);
impl TokenField_pcp_op0009 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0010(u16);
impl TokenField_pcp_op0010 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0101(u8);
impl TokenField_pcp_op0101 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0202(u8);
impl TokenField_pcp_op0202 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0203(u8);
impl TokenField_pcp_op0203 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0204(u8);
impl TokenField_pcp_op0204 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0303(u8);
impl TokenField_pcp_op0303 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_R0305(u8);
impl TokenField_R0305 {
    fn execution(&self) -> Register {
        meaning_9_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_9_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0404(u8);
impl TokenField_pcp_op0404 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0405(u8);
impl TokenField_pcp_op0405 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0406(u8);
impl TokenField_pcp_op0406 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0505(u8);
impl TokenField_pcp_op0505 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0506(u8);
impl TokenField_pcp_op0506 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_R0608(u8);
impl TokenField_R0608 {
    fn execution(&self) -> Register {
        meaning_9_value(self.0)
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_9_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ccB(u8);
impl TokenField_ccB {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0707(u8);
impl TokenField_pcp_op0707 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0708(u8);
impl TokenField_pcp_op0708 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0808(u8);
impl TokenField_pcp_op0808 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0909(u8);
impl TokenField_pcp_op0909 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0910(u8);
impl TokenField_pcp_op0910 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0912(u8);
impl TokenField_pcp_op0912 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1010(u8);
impl TokenField_pcp_op1010 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1012(u8);
impl TokenField_pcp_op1012 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1111(u8);
impl TokenField_pcp_op1111 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1212(u8);
impl TokenField_pcp_op1212 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_addrmode(u8);
impl TokenField_addrmode {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1631(u16);
impl TokenField_pcp_op1631 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i64 {
        i64::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
struct TokenParser<const LEN: usize>([u8; LEN]);
impl<const LEN: usize> TokenParser<LEN> {
    fn new(data: &[u8]) -> Option<Self> {
        let token_slice: &[u8] = data.get(..LEN)?;
        let token_data = <[u8; LEN]>::try_from(token_slice).unwrap();
        Some(Self(token_data))
    }
    fn TokenFieldop0003(&self) -> TokenField_op0003 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0003(inner_value)
    }
    fn TokenFieldop0005(&self) -> TokenField_op0005 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 6u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0005(inner_value)
    }
    fn TokenFieldop0006(&self) -> TokenField_op0006 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 7u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0006(inner_value)
    }
    fn TokenFieldop0007(&self) -> TokenField_op0007 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 8u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0007(inner_value)
    }
    fn TokenFieldop0404(&self) -> TokenField_op0404 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0404(inner_value)
    }
    fn TokenFieldop0405(&self) -> TokenField_op0405 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0405(inner_value)
    }
    fn TokenFieldop0407(&self) -> TokenField_op0407 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0407(inner_value)
    }
    fn TokenFieldop0606(&self) -> TokenField_op0606 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 6u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0606(inner_value)
    }
    fn TokenFieldop0607(&self) -> TokenField_op0607 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 6u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0607(inner_value)
    }
    fn TokenFieldop0707(&self) -> TokenField_op0707 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 7u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0707(inner_value)
    }
    fn TokenFieldop0810(&self) -> TokenField_op0810 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0810(inner_value)
    }
    fn TokenFieldRd0811(&self) -> TokenField_Rd0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rd0811(inner_value)
    }
    fn TokenFieldRa0811(&self) -> TokenField_Ra0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Ra0811(inner_value)
    }
    fn TokenFieldRe0811(&self) -> TokenField_Re0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Re0811(inner_value)
    }
    fn TokenFieldRee0811(&self) -> TokenField_Ree0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Ree0811(inner_value)
    }
    fn TokenFieldReo0811(&self) -> TokenField_Reo0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Reo0811(inner_value)
    }
    fn TokenFieldReN0811(&self) -> TokenField_ReN0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_ReN0811(inner_value)
    }
    fn TokenFieldop0811(&self) -> TokenField_op0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0811(inner_value)
    }
    fn TokenFieldRp0811(&self) -> TokenField_Rp0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rp0811(inner_value)
    }
    fn TokenFieldRpe0811(&self) -> TokenField_Rpe0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rpe0811(inner_value)
    }
    fn TokenFieldRpo0811(&self) -> TokenField_Rpo0811 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rpo0811(inner_value)
    }
    fn TokenFieldop0815(&self) -> TokenField_op0815 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 8u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op0815(inner_value)
    }
    fn TokenFieldsop0815(&self) -> TokenField_sop0815 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_i8::<false>(work_value, 0u64 as usize, 8u64 as usize);
            i8::try_from(value).unwrap()
        };
        TokenField_sop0815(inner_value)
    }
    fn TokenFieldop1111(&self) -> TokenField_op1111 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 3u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1111(inner_value)
    }
    fn TokenFieldRd1215(&self) -> TokenField_Rd1215 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rd1215(inner_value)
    }
    fn TokenFieldop1215(&self) -> TokenField_op1215 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1215(inner_value)
    }
    fn TokenFieldsop1215(&self) -> TokenField_sop1215 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_i8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            i8::try_from(value).unwrap()
        };
        TokenField_sop1215(inner_value)
    }
    fn TokenFieldRa1215(&self) -> TokenField_Ra1215 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Ra1215(inner_value)
    }
    fn TokenFieldRpe1215(&self) -> TokenField_Rpe1215 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rpe1215(inner_value)
    }
    fn TokenFieldRpo1215(&self) -> TokenField_Rpo1215 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rpo1215(inner_value)
    }
    fn TokenFieldop1515(&self) -> TokenField_op1515 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 7u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1515(inner_value)
    }
    fn TokenFieldop1617(&self) -> TokenField_op1617 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1617(inner_value)
    }
    fn TokenFieldop1620(&self) -> TokenField_op1620 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 5u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1620(inner_value)
    }
    fn TokenFieldsop1620(&self) -> TokenField_sop1620 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_i8::<false>(work_value, 0u64 as usize, 5u64 as usize);
            i8::try_from(value).unwrap()
        };
        TokenField_sop1620(inner_value)
    }
    fn TokenFieldop1621(&self) -> TokenField_op1621 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 6u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1621(inner_value)
    }
    fn TokenFieldop1622(&self) -> TokenField_op1622 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 7u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1622(inner_value)
    }
    fn TokenFieldop1623(&self) -> TokenField_op1623 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 8u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1623(inner_value)
    }
    fn TokenFieldop1627(&self) -> TokenField_op1627 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 0u64 as usize, 12u64 as usize);
            u16::try_from(value).unwrap()
        };
        TokenField_op1627(inner_value)
    }
    fn TokenFieldsop1627(&self) -> TokenField_sop1627 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_i16::<false>(work_value, 0u64 as usize, 12u64 as usize);
            i16::try_from(value).unwrap()
        };
        TokenField_sop1627(inner_value)
    }
    fn TokenFieldsop1630(&self) -> TokenField_sop1630 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_i16::<false>(work_value, 0u64 as usize, 15u64 as usize);
            i16::try_from(value).unwrap()
        };
        TokenField_sop1630(inner_value)
    }
    fn TokenFieldop1631(&self) -> TokenField_op1631 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 0u64 as usize, 16u64 as usize);
            u16::try_from(value).unwrap()
        };
        TokenField_op1631(inner_value)
    }
    fn TokenFieldop1819(&self) -> TokenField_op1819 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1819(inner_value)
    }
    fn TokenFieldop1823(&self) -> TokenField_op1823 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 6u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op1823(inner_value)
    }
    fn TokenFieldop1827(&self) -> TokenField_op1827 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 2u64 as usize, 10u64 as usize);
            u16::try_from(value).unwrap()
        };
        TokenField_op1827(inner_value)
    }
    fn TokenFieldop2020(&self) -> TokenField_op2020 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2020(inner_value)
    }
    fn TokenFieldop2023(&self) -> TokenField_op2023 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2023(inner_value)
    }
    fn TokenFieldop2027(&self) -> TokenField_op2027 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 4u64 as usize, 8u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2027(inner_value)
    }
    fn TokenFieldop2122(&self) -> TokenField_op2122 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 5u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2122(inner_value)
    }
    fn TokenFieldop2123(&self) -> TokenField_op2123 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 5u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2123(inner_value)
    }
    fn TokenFieldop2127(&self) -> TokenField_op2127 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 5u64 as usize, 7u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2127(inner_value)
    }
    fn TokenFieldop2131(&self) -> TokenField_op2131 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 5u64 as usize, 11u64 as usize);
            u16::try_from(value).unwrap()
        };
        TokenField_op2131(inner_value)
    }
    fn TokenFieldop2225(&self) -> TokenField_op2225 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 6u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2225(inner_value)
    }
    fn TokenFieldop2227(&self) -> TokenField_op2227 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 6u64 as usize, 6u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2227(inner_value)
    }
    fn TokenFieldsop2227(&self) -> TokenField_sop2227 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_i16::<false>(work_value, 6u64 as usize, 6u64 as usize);
            i8::try_from(value).unwrap()
        };
        TokenField_sop2227(inner_value)
    }
    fn TokenFieldop2327(&self) -> TokenField_op2327 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 7u64 as usize, 5u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2327(inner_value)
    }
    fn TokenFieldRd2427(&self) -> TokenField_Rd2427 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rd2427(inner_value)
    }
    fn TokenFieldRe2427(&self) -> TokenField_Re2427 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Re2427(inner_value)
    }
    fn TokenFieldRee2427(&self) -> TokenField_Ree2427 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Ree2427(inner_value)
    }
    fn TokenFieldReo2427(&self) -> TokenField_Reo2427 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Reo2427(inner_value)
    }
    fn TokenFieldop2627(&self) -> TokenField_op2627 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2627(inner_value)
    }
    fn TokenFieldRd2831(&self) -> TokenField_Rd2831 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Rd2831(inner_value)
    }
    fn TokenFieldRa2831(&self) -> TokenField_Ra2831 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Ra2831(inner_value)
    }
    fn TokenFieldRe2831(&self) -> TokenField_Re2831 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Re2831(inner_value)
    }
    fn TokenFieldRee2831(&self) -> TokenField_Ree2831 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Ree2831(inner_value)
    }
    fn TokenFieldReo2831(&self) -> TokenField_Reo2831 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_Reo2831(inner_value)
    }
    fn TokenFieldop2831(&self) -> TokenField_op2831 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op2831(inner_value)
    }
    fn TokenFieldsop2831(&self) -> TokenField_sop2831 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_i8::<false>(work_value, 4u64 as usize, 4u64 as usize);
            i8::try_from(value).unwrap()
        };
        TokenField_sop2831(inner_value)
    }
    fn TokenFieldop3131(&self) -> TokenField_op3131 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 7u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_op3131(inner_value)
    }
    fn TokenFieldpcp_op0000(&self) -> TokenField_pcp_op0000 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0000(inner_value)
    }
    fn TokenFieldpcp_op0001(&self) -> TokenField_pcp_op0001 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0001(inner_value)
    }
    fn TokenFieldpcp_op0002(&self) -> TokenField_pcp_op0002 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0002(inner_value)
    }
    fn TokenFieldccAB(&self) -> TokenField_ccAB {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_ccAB(inner_value)
    }
    fn TokenFieldccA(&self) -> TokenField_ccA {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_ccA(inner_value)
    }
    fn TokenFieldpcp_op0004(&self) -> TokenField_pcp_op0004 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 5u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0004(inner_value)
    }
    fn TokenFieldpcp_op0005(&self) -> TokenField_pcp_op0005 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 6u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0005(inner_value)
    }
    fn TokenFieldpcp_op0009(&self) -> TokenField_pcp_op0009 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 0u64 as usize, 10u64 as usize);
            u16::try_from(value).unwrap()
        };
        TokenField_pcp_op0009(inner_value)
    }
    fn TokenFieldpcp_op0010(&self) -> TokenField_pcp_op0010 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 0u64 as usize, 11u64 as usize);
            u16::try_from(value).unwrap()
        };
        TokenField_pcp_op0010(inner_value)
    }
    fn TokenFieldpcp_op0101(&self) -> TokenField_pcp_op0101 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 1u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0101(inner_value)
    }
    fn TokenFieldpcp_op0202(&self) -> TokenField_pcp_op0202 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0202(inner_value)
    }
    fn TokenFieldpcp_op0203(&self) -> TokenField_pcp_op0203 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0203(inner_value)
    }
    fn TokenFieldpcp_op0204(&self) -> TokenField_pcp_op0204 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0204(inner_value)
    }
    fn TokenFieldpcp_op0303(&self) -> TokenField_pcp_op0303 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 3u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0303(inner_value)
    }
    fn TokenFieldR0305(&self) -> TokenField_R0305 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 3u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_R0305(inner_value)
    }
    fn TokenFieldpcp_op0404(&self) -> TokenField_pcp_op0404 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0404(inner_value)
    }
    fn TokenFieldpcp_op0405(&self) -> TokenField_pcp_op0405 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0405(inner_value)
    }
    fn TokenFieldpcp_op0406(&self) -> TokenField_pcp_op0406 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0406(inner_value)
    }
    fn TokenFieldpcp_op0505(&self) -> TokenField_pcp_op0505 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 5u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0505(inner_value)
    }
    fn TokenFieldpcp_op0506(&self) -> TokenField_pcp_op0506 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 5u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0506(inner_value)
    }
    fn TokenFieldR0608(&self) -> TokenField_R0608 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 6u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_R0608(inner_value)
    }
    fn TokenFieldccB(&self) -> TokenField_ccB {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 6u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_ccB(inner_value)
    }
    fn TokenFieldpcp_op0707(&self) -> TokenField_pcp_op0707 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 1u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 7u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0707(inner_value)
    }
    fn TokenFieldpcp_op0708(&self) -> TokenField_pcp_op0708 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 7u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0708(inner_value)
    }
    fn TokenFieldpcp_op0808(&self) -> TokenField_pcp_op0808 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 0u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0808(inner_value)
    }
    fn TokenFieldpcp_op0909(&self) -> TokenField_pcp_op0909 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 1u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0909(inner_value)
    }
    fn TokenFieldpcp_op0910(&self) -> TokenField_pcp_op0910 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 1u64 as usize, 2u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0910(inner_value)
    }
    fn TokenFieldpcp_op0912(&self) -> TokenField_pcp_op0912 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 1u64 as usize, 4u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op0912(inner_value)
    }
    fn TokenFieldpcp_op1010(&self) -> TokenField_pcp_op1010 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op1010(inner_value)
    }
    fn TokenFieldpcp_op1012(&self) -> TokenField_pcp_op1012 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 2u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op1012(inner_value)
    }
    fn TokenFieldpcp_op1111(&self) -> TokenField_pcp_op1111 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 3u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op1111(inner_value)
    }
    fn TokenFieldpcp_op1212(&self) -> TokenField_pcp_op1212 {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 4u64 as usize, 1u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_pcp_op1212(inner_value)
    }
    fn TokenFieldaddrmode(&self) -> TokenField_addrmode {
        let inner_value = {
            let mut work_value = [0u8; 1u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 1u64 as usize;
            let token_start = 1u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u8::<false>(work_value, 5u64 as usize, 3u64 as usize);
            u8::try_from(value).unwrap()
        };
        TokenField_addrmode(inner_value)
    }
    fn TokenFieldpcp_op1631(&self) -> TokenField_pcp_op1631 {
        let inner_value = {
            let mut work_value = [0u8; 2u64 as usize];
            let work_start = 0u64 as usize;
            let work_end = 2u64 as usize;
            let token_start = 0u64 as usize;
            let token_end = 2u64 as usize;
            work_value[work_start..work_end]
                .copy_from_slice(&self.0[token_start..token_end]);
            let value =
                read_u16::<false>(work_value, 0u64 as usize, 16u64 as usize);
            u16::try_from(value).unwrap()
        };
        TokenField_pcp_op1631(inner_value)
    }
}
#[derive(Clone, Copy, Debug)]
pub enum Register {
    contextreg,
    e0,
    e2,
    e4,
    e6,
    e8,
    e10,
    e12,
    e14,
    d0,
    d1,
    d2,
    d3,
    d4,
    d5,
    d6,
    d7,
    d8,
    d9,
    d10,
    d11,
    d12,
    d13,
    d14,
    d15,
    p0,
    p2,
    p4,
    p6,
    p8,
    p10,
    p12,
    p14,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    PC,
    PSW,
    PCXI,
    ISP,
    SYSCON,
    CPU_ID,
    CORE_ID,
    COMPAT,
    SMACON,
    FCX,
    LCX,
    ICR,
    PIPN,
    BIV,
    BTV,
    PSTR,
    DSTR,
    DATR,
    DEADD,
    PIETR,
    PIEAR,
    DIETR,
    DIEAR,
    PMA0,
    PMA1,
    PMA2,
    PCON1,
    PCON2,
    PCON0,
    DCON0,
    DCON1,
    DCON2,
    DPR0_L,
    DPR0_U,
    DPR1_L,
    DPR1_U,
    DPR2_L,
    DPR2_U,
    DPR3_L,
    DPR3_U,
    DPR4_L,
    DPR4_U,
    DPR5_L,
    DPR5_U,
    DPR6_L,
    DPR6_U,
    DPR7_L,
    DPR7_U,
    DPR8_L,
    DPR8_U,
    DPR9_L,
    DPR9_U,
    DPR10_L,
    DPR10_U,
    DPR11_L,
    DPR11_U,
    DPR12_L,
    DPR12_U,
    DPR13_L,
    DPR13_U,
    DPR14_L,
    DPR14_U,
    DPR15_L,
    DPR15_U,
    CPR0_L,
    CPR0_U,
    CPR1_L,
    CPR1_U,
    CPR2_L,
    CPR2_U,
    CPR3_L,
    CPR3_U,
    CPR4_L,
    CPR4_U,
    CPR5_L,
    CPR5_U,
    CPR6_L,
    CPR6_U,
    CPR7_L,
    CPR7_U,
    CPR8_L,
    CPR8_U,
    CPR9_L,
    CPR9_U,
    CPR10_L,
    CPR10_U,
    CPR11_L,
    CPR11_U,
    CPR12_L,
    CPR12_U,
    CPR13_L,
    CPR13_U,
    CPR14_L,
    CPR14_U,
    CPR15_L,
    CPR15_U,
    DPRE_0,
    DPRE_1,
    DPRE_2,
    DPRE_3,
    DPWE_0,
    DPWE_1,
    DPWE_2,
    DPWE_3,
    CPXE_0,
    CPXE_1,
    CPXE_2,
    CPXE_3,
    TPS_TIMER0,
    TPS_TIMER1,
    TPS_TIMER2,
    TPS_CON,
    FPU_TRAP_CON,
    FPU_TRAP_PC,
    FPU_TRAP_OPC,
    FPU_TRAP_SRC1,
    FPU_TRAP_SRC2,
    FPU_TRAP_SRC3,
    DBGSR,
    EXEVT,
    CREVT,
    SWEVT,
    TRIG_ACC,
    DMS,
    DCX,
    DBGTCR,
    TASK_ASI,
    TR0EVT,
    TR0ADR,
    TR1EVT,
    TR1ADR,
    TR2EVT,
    TRA2DR,
    TR3EVT,
    TR3ADR,
    TR4EVT,
    TR4ADR,
    TR5EVT,
    TR5ADR,
    TR6EVT,
    TR6ADR,
    TR7EVT,
    TR7ADR,
    CCTRL,
    CCNT,
    ICNT,
    M1CNT,
    M2CNT,
    M3CNT,
    R0,
    R1,
    R2,
    R3,
    R4,
    R5,
    R6,
    R7,
}
impl core::fmt::Display for Register {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::contextreg => write!(f, "contextreg"),
            Self::e0 => write!(f, "e0"),
            Self::e2 => write!(f, "e2"),
            Self::e4 => write!(f, "e4"),
            Self::e6 => write!(f, "e6"),
            Self::e8 => write!(f, "e8"),
            Self::e10 => write!(f, "e10"),
            Self::e12 => write!(f, "e12"),
            Self::e14 => write!(f, "e14"),
            Self::d0 => write!(f, "d0"),
            Self::d1 => write!(f, "d1"),
            Self::d2 => write!(f, "d2"),
            Self::d3 => write!(f, "d3"),
            Self::d4 => write!(f, "d4"),
            Self::d5 => write!(f, "d5"),
            Self::d6 => write!(f, "d6"),
            Self::d7 => write!(f, "d7"),
            Self::d8 => write!(f, "d8"),
            Self::d9 => write!(f, "d9"),
            Self::d10 => write!(f, "d10"),
            Self::d11 => write!(f, "d11"),
            Self::d12 => write!(f, "d12"),
            Self::d13 => write!(f, "d13"),
            Self::d14 => write!(f, "d14"),
            Self::d15 => write!(f, "d15"),
            Self::p0 => write!(f, "p0"),
            Self::p2 => write!(f, "p2"),
            Self::p4 => write!(f, "p4"),
            Self::p6 => write!(f, "p6"),
            Self::p8 => write!(f, "p8"),
            Self::p10 => write!(f, "p10"),
            Self::p12 => write!(f, "p12"),
            Self::p14 => write!(f, "p14"),
            Self::a0 => write!(f, "a0"),
            Self::a1 => write!(f, "a1"),
            Self::a2 => write!(f, "a2"),
            Self::a3 => write!(f, "a3"),
            Self::a4 => write!(f, "a4"),
            Self::a5 => write!(f, "a5"),
            Self::a6 => write!(f, "a6"),
            Self::a7 => write!(f, "a7"),
            Self::a8 => write!(f, "a8"),
            Self::a9 => write!(f, "a9"),
            Self::a10 => write!(f, "a10"),
            Self::a11 => write!(f, "a11"),
            Self::a12 => write!(f, "a12"),
            Self::a13 => write!(f, "a13"),
            Self::a14 => write!(f, "a14"),
            Self::a15 => write!(f, "a15"),
            Self::PC => write!(f, "PC"),
            Self::PSW => write!(f, "PSW"),
            Self::PCXI => write!(f, "PCXI"),
            Self::ISP => write!(f, "ISP"),
            Self::SYSCON => write!(f, "SYSCON"),
            Self::CPU_ID => write!(f, "CPU_ID"),
            Self::CORE_ID => write!(f, "CORE_ID"),
            Self::COMPAT => write!(f, "COMPAT"),
            Self::SMACON => write!(f, "SMACON"),
            Self::FCX => write!(f, "FCX"),
            Self::LCX => write!(f, "LCX"),
            Self::ICR => write!(f, "ICR"),
            Self::PIPN => write!(f, "PIPN"),
            Self::BIV => write!(f, "BIV"),
            Self::BTV => write!(f, "BTV"),
            Self::PSTR => write!(f, "PSTR"),
            Self::DSTR => write!(f, "DSTR"),
            Self::DATR => write!(f, "DATR"),
            Self::DEADD => write!(f, "DEADD"),
            Self::PIETR => write!(f, "PIETR"),
            Self::PIEAR => write!(f, "PIEAR"),
            Self::DIETR => write!(f, "DIETR"),
            Self::DIEAR => write!(f, "DIEAR"),
            Self::PMA0 => write!(f, "PMA0"),
            Self::PMA1 => write!(f, "PMA1"),
            Self::PMA2 => write!(f, "PMA2"),
            Self::PCON1 => write!(f, "PCON1"),
            Self::PCON2 => write!(f, "PCON2"),
            Self::PCON0 => write!(f, "PCON0"),
            Self::DCON0 => write!(f, "DCON0"),
            Self::DCON1 => write!(f, "DCON1"),
            Self::DCON2 => write!(f, "DCON2"),
            Self::DPR0_L => write!(f, "DPR0_L"),
            Self::DPR0_U => write!(f, "DPR0_U"),
            Self::DPR1_L => write!(f, "DPR1_L"),
            Self::DPR1_U => write!(f, "DPR1_U"),
            Self::DPR2_L => write!(f, "DPR2_L"),
            Self::DPR2_U => write!(f, "DPR2_U"),
            Self::DPR3_L => write!(f, "DPR3_L"),
            Self::DPR3_U => write!(f, "DPR3_U"),
            Self::DPR4_L => write!(f, "DPR4_L"),
            Self::DPR4_U => write!(f, "DPR4_U"),
            Self::DPR5_L => write!(f, "DPR5_L"),
            Self::DPR5_U => write!(f, "DPR5_U"),
            Self::DPR6_L => write!(f, "DPR6_L"),
            Self::DPR6_U => write!(f, "DPR6_U"),
            Self::DPR7_L => write!(f, "DPR7_L"),
            Self::DPR7_U => write!(f, "DPR7_U"),
            Self::DPR8_L => write!(f, "DPR8_L"),
            Self::DPR8_U => write!(f, "DPR8_U"),
            Self::DPR9_L => write!(f, "DPR9_L"),
            Self::DPR9_U => write!(f, "DPR9_U"),
            Self::DPR10_L => write!(f, "DPR10_L"),
            Self::DPR10_U => write!(f, "DPR10_U"),
            Self::DPR11_L => write!(f, "DPR11_L"),
            Self::DPR11_U => write!(f, "DPR11_U"),
            Self::DPR12_L => write!(f, "DPR12_L"),
            Self::DPR12_U => write!(f, "DPR12_U"),
            Self::DPR13_L => write!(f, "DPR13_L"),
            Self::DPR13_U => write!(f, "DPR13_U"),
            Self::DPR14_L => write!(f, "DPR14_L"),
            Self::DPR14_U => write!(f, "DPR14_U"),
            Self::DPR15_L => write!(f, "DPR15_L"),
            Self::DPR15_U => write!(f, "DPR15_U"),
            Self::CPR0_L => write!(f, "CPR0_L"),
            Self::CPR0_U => write!(f, "CPR0_U"),
            Self::CPR1_L => write!(f, "CPR1_L"),
            Self::CPR1_U => write!(f, "CPR1_U"),
            Self::CPR2_L => write!(f, "CPR2_L"),
            Self::CPR2_U => write!(f, "CPR2_U"),
            Self::CPR3_L => write!(f, "CPR3_L"),
            Self::CPR3_U => write!(f, "CPR3_U"),
            Self::CPR4_L => write!(f, "CPR4_L"),
            Self::CPR4_U => write!(f, "CPR4_U"),
            Self::CPR5_L => write!(f, "CPR5_L"),
            Self::CPR5_U => write!(f, "CPR5_U"),
            Self::CPR6_L => write!(f, "CPR6_L"),
            Self::CPR6_U => write!(f, "CPR6_U"),
            Self::CPR7_L => write!(f, "CPR7_L"),
            Self::CPR7_U => write!(f, "CPR7_U"),
            Self::CPR8_L => write!(f, "CPR8_L"),
            Self::CPR8_U => write!(f, "CPR8_U"),
            Self::CPR9_L => write!(f, "CPR9_L"),
            Self::CPR9_U => write!(f, "CPR9_U"),
            Self::CPR10_L => write!(f, "CPR10_L"),
            Self::CPR10_U => write!(f, "CPR10_U"),
            Self::CPR11_L => write!(f, "CPR11_L"),
            Self::CPR11_U => write!(f, "CPR11_U"),
            Self::CPR12_L => write!(f, "CPR12_L"),
            Self::CPR12_U => write!(f, "CPR12_U"),
            Self::CPR13_L => write!(f, "CPR13_L"),
            Self::CPR13_U => write!(f, "CPR13_U"),
            Self::CPR14_L => write!(f, "CPR14_L"),
            Self::CPR14_U => write!(f, "CPR14_U"),
            Self::CPR15_L => write!(f, "CPR15_L"),
            Self::CPR15_U => write!(f, "CPR15_U"),
            Self::DPRE_0 => write!(f, "DPRE_0"),
            Self::DPRE_1 => write!(f, "DPRE_1"),
            Self::DPRE_2 => write!(f, "DPRE_2"),
            Self::DPRE_3 => write!(f, "DPRE_3"),
            Self::DPWE_0 => write!(f, "DPWE_0"),
            Self::DPWE_1 => write!(f, "DPWE_1"),
            Self::DPWE_2 => write!(f, "DPWE_2"),
            Self::DPWE_3 => write!(f, "DPWE_3"),
            Self::CPXE_0 => write!(f, "CPXE_0"),
            Self::CPXE_1 => write!(f, "CPXE_1"),
            Self::CPXE_2 => write!(f, "CPXE_2"),
            Self::CPXE_3 => write!(f, "CPXE_3"),
            Self::TPS_TIMER0 => write!(f, "TPS_TIMER0"),
            Self::TPS_TIMER1 => write!(f, "TPS_TIMER1"),
            Self::TPS_TIMER2 => write!(f, "TPS_TIMER2"),
            Self::TPS_CON => write!(f, "TPS_CON"),
            Self::FPU_TRAP_CON => write!(f, "FPU_TRAP_CON"),
            Self::FPU_TRAP_PC => write!(f, "FPU_TRAP_PC"),
            Self::FPU_TRAP_OPC => write!(f, "FPU_TRAP_OPC"),
            Self::FPU_TRAP_SRC1 => write!(f, "FPU_TRAP_SRC1"),
            Self::FPU_TRAP_SRC2 => write!(f, "FPU_TRAP_SRC2"),
            Self::FPU_TRAP_SRC3 => write!(f, "FPU_TRAP_SRC3"),
            Self::DBGSR => write!(f, "DBGSR"),
            Self::EXEVT => write!(f, "EXEVT"),
            Self::CREVT => write!(f, "CREVT"),
            Self::SWEVT => write!(f, "SWEVT"),
            Self::TRIG_ACC => write!(f, "TRIG_ACC"),
            Self::DMS => write!(f, "DMS"),
            Self::DCX => write!(f, "DCX"),
            Self::DBGTCR => write!(f, "DBGTCR"),
            Self::TASK_ASI => write!(f, "TASK_ASI"),
            Self::TR0EVT => write!(f, "TR0EVT"),
            Self::TR0ADR => write!(f, "TR0ADR"),
            Self::TR1EVT => write!(f, "TR1EVT"),
            Self::TR1ADR => write!(f, "TR1ADR"),
            Self::TR2EVT => write!(f, "TR2EVT"),
            Self::TRA2DR => write!(f, "TRA2DR"),
            Self::TR3EVT => write!(f, "TR3EVT"),
            Self::TR3ADR => write!(f, "TR3ADR"),
            Self::TR4EVT => write!(f, "TR4EVT"),
            Self::TR4ADR => write!(f, "TR4ADR"),
            Self::TR5EVT => write!(f, "TR5EVT"),
            Self::TR5ADR => write!(f, "TR5ADR"),
            Self::TR6EVT => write!(f, "TR6EVT"),
            Self::TR6ADR => write!(f, "TR6ADR"),
            Self::TR7EVT => write!(f, "TR7EVT"),
            Self::TR7ADR => write!(f, "TR7ADR"),
            Self::CCTRL => write!(f, "CCTRL"),
            Self::CCNT => write!(f, "CCNT"),
            Self::ICNT => write!(f, "ICNT"),
            Self::M1CNT => write!(f, "M1CNT"),
            Self::M2CNT => write!(f, "M2CNT"),
            Self::M3CNT => write!(f, "M3CNT"),
            Self::R0 => write!(f, "R0"),
            Self::R1 => write!(f, "R1"),
            Self::R2 => write!(f, "R2"),
            Self::R3 => write!(f, "R3"),
            Self::R4 => write!(f, "R4"),
            Self::R5 => write!(f, "R5"),
            Self::R6 => write!(f, "R6"),
            Self::R7 => write!(f, "R7"),
        }
    }
}
#[derive(Clone, Copy, Debug)]
pub enum DisplayElement {
    Literal(&'static str),
    Register(Register),
    Number(bool, i64),
}
impl core::fmt::Display for DisplayElement {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Literal(lit) => lit.fmt(f),
            Self::Register(reg) => reg.fmt(f),
            Self::Number(hex, value) => match (*hex, value.is_negative()) {
                (true, true) => write!(f, "-0x{:x}", value.abs()),
                (true, false) => write!(f, "0x{:x}", value),
                (false, _) => value.fmt(f),
            },
        }
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2007:1"]
#[derive(Clone, Debug)]
struct instructionVar0 {}
impl instructionVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("debug")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 256i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2028:1"]
#[derive(Clone, Debug)]
struct instructionVar1 {}
impl instructionVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("disable")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 832i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2076:1"]
#[derive(Clone, Debug)]
struct instructionVar2 {}
impl instructionVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("dsync")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1152i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2254:1"]
#[derive(Clone, Debug)]
struct instructionVar3 {}
impl instructionVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("enable")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 768i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2453:1"]
#[derive(Clone, Debug)]
struct instructionVar4 {}
impl instructionVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("fret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop2227().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2663:1"]
#[derive(Clone, Debug)]
struct instructionVar5 {}
impl instructionVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("isync")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1216i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6798:1"]
#[derive(Clone, Debug)]
struct instructionVar6 {}
impl instructionVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nop")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7101:1"]
#[derive(Clone, Debug)]
struct instructionVar7 {}
impl instructionVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("ret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 384i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7144:1"]
#[derive(Clone, Debug)]
struct instructionVar8 {}
impl instructionVar8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("rfe")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 448i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7167:1"]
#[derive(Clone, Debug)]
struct instructionVar9 {}
impl instructionVar9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("rfm")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 320i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7189:1"]
#[derive(Clone, Debug)]
struct instructionVar10 {}
impl instructionVar10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("rslcx")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 576i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7202:1"]
#[derive(Clone, Debug)]
struct instructionVar11 {}
impl instructionVar11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("rstv")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 47i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8222:1"]
#[derive(Clone, Debug)]
struct instructionVar12 {}
impl instructionVar12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("svlcx")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 512i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8309:1"]
#[derive(Clone, Debug)]
struct instructionVar13 {}
impl instructionVar13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("tlbflush.a")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 64i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8316:1"]
#[derive(Clone, Debug)]
struct instructionVar14 {}
impl instructionVar14 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("tlbflush.b")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 80i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8344:1"]
#[derive(Clone, Debug)]
struct instructionVar15 {}
impl instructionVar15 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("trapsv")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1344i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8352:1"]
#[derive(Clone, Debug)]
struct instructionVar16 {}
impl instructionVar16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("trapv")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1280i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8395:1"]
#[derive(Clone, Debug)]
struct instructionVar17 {}
impl instructionVar17 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("wait")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop2227().disassembly() != 22i64 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:920:1"]
#[derive(Clone, Debug)]
struct instructionVar18 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar18 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 448i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:927:1"]
#[derive(Clone, Debug)]
struct instructionVar19 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar19 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abs.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1472i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:941:1"]
#[derive(Clone, Debug)]
struct instructionVar20 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar20 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1984i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1015:1"]
#[derive(Clone, Debug)]
struct instructionVar21 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar21 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abss"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 464i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1023:1"]
#[derive(Clone, Debug)]
struct instructionVar22 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar22 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abss.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2000i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1813:1"]
#[derive(Clone, Debug)]
struct instructionVar23 {
    Ra0811: TokenField_Ra0811,
}
impl instructionVar23 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("calli"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2035:1"]
#[derive(Clone, Debug)]
struct instructionVar24 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar24 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("disable"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 960i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2429:1"]
#[derive(Clone, Debug)]
struct instructionVar25 {
    Ra0811: TokenField_Ra0811,
}
impl instructionVar25 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("fcalli"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 16i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2900:1"]
#[derive(Clone, Debug)]
struct instructionVar26 {
    Ra0811: TokenField_Ra0811,
}
impl instructionVar26 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("ji"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 48i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2934:1"]
#[derive(Clone, Debug)]
struct instructionVar27 {
    Ra0811: TokenField_Ra0811,
}
impl instructionVar27 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("jli"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 32i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7073:1"]
#[derive(Clone, Debug)]
struct instructionVar28 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar28 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("restore"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 896i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8302:1"]
#[derive(Clone, Debug)]
struct instructionVar29 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar29 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbdemap"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8323:1"]
#[derive(Clone, Debug)]
struct instructionVar30 {
    Re0811: TokenField_Re0811,
}
impl instructionVar30 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbmap"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1024i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Re0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8330:1"]
#[derive(Clone, Debug)]
struct instructionVar31 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar31 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbprobe.a"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 128i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8337:1"]
#[derive(Clone, Debug)]
struct instructionVar32 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar32 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbprobe.i"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 144i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8370:1"]
#[derive(Clone, Debug)]
struct instructionVar33 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar33 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("updfl"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 193i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1535:1"]
#[derive(Clone, Debug)]
struct instructionVar34 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar34 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("bsplit"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 144i64 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Re2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1841:1"]
#[derive(Clone, Debug)]
struct instructionVar35 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar35 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clo"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 448i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1847:1"]
#[derive(Clone, Debug)]
struct instructionVar36 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar36 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clo.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2000i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1856:1"]
#[derive(Clone, Debug)]
struct instructionVar37 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar37 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("cls"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 464i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1862:1"]
#[derive(Clone, Debug)]
struct instructionVar38 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar38 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("cls.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2016i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1871:1"]
#[derive(Clone, Debug)]
struct instructionVar39 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar39 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clz"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 432i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1877:1"]
#[derive(Clone, Debug)]
struct instructionVar40 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar40 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clz.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1984i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2350:1"]
#[derive(Clone, Debug)]
struct instructionVar41 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
}
impl instructionVar41 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("eqz.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1152i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2465:1"]
#[derive(Clone, Debug)]
struct instructionVar42 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar42 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftoi"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 257i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2475:1"]
#[derive(Clone, Debug)]
struct instructionVar43 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar43 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftoiz"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 305i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2505:1"]
#[derive(Clone, Debug)]
struct instructionVar44 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar44 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftou"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 289i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2515:1"]
#[derive(Clone, Debug)]
struct instructionVar45 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar45 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftouz"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 369i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2670:1"]
#[derive(Clone, Debug)]
struct instructionVar46 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar46 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("itof"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 321i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3380:1"]
#[derive(Clone, Debug)]
struct instructionVar47 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar47 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 41i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i64 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 9i64 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3419:1"]
#[derive(Clone, Debug)]
struct instructionVar48 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar48 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 41i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i64 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 41i64 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5049:1"]
#[derive(Clone, Debug)]
struct instructionVar49 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar49 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mffr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 465i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5162:1"]
#[derive(Clone, Debug)]
struct instructionVar50 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar50 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 496i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5177:1"]
#[derive(Clone, Debug)]
struct instructionVar51 {
    Re2831: TokenField_Re2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar51 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2048i64 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Re2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5212:1"]
#[derive(Clone, Debug)]
struct instructionVar52 {
    Ra2831: TokenField_Ra2831,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar52 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1584i64 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Ra2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5226:1"]
#[derive(Clone, Debug)]
struct instructionVar53 {
    Ra2831: TokenField_Ra2831,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar53 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.aa"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 0i64 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215, Ra2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5240:1"]
#[derive(Clone, Debug)]
struct instructionVar54 {
    Rd2831: TokenField_Rd2831,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar54 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.d"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1216i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6371:1"]
#[derive(Clone, Debug)]
struct instructionVar55 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar55 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mtfr"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 449i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6785:1"]
#[derive(Clone, Debug)]
struct instructionVar56 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
}
impl instructionVar56 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("nez.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1168i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7042:1"]
#[derive(Clone, Debug)]
struct instructionVar57 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar57 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("parity"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7063:1"]
#[derive(Clone, Debug)]
struct instructionVar58 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar58 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("qseed.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 401i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7253:1"]
#[derive(Clone, Debug)]
struct instructionVar59 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar59 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1504i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7269:1"]
#[derive(Clone, Debug)]
struct instructionVar60 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar60 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1520i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7285:1"]
#[derive(Clone, Debug)]
struct instructionVar61 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar61 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2016i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7301:1"]
#[derive(Clone, Debug)]
struct instructionVar62 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar62 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2032i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7840:1"]
#[derive(Clone, Debug)]
struct instructionVar63 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar63 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 169i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i64 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 9i64 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7879:1"]
#[derive(Clone, Debug)]
struct instructionVar64 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar64 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 169i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i64 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 41i64 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8361:1"]
#[derive(Clone, Debug)]
struct instructionVar65 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar65 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("unpack"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 128i64 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Re2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8384:1"]
#[derive(Clone, Debug)]
struct instructionVar66 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar66 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("utof"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 353i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:951:1"]
#[derive(Clone, Debug)]
struct instructionVar67 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar67 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdif"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 224i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:965:1"]
#[derive(Clone, Debug)]
struct instructionVar68 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar68 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdif.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1248i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:979:1"]
#[derive(Clone, Debug)]
struct instructionVar69 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar69 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdif.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1760i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:989:1"]
#[derive(Clone, Debug)]
struct instructionVar70 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar70 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdifs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 240i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1005:1"]
#[derive(Clone, Debug)]
struct instructionVar71 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar71 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdifs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1776i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1079:1"]
#[derive(Clone, Debug)]
struct instructionVar72 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar72 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 0i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1109:1"]
#[derive(Clone, Debug)]
struct instructionVar73 {
    Ra2831: TokenField_Ra2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar73 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 16i64 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1115:1"]
#[derive(Clone, Debug)]
struct instructionVar74 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar74 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1024i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1139:1"]
#[derive(Clone, Debug)]
struct instructionVar75 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar75 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1536i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1149:1"]
#[derive(Clone, Debug)]
struct instructionVar76 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar76 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("addc"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 80i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1195:1"]
#[derive(Clone, Debug)]
struct instructionVar77 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar77 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1211:1"]
#[derive(Clone, Debug)]
struct instructionVar78 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar78 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1568i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1221:1"]
#[derive(Clone, Debug)]
struct instructionVar79 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar79 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1584i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1231:1"]
#[derive(Clone, Debug)]
struct instructionVar80 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar80 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 48i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1264:1"]
#[derive(Clone, Debug)]
struct instructionVar81 {
    Ra2831: TokenField_Ra2831,
    Ra1215: TokenField_Ra1215,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar81 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("addsc.at"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1568i64 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra1215,
                Rd0811,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1271:1"]
#[derive(Clone, Debug)]
struct instructionVar82 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar82 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("addx"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 64i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1305:1"]
#[derive(Clone, Debug)]
struct instructionVar83 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar83 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 128i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1333:1"]
#[derive(Clone, Debug)]
struct instructionVar84 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar84 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 512i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1345:1"]
#[derive(Clone, Debug)]
struct instructionVar85 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar85 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 576i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1357:1"]
#[derive(Clone, Debug)]
struct instructionVar86 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar86 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 592i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1369:1"]
#[derive(Clone, Debug)]
struct instructionVar87 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar87 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 544i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1381:1"]
#[derive(Clone, Debug)]
struct instructionVar88 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar88 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 560i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1393:1"]
#[derive(Clone, Debug)]
struct instructionVar89 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar89 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 528i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1429:1"]
#[derive(Clone, Debug)]
struct instructionVar90 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar90 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("andn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 224i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1491:1"]
#[derive(Clone, Debug)]
struct instructionVar91 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar91 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("bmerge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 16i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1939:1"]
#[derive(Clone, Debug)]
struct instructionVar92 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar92 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmp.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1973:1"]
#[derive(Clone, Debug)]
struct instructionVar93 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar93 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("crc32"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 48i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2043:1"]
#[derive(Clone, Debug)]
struct instructionVar94 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar94 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("div"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 513i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2054:1"]
#[derive(Clone, Debug)]
struct instructionVar95 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar95 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("div.u"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 529i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2066:1"]
#[derive(Clone, Debug)]
struct instructionVar96 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar96 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("div.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 81i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2105:1"]
#[derive(Clone, Debug)]
struct instructionVar97 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar97 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 416i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2122:1"]
#[derive(Clone, Debug)]
struct instructionVar98 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar98 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.b"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1440i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2138:1"]
#[derive(Clone, Debug)]
struct instructionVar99 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar99 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.bu"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1184i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2154:1"]
#[derive(Clone, Debug)]
struct instructionVar100 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar100 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 928i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2171:1"]
#[derive(Clone, Debug)]
struct instructionVar101 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar101 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.hu"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 672i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2187:1"]
#[derive(Clone, Debug)]
struct instructionVar102 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar102 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.u"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 160i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2272:1"]
#[derive(Clone, Debug)]
struct instructionVar103 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar103 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 256i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2284:1"]
#[derive(Clone, Debug)]
struct instructionVar104 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar104 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1024i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2290:1"]
#[derive(Clone, Debug)]
struct instructionVar105 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar105 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1280i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2300:1"]
#[derive(Clone, Debug)]
struct instructionVar106 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar106 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1792i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2308:1"]
#[derive(Clone, Debug)]
struct instructionVar107 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar107 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.w"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2304i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2314:1"]
#[derive(Clone, Debug)]
struct instructionVar108 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar108 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eqany.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1376i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2334:1"]
#[derive(Clone, Debug)]
struct instructionVar109 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar109 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eqany.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1888i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2486:1"]
#[derive(Clone, Debug)]
struct instructionVar110 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar110 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ftoq31"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 273i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2495:1"]
#[derive(Clone, Debug)]
struct instructionVar111 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar111 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ftoq31z"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 385i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2525:1"]
#[derive(Clone, Debug)]
struct instructionVar112 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar112 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 320i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2537:1"]
#[derive(Clone, Debug)]
struct instructionVar113 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar113 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ge.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1072i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2543:1"]
#[derive(Clone, Debug)]
struct instructionVar114 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar114 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 336i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3731:1"]
#[derive(Clone, Debug)]
struct instructionVar115 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar115 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 288i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3743:1"]
#[derive(Clone, Debug)]
struct instructionVar116 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar116 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1056i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3749:1"]
#[derive(Clone, Debug)]
struct instructionVar117 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar117 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1312i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3759:1"]
#[derive(Clone, Debug)]
struct instructionVar118 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar118 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1328i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3769:1"]
#[derive(Clone, Debug)]
struct instructionVar119 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar119 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1824i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3777:1"]
#[derive(Clone, Debug)]
struct instructionVar120 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar120 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1840i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3785:1"]
#[derive(Clone, Debug)]
struct instructionVar121 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar121 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 304i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3797:1"]
#[derive(Clone, Debug)]
struct instructionVar122 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar122 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.w"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2336i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3803:1"]
#[derive(Clone, Debug)]
struct instructionVar123 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar123 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.wu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2352i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4971:1"]
#[derive(Clone, Debug)]
struct instructionVar124 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar124 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 416i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4983:1"]
#[derive(Clone, Debug)]
struct instructionVar125 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar125 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1440i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4997:1"]
#[derive(Clone, Debug)]
struct instructionVar126 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar126 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1456i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5011:1"]
#[derive(Clone, Debug)]
struct instructionVar127 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar127 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1952i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5021:1"]
#[derive(Clone, Debug)]
struct instructionVar128 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar128 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1968i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5031:1"]
#[derive(Clone, Debug)]
struct instructionVar129 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar129 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 432i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5056:1"]
#[derive(Clone, Debug)]
struct instructionVar130 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar130 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 384i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5068:1"]
#[derive(Clone, Debug)]
struct instructionVar131 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar131 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1408i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5082:1"]
#[derive(Clone, Debug)]
struct instructionVar132 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar132 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1424i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5096:1"]
#[derive(Clone, Debug)]
struct instructionVar133 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar133 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1920i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5106:1"]
#[derive(Clone, Debug)]
struct instructionVar134 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar134 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1936i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5116:1"]
#[derive(Clone, Debug)]
struct instructionVar135 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar135 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 400i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5185:1"]
#[derive(Clone, Debug)]
struct instructionVar136 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar136 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2064i64 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6393:1"]
#[derive(Clone, Debug)]
struct instructionVar137 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar137 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 10i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6411:1"]
#[derive(Clone, Debug)]
struct instructionVar138 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar138 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 106i64 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6420:1"]
#[derive(Clone, Debug)]
struct instructionVar139 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar139 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 65i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6567:1"]
#[derive(Clone, Debug)]
struct instructionVar140 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar140 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 104i64 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6720:1"]
#[derive(Clone, Debug)]
struct instructionVar141 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar141 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("muls"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 138i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6738:1"]
#[derive(Clone, Debug)]
struct instructionVar142 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar142 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("muls.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 136i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6747:1"]
#[derive(Clone, Debug)]
struct instructionVar143 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar143 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("nand"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 144i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6767:1"]
#[derive(Clone, Debug)]
struct instructionVar144 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar144 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 272i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6779:1"]
#[derive(Clone, Debug)]
struct instructionVar145 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar145 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ne.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1040i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6813:1"]
#[derive(Clone, Debug)]
struct instructionVar146 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar146 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("nor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 176i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6849:1"]
#[derive(Clone, Debug)]
struct instructionVar147 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar147 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 160i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6881:1"]
#[derive(Clone, Debug)]
struct instructionVar148 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar148 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 624i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6893:1"]
#[derive(Clone, Debug)]
struct instructionVar149 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar149 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 688i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6905:1"]
#[derive(Clone, Debug)]
struct instructionVar150 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar150 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 704i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6917:1"]
#[derive(Clone, Debug)]
struct instructionVar151 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar151 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 656i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6929:1"]
#[derive(Clone, Debug)]
struct instructionVar152 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar152 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 672i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6941:1"]
#[derive(Clone, Debug)]
struct instructionVar153 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar153 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 640i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6981:1"]
#[derive(Clone, Debug)]
struct instructionVar154 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar154 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("orn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 240i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7054:1"]
#[derive(Clone, Debug)]
struct instructionVar155 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar155 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("q31tof"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 337i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7347:1"]
#[derive(Clone, Debug)]
struct instructionVar156 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar156 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 0i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7386:1"]
#[derive(Clone, Debug)]
struct instructionVar157 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar157 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 880i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7398:1"]
#[derive(Clone, Debug)]
struct instructionVar158 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar158 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 944i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7410:1"]
#[derive(Clone, Debug)]
struct instructionVar159 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar159 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 960i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7422:1"]
#[derive(Clone, Debug)]
struct instructionVar160 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar160 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1024i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7446:1"]
#[derive(Clone, Debug)]
struct instructionVar161 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar161 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 912i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7458:1"]
#[derive(Clone, Debug)]
struct instructionVar162 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar162 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 928i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7479:1"]
#[derive(Clone, Debug)]
struct instructionVar163 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar163 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 896i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7550:1"]
#[derive(Clone, Debug)]
struct instructionVar164 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar164 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sha"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 16i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7574:1"]
#[derive(Clone, Debug)]
struct instructionVar165 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar165 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sha.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1040i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7616:1"]
#[derive(Clone, Debug)]
struct instructionVar166 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar166 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("shas"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8109:1"]
#[derive(Clone, Debug)]
struct instructionVar167 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar167 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 128i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8124:1"]
#[derive(Clone, Debug)]
struct instructionVar168 {
    Ra2831: TokenField_Ra2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar168 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i64 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8130:1"]
#[derive(Clone, Debug)]
struct instructionVar169 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar169 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1152i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8151:1"]
#[derive(Clone, Debug)]
struct instructionVar170 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar170 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1664i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8160:1"]
#[derive(Clone, Debug)]
struct instructionVar171 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar171 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subc"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 208i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8177:1"]
#[derive(Clone, Debug)]
struct instructionVar172 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar172 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 160i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8185:1"]
#[derive(Clone, Debug)]
struct instructionVar173 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar173 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1696i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8195:1"]
#[derive(Clone, Debug)]
struct instructionVar174 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar174 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1712i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8205:1"]
#[derive(Clone, Debug)]
struct instructionVar175 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar175 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 176i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8213:1"]
#[derive(Clone, Debug)]
struct instructionVar176 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar176 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subx"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 192i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8402:1"]
#[derive(Clone, Debug)]
struct instructionVar177 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar177 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xnor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 208i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8430:1"]
#[derive(Clone, Debug)]
struct instructionVar178 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar178 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 192i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8442:1"]
#[derive(Clone, Debug)]
struct instructionVar179 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar179 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 752i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8454:1"]
#[derive(Clone, Debug)]
struct instructionVar180 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar180 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 816i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8466:1"]
#[derive(Clone, Debug)]
struct instructionVar181 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar181 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 832i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8478:1"]
#[derive(Clone, Debug)]
struct instructionVar182 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar182 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 784i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8490:1"]
#[derive(Clone, Debug)]
struct instructionVar183 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar183 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 800i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8502:1"]
#[derive(Clone, Debug)]
struct instructionVar184 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar184 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 768i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8522:1"]
#[derive(Clone, Debug)]
struct instructionVar185 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar185 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xpose.b"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2096i64 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8529:1"]
#[derive(Clone, Debug)]
struct instructionVar186 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar186 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xpose.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2080i64 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1256:1"]
#[derive(Clone, Debug)]
struct instructionVar187 {
    Ra2831: TokenField_Ra2831,
    Ra1215: TokenField_Ra1215,
    Rd0811: TokenField_Rd0811,
    const1617Z: Tableconst1617Z,
}
impl instructionVar187 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("addsc.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 384i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ra1215,
                Rd0811,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1470:1"]
#[derive(Clone, Debug)]
struct instructionVar188 {
    const1220Z: Tableconst1220Z,
}
impl instructionVar188 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bisr"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 173i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2131().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1220Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6430:1"]
#[derive(Clone, Debug)]
struct instructionVar189 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar189 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6443:1"]
#[derive(Clone, Debug)]
struct instructionVar190 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar190 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6456:1"]
#[derive(Clone, Debug)]
struct instructionVar191 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar191 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 26i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6469:1"]
#[derive(Clone, Debug)]
struct instructionVar192 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar192 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6482:1"]
#[derive(Clone, Debug)]
struct instructionVar193 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar193 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 0i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6491:1"]
#[derive(Clone, Debug)]
struct instructionVar194 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar194 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 1i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6500:1"]
#[derive(Clone, Debug)]
struct instructionVar195 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar195 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 2i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6509:1"]
#[derive(Clone, Debug)]
struct instructionVar196 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar196 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 4i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6520:1"]
#[derive(Clone, Debug)]
struct instructionVar197 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar197 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 5i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6531:1"]
#[derive(Clone, Debug)]
struct instructionVar198 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar198 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6540:1"]
#[derive(Clone, Debug)]
struct instructionVar199 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar199 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6549:1"]
#[derive(Clone, Debug)]
struct instructionVar200 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar200 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6576:1"]
#[derive(Clone, Debug)]
struct instructionVar201 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar201 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 28i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6589:1"]
#[derive(Clone, Debug)]
struct instructionVar202 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar202 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 29i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6602:1"]
#[derive(Clone, Debug)]
struct instructionVar203 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar203 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 30i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6615:1"]
#[derive(Clone, Debug)]
struct instructionVar204 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar204 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 31i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6628:1"]
#[derive(Clone, Debug)]
struct instructionVar205 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar205 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 12i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6643:1"]
#[derive(Clone, Debug)]
struct instructionVar206 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar206 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 13i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6658:1"]
#[derive(Clone, Debug)]
struct instructionVar207 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar207 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 14i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6673:1"]
#[derive(Clone, Debug)]
struct instructionVar208 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar208 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 15i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6688:1"]
#[derive(Clone, Debug)]
struct instructionVar209 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar209 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mulr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 6i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6700:1"]
#[derive(Clone, Debug)]
struct instructionVar210 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar210 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mulr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 7i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7355:1"]
#[derive(Clone, Debug)]
struct instructionVar211 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar211 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 0i64 {
                return None;
            }
            if token_parser.TokenFieldop2020().disassembly() != 1i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7362:1"]
#[derive(Clone, Debug)]
struct instructionVar212 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar212 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 0i64 {
                return None;
            }
            if token_parser.TokenFieldop2020().disassembly() != 0i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8295:1"]
#[derive(Clone, Debug)]
struct instructionVar213 {
    const1220Z: Tableconst1220Z,
}
impl instructionVar213 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("syscall"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c38 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 173i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2131().disassembly() != 4i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c38(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1220Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:958:1"]
#[derive(Clone, Debug)]
struct instructionVar214 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar214 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("absdif"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 14i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:997:1"]
#[derive(Clone, Debug)]
struct instructionVar215 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar215 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("absdifs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 15i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2000:1"]
#[derive(Clone, Debug)]
struct instructionVar216 {}
impl instructionVar216 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("debug")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 160i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2442:1"]
#[derive(Clone, Debug)]
struct instructionVar217 {}
impl instructionVar217 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("fret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 7i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6791:1"]
#[derive(Clone, Debug)]
struct instructionVar218 {}
impl instructionVar218 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nop")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7080:1"]
#[derive(Clone, Debug)]
struct instructionVar219 {}
impl instructionVar219 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("ret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 144i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7122:1"]
#[derive(Clone, Debug)]
struct instructionVar220 {}
impl instructionVar220 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("rfe")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 128i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:604:1"]
#[derive(Clone, Debug)]
struct instructionVar221 {}
impl instructionVar221 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nop")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0010().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2890:1"]
#[derive(Clone, Debug)]
struct instructionVar222 {
    Ra0811: TokenField_Ra0811,
}
impl instructionVar222 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("ji"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 220i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6806:1"]
#[derive(Clone, Debug)]
struct instructionVar223 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar223 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("not"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 70i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7212:1"]
#[derive(Clone, Debug)]
struct instructionVar224 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar224 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("rsub"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 5i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7244:1"]
#[derive(Clone, Debug)]
struct instructionVar225 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar225 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7262:1"]
#[derive(Clone, Debug)]
struct instructionVar226 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar226 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 1i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7276:1"]
#[derive(Clone, Debug)]
struct instructionVar227 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar227 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 2i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7294:1"]
#[derive(Clone, Debug)]
struct instructionVar228 {
    Rd0811: TokenField_Rd0811,
}
impl instructionVar228 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7333:1"]
#[derive(Clone, Debug)]
struct instructionVar229 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar229 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldop1515().disassembly() != 1i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7340:1"]
#[derive(Clone, Debug)]
struct instructionVar230 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar230 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldop1515().disassembly() != 0i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1034:1"]
#[derive(Clone, Debug)]
struct instructionVar231 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar231 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 18i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1043:1"]
#[derive(Clone, Debug)]
struct instructionVar232 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar232 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 146i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1051:1"]
#[derive(Clone, Debug)]
struct instructionVar233 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar233 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 26i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1058:1"]
#[derive(Clone, Debug)]
struct instructionVar234 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar234 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 66i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1065:1"]
#[derive(Clone, Debug)]
struct instructionVar235 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar235 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 154i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1072:1"]
#[derive(Clone, Debug)]
struct instructionVar236 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar236 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 194i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1086:1"]
#[derive(Clone, Debug)]
struct instructionVar237 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar237 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 0i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1094:1"]
#[derive(Clone, Debug)]
struct instructionVar238 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar238 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("add.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 48i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1102:1"]
#[derive(Clone, Debug)]
struct instructionVar239 {
    Ra0811: TokenField_Ra0811,
    const1215S: Tableconst1215S,
}
impl instructionVar239 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("add.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 176i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1130:1"]
#[derive(Clone, Debug)]
struct instructionVar240 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar240 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 33i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1158:1"]
#[derive(Clone, Debug)]
struct instructionVar241 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar241 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addc"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 5i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1203:1"]
#[derive(Clone, Debug)]
struct instructionVar242 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar242 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("adds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 2i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1239:1"]
#[derive(Clone, Debug)]
struct instructionVar243 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar243 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("adds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 3i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1280:1"]
#[derive(Clone, Debug)]
struct instructionVar244 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar244 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addx"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 4i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1311:1"]
#[derive(Clone, Debug)]
struct instructionVar245 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar245 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 8i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1339:1"]
#[derive(Clone, Debug)]
struct instructionVar246 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar246 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 32i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1351:1"]
#[derive(Clone, Debug)]
struct instructionVar247 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar247 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 36i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1363:1"]
#[derive(Clone, Debug)]
struct instructionVar248 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar248 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c53 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 37i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c53(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1375:1"]
#[derive(Clone, Debug)]
struct instructionVar249 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar249 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 34i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1387:1"]
#[derive(Clone, Debug)]
struct instructionVar250 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar250 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c53 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 35i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c53(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1399:1"]
#[derive(Clone, Debug)]
struct instructionVar251 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar251 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 33i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1435:1"]
#[derive(Clone, Debug)]
struct instructionVar252 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar252 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("andn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 14i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2083:1"]
#[derive(Clone, Debug)]
struct instructionVar253 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar253 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("dvadj"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 208i64 {
            return None;
        }
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2203:1"]
#[derive(Clone, Debug)]
struct instructionVar254 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar254 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("dvstep"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 240i64 {
            return None;
        }
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2232:1"]
#[derive(Clone, Debug)]
struct instructionVar255 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar255 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("dvstep.u"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 224i64 {
            return None;
        }
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2356:1"]
#[derive(Clone, Debug)]
struct instructionVar256 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
}
impl instructionVar256 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("extr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 64i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2380:1"]
#[derive(Clone, Debug)]
struct instructionVar257 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
}
impl instructionVar257 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("extr.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 96i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2680:1"]
#[derive(Clone, Debug)]
struct instructionVar258 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar258 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmax"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 160i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2705:1"]
#[derive(Clone, Debug)]
struct instructionVar259 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar259 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmax.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 176i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2730:1"]
#[derive(Clone, Debug)]
struct instructionVar260 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar260 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmin"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 128i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2755:1"]
#[derive(Clone, Debug)]
struct instructionVar261 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar261 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmin.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 144i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7001:1"]
#[derive(Clone, Debug)]
struct instructionVar262 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar262 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("pack"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8142:1"]
#[derive(Clone, Debug)]
struct instructionVar263 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
}
impl instructionVar263 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 49i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1687:1"]
#[derive(Clone, Debug)]
struct instructionVar264 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar264 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("cadd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1714:1"]
#[derive(Clone, Debug)]
struct instructionVar265 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar265 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("caddn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 16i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1982:1"]
#[derive(Clone, Debug)]
struct instructionVar266 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar266 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("csub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 32i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1991:1"]
#[derive(Clone, Debug)]
struct instructionVar267 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar267 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("csubn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 48i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2021:1"]
#[derive(Clone, Debug)]
struct instructionVar268 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    Rd2427: TokenField_Rd2427,
}
impl instructionVar268 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dextr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 128i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2278:1"]
#[derive(Clone, Debug)]
struct instructionVar269 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar269 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 16i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2324:1"]
#[derive(Clone, Debug)]
struct instructionVar270 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar270 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eqany.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 86i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2342:1"]
#[derive(Clone, Debug)]
struct instructionVar271 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar271 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eqany.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 118i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2372:1"]
#[derive(Clone, Debug)]
struct instructionVar272 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl instructionVar272 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("extr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2396:1"]
#[derive(Clone, Debug)]
struct instructionVar273 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl instructionVar273 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("extr.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2531:1"]
#[derive(Clone, Debug)]
struct instructionVar274 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar274 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 20i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2549:1"]
#[derive(Clone, Debug)]
struct instructionVar275 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar275 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 21i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2565:1"]
#[derive(Clone, Debug)]
struct instructionVar276 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd1215: TokenField_Rd1215,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl instructionVar276 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd1215,
                Rd2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2585:1"]
#[derive(Clone, Debug)]
struct instructionVar277 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd2427: TokenField_Rd2427,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
}
impl instructionVar277 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 215i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                Rd2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2602:1"]
#[derive(Clone, Debug)]
struct instructionVar278 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
}
impl instructionVar278 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2629:1"]
#[derive(Clone, Debug)]
struct instructionVar279 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    const1215Z: Tableconst1215Z,
}
impl instructionVar279 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 151i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i64 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3737:1"]
#[derive(Clone, Debug)]
struct instructionVar280 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar280 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 18i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3791:1"]
#[derive(Clone, Debug)]
struct instructionVar281 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar281 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 19i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3809:1"]
#[derive(Clone, Debug)]
struct instructionVar282 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar282 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 10i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3833:1"]
#[derive(Clone, Debug)]
struct instructionVar283 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar283 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 106i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3842:1"]
#[derive(Clone, Debug)]
struct instructionVar284 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar284 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 97i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4067:1"]
#[derive(Clone, Debug)]
struct instructionVar285 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar285 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 104i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4383:1"]
#[derive(Clone, Debug)]
struct instructionVar286 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar286 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 138i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4410:1"]
#[derive(Clone, Debug)]
struct instructionVar287 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar287 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 234i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4605:1"]
#[derive(Clone, Debug)]
struct instructionVar288 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar288 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 136i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4624:1"]
#[derive(Clone, Debug)]
struct instructionVar289 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar289 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 232i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5264:1"]
#[derive(Clone, Debug)]
struct instructionVar290 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar290 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 10i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5288:1"]
#[derive(Clone, Debug)]
struct instructionVar291 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar291 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 106i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5297:1"]
#[derive(Clone, Debug)]
struct instructionVar292 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar292 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 113i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5474:1"]
#[derive(Clone, Debug)]
struct instructionVar293 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar293 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 104i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6125:1"]
#[derive(Clone, Debug)]
struct instructionVar294 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar294 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 138i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6152:1"]
#[derive(Clone, Debug)]
struct instructionVar295 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar295 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 234i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6337:1"]
#[derive(Clone, Debug)]
struct instructionVar296 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar296 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 136i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6356:1"]
#[derive(Clone, Debug)]
struct instructionVar297 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar297 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 232i64 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7307:1"]
#[derive(Clone, Debug)]
struct instructionVar298 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar298 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("sel"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 64i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7319:1"]
#[derive(Clone, Debug)]
struct instructionVar299 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar299 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("seln"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 80i64 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3891:1"]
#[derive(Clone, Debug)]
struct instructionVar300 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar300 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3906:1"]
#[derive(Clone, Debug)]
struct instructionVar301 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar301 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3921:1"]
#[derive(Clone, Debug)]
struct instructionVar302 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar302 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3936:1"]
#[derive(Clone, Debug)]
struct instructionVar303 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar303 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3951:1"]
#[derive(Clone, Debug)]
struct instructionVar304 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar304 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 4i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3962:1"]
#[derive(Clone, Debug)]
struct instructionVar305 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar305 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 0i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3973:1"]
#[derive(Clone, Debug)]
struct instructionVar306 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar306 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 1i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3984:1"]
#[derive(Clone, Debug)]
struct instructionVar307 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar307 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 2i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3995:1"]
#[derive(Clone, Debug)]
struct instructionVar308 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar308 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 5i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4006:1"]
#[derive(Clone, Debug)]
struct instructionVar309 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar309 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4016:1"]
#[derive(Clone, Debug)]
struct instructionVar310 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar310 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4026:1"]
#[derive(Clone, Debug)]
struct instructionVar311 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar311 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4036:1"]
#[derive(Clone, Debug)]
struct instructionVar312 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar312 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4047:1"]
#[derive(Clone, Debug)]
struct instructionVar313 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar313 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4076:1"]
#[derive(Clone, Debug)]
struct instructionVar314 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar314 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4088:1"]
#[derive(Clone, Debug)]
struct instructionVar315 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar315 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4100:1"]
#[derive(Clone, Debug)]
struct instructionVar316 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar316 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4112:1"]
#[derive(Clone, Debug)]
struct instructionVar317 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar317 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4124:1"]
#[derive(Clone, Debug)]
struct instructionVar318 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar318 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4137:1"]
#[derive(Clone, Debug)]
struct instructionVar319 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar319 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4150:1"]
#[derive(Clone, Debug)]
struct instructionVar320 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar320 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4163:1"]
#[derive(Clone, Debug)]
struct instructionVar321 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar321 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4176:1"]
#[derive(Clone, Debug)]
struct instructionVar322 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar322 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 13usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4190:1"]
#[derive(Clone, Debug)]
struct instructionVar323 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar323 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4204:1"]
#[derive(Clone, Debug)]
struct instructionVar324 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar324 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4218:1"]
#[derive(Clone, Debug)]
struct instructionVar325 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar325 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4232:1"]
#[derive(Clone, Debug)]
struct instructionVar326 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar326 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4246:1"]
#[derive(Clone, Debug)]
struct instructionVar327 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar327 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("maddr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 6i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4258:1"]
#[derive(Clone, Debug)]
struct instructionVar328 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar328 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("maddr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 7i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4270:1"]
#[derive(Clone, Debug)]
struct instructionVar329 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar329 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 13usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4286:1"]
#[derive(Clone, Debug)]
struct instructionVar330 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar330 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4304:1"]
#[derive(Clone, Debug)]
struct instructionVar331 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar331 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4322:1"]
#[derive(Clone, Debug)]
struct instructionVar332 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar332 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4340:1"]
#[derive(Clone, Debug)]
struct instructionVar333 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar333 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4358:1"]
#[derive(Clone, Debug)]
struct instructionVar334 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar334 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("maddrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 38i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4371:1"]
#[derive(Clone, Debug)]
struct instructionVar335 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar335 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("maddrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 39i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4420:1"]
#[derive(Clone, Debug)]
struct instructionVar336 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar336 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4435:1"]
#[derive(Clone, Debug)]
struct instructionVar337 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar337 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4450:1"]
#[derive(Clone, Debug)]
struct instructionVar338 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar338 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4465:1"]
#[derive(Clone, Debug)]
struct instructionVar339 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar339 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4480:1"]
#[derive(Clone, Debug)]
struct instructionVar340 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar340 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 36i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4492:1"]
#[derive(Clone, Debug)]
struct instructionVar341 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar341 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 32i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4504:1"]
#[derive(Clone, Debug)]
struct instructionVar342 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar342 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 33i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4516:1"]
#[derive(Clone, Debug)]
struct instructionVar343 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar343 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 34i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4528:1"]
#[derive(Clone, Debug)]
struct instructionVar344 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar344 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 37i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4540:1"]
#[derive(Clone, Debug)]
struct instructionVar345 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar345 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4551:1"]
#[derive(Clone, Debug)]
struct instructionVar346 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar346 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4562:1"]
#[derive(Clone, Debug)]
struct instructionVar347 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar347 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4574:1"]
#[derive(Clone, Debug)]
struct instructionVar348 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar348 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4586:1"]
#[derive(Clone, Debug)]
struct instructionVar349 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar349 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4634:1"]
#[derive(Clone, Debug)]
struct instructionVar350 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar350 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4649:1"]
#[derive(Clone, Debug)]
struct instructionVar351 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar351 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4664:1"]
#[derive(Clone, Debug)]
struct instructionVar352 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar352 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4679:1"]
#[derive(Clone, Debug)]
struct instructionVar353 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar353 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4694:1"]
#[derive(Clone, Debug)]
struct instructionVar354 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar354 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4706:1"]
#[derive(Clone, Debug)]
struct instructionVar355 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar355 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4718:1"]
#[derive(Clone, Debug)]
struct instructionVar356 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar356 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4730:1"]
#[derive(Clone, Debug)]
struct instructionVar357 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar357 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4742:1"]
#[derive(Clone, Debug)]
struct instructionVar358 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar358 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4755:1"]
#[derive(Clone, Debug)]
struct instructionVar359 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar359 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4768:1"]
#[derive(Clone, Debug)]
struct instructionVar360 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar360 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4781:1"]
#[derive(Clone, Debug)]
struct instructionVar361 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar361 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4794:1"]
#[derive(Clone, Debug)]
struct instructionVar362 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar362 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4808:1"]
#[derive(Clone, Debug)]
struct instructionVar363 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar363 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4822:1"]
#[derive(Clone, Debug)]
struct instructionVar364 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar364 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4836:1"]
#[derive(Clone, Debug)]
struct instructionVar365 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar365 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4850:1"]
#[derive(Clone, Debug)]
struct instructionVar366 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar366 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4866:1"]
#[derive(Clone, Debug)]
struct instructionVar367 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar367 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4882:1"]
#[derive(Clone, Debug)]
struct instructionVar368 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar368 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4898:1"]
#[derive(Clone, Debug)]
struct instructionVar369 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar369 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4914:1"]
#[derive(Clone, Debug)]
struct instructionVar370 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar370 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4929:1"]
#[derive(Clone, Debug)]
struct instructionVar371 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar371 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4942:1"]
#[derive(Clone, Debug)]
struct instructionVar372 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar372 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4957:1"]
#[derive(Clone, Debug)]
struct instructionVar373 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar373 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4977:1"]
#[derive(Clone, Debug)]
struct instructionVar374 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar374 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("max"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 26i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5037:1"]
#[derive(Clone, Debug)]
struct instructionVar375 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar375 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("max.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 27i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5062:1"]
#[derive(Clone, Debug)]
struct instructionVar376 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar376 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("min"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 24i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5122:1"]
#[derive(Clone, Debug)]
struct instructionVar377 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar377 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("min.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 25i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5307:1"]
#[derive(Clone, Debug)]
struct instructionVar378 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar378 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5322:1"]
#[derive(Clone, Debug)]
struct instructionVar379 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar379 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5337:1"]
#[derive(Clone, Debug)]
struct instructionVar380 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar380 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5352:1"]
#[derive(Clone, Debug)]
struct instructionVar381 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar381 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5367:1"]
#[derive(Clone, Debug)]
struct instructionVar382 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar382 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 4i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5378:1"]
#[derive(Clone, Debug)]
struct instructionVar383 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar383 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 0i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5387:1"]
#[derive(Clone, Debug)]
struct instructionVar384 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar384 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 1i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5396:1"]
#[derive(Clone, Debug)]
struct instructionVar385 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar385 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 2i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5405:1"]
#[derive(Clone, Debug)]
struct instructionVar386 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar386 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 5i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5416:1"]
#[derive(Clone, Debug)]
struct instructionVar387 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar387 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5425:1"]
#[derive(Clone, Debug)]
struct instructionVar388 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar388 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5434:1"]
#[derive(Clone, Debug)]
struct instructionVar389 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar389 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5443:1"]
#[derive(Clone, Debug)]
struct instructionVar390 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar390 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5454:1"]
#[derive(Clone, Debug)]
struct instructionVar391 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar391 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5483:1"]
#[derive(Clone, Debug)]
struct instructionVar392 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar392 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5498:1"]
#[derive(Clone, Debug)]
struct instructionVar393 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar393 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5513:1"]
#[derive(Clone, Debug)]
struct instructionVar394 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar394 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5528:1"]
#[derive(Clone, Debug)]
struct instructionVar395 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar395 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5543:1"]
#[derive(Clone, Debug)]
struct instructionVar396 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar396 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5555:1"]
#[derive(Clone, Debug)]
struct instructionVar397 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar397 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5567:1"]
#[derive(Clone, Debug)]
struct instructionVar398 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar398 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5579:1"]
#[derive(Clone, Debug)]
struct instructionVar399 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar399 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5591:1"]
#[derive(Clone, Debug)]
struct instructionVar400 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar400 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5604:1"]
#[derive(Clone, Debug)]
struct instructionVar401 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar401 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5617:1"]
#[derive(Clone, Debug)]
struct instructionVar402 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar402 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5630:1"]
#[derive(Clone, Debug)]
struct instructionVar403 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar403 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5643:1"]
#[derive(Clone, Debug)]
struct instructionVar404 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar404 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5656:1"]
#[derive(Clone, Debug)]
struct instructionVar405 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar405 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5670:1"]
#[derive(Clone, Debug)]
struct instructionVar406 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar406 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5684:1"]
#[derive(Clone, Debug)]
struct instructionVar407 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar407 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5698:1"]
#[derive(Clone, Debug)]
struct instructionVar408 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar408 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5714:1"]
#[derive(Clone, Debug)]
struct instructionVar409 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar409 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5730:1"]
#[derive(Clone, Debug)]
struct instructionVar410 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar410 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5746:1"]
#[derive(Clone, Debug)]
struct instructionVar411 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar411 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5762:1"]
#[derive(Clone, Debug)]
struct instructionVar412 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar412 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5777:1"]
#[derive(Clone, Debug)]
struct instructionVar413 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar413 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5792:1"]
#[derive(Clone, Debug)]
struct instructionVar414 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar414 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5807:1"]
#[derive(Clone, Debug)]
struct instructionVar415 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar415 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5822:1"]
#[derive(Clone, Debug)]
struct instructionVar416 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar416 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5835:1"]
#[derive(Clone, Debug)]
struct instructionVar417 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar417 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5848:1"]
#[derive(Clone, Debug)]
struct instructionVar418 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar418 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5861:1"]
#[derive(Clone, Debug)]
struct instructionVar419 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar419 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5874:1"]
#[derive(Clone, Debug)]
struct instructionVar420 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar420 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5887:1"]
#[derive(Clone, Debug)]
struct instructionVar421 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar421 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5900:1"]
#[derive(Clone, Debug)]
struct instructionVar422 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar422 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5913:1"]
#[derive(Clone, Debug)]
struct instructionVar423 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar423 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5926:1"]
#[derive(Clone, Debug)]
struct instructionVar424 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar424 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 13usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5940:1"]
#[derive(Clone, Debug)]
struct instructionVar425 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar425 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5954:1"]
#[derive(Clone, Debug)]
struct instructionVar426 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar426 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5968:1"]
#[derive(Clone, Debug)]
struct instructionVar427 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar427 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5982:1"]
#[derive(Clone, Debug)]
struct instructionVar428 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar428 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5996:1"]
#[derive(Clone, Debug)]
struct instructionVar429 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar429 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 6i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6008:1"]
#[derive(Clone, Debug)]
struct instructionVar430 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar430 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 7i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6020:1"]
#[derive(Clone, Debug)]
struct instructionVar431 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar431 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 13usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6036:1"]
#[derive(Clone, Debug)]
struct instructionVar432 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar432 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6052:1"]
#[derive(Clone, Debug)]
struct instructionVar433 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar433 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6068:1"]
#[derive(Clone, Debug)]
struct instructionVar434 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar434 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6084:1"]
#[derive(Clone, Debug)]
struct instructionVar435 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar435 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6100:1"]
#[derive(Clone, Debug)]
struct instructionVar436 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar436 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 38i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6113:1"]
#[derive(Clone, Debug)]
struct instructionVar437 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar437 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 39i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6162:1"]
#[derive(Clone, Debug)]
struct instructionVar438 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar438 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6177:1"]
#[derive(Clone, Debug)]
struct instructionVar439 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar439 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6192:1"]
#[derive(Clone, Debug)]
struct instructionVar440 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar440 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6207:1"]
#[derive(Clone, Debug)]
struct instructionVar441 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar441 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 15usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6222:1"]
#[derive(Clone, Debug)]
struct instructionVar442 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar442 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 36i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6234:1"]
#[derive(Clone, Debug)]
struct instructionVar443 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar443 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 32i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6244:1"]
#[derive(Clone, Debug)]
struct instructionVar444 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar444 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 33i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6254:1"]
#[derive(Clone, Debug)]
struct instructionVar445 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar445 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 34i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6264:1"]
#[derive(Clone, Debug)]
struct instructionVar446 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar446 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 37i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6276:1"]
#[derive(Clone, Debug)]
struct instructionVar447 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar447 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6286:1"]
#[derive(Clone, Debug)]
struct instructionVar448 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar448 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6296:1"]
#[derive(Clone, Debug)]
struct instructionVar449 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar449 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6306:1"]
#[derive(Clone, Debug)]
struct instructionVar450 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar450 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6318:1"]
#[derive(Clone, Debug)]
struct instructionVar451 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl instructionVar451 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l"),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i64 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6385:1"]
#[derive(Clone, Debug)]
struct instructionVar452 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar452 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 1i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6402:1"]
#[derive(Clone, Debug)]
struct instructionVar453 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar453 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 3i64 {
                return None;
            }
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6558:1"]
#[derive(Clone, Debug)]
struct instructionVar454 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar454 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mul.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 2i64 {
                return None;
            }
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6711:1"]
#[derive(Clone, Debug)]
struct instructionVar455 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar455 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("muls"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 5i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6729:1"]
#[derive(Clone, Debug)]
struct instructionVar456 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar456 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("muls.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 4i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6753:1"]
#[derive(Clone, Debug)]
struct instructionVar457 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar457 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nand"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 9i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6773:1"]
#[derive(Clone, Debug)]
struct instructionVar458 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar458 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 17i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6819:1"]
#[derive(Clone, Debug)]
struct instructionVar459 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar459 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 11i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6855:1"]
#[derive(Clone, Debug)]
struct instructionVar460 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar460 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 10i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6887:1"]
#[derive(Clone, Debug)]
struct instructionVar461 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar461 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 39i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6899:1"]
#[derive(Clone, Debug)]
struct instructionVar462 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar462 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 43i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6911:1"]
#[derive(Clone, Debug)]
struct instructionVar463 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar463 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 44i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6923:1"]
#[derive(Clone, Debug)]
struct instructionVar464 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar464 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 41i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6935:1"]
#[derive(Clone, Debug)]
struct instructionVar465 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar465 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 42i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6947:1"]
#[derive(Clone, Debug)]
struct instructionVar466 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar466 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 40i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6987:1"]
#[derive(Clone, Debug)]
struct instructionVar467 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar467 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("orn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 15i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7220:1"]
#[derive(Clone, Debug)]
struct instructionVar468 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar468 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("rsub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 8i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7227:1"]
#[derive(Clone, Debug)]
struct instructionVar469 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar469 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("rsubs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 10i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7235:1"]
#[derive(Clone, Debug)]
struct instructionVar470 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar470 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("rsubs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 11i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7392:1"]
#[derive(Clone, Debug)]
struct instructionVar471 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar471 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 55i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7404:1"]
#[derive(Clone, Debug)]
struct instructionVar472 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar472 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 59i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7416:1"]
#[derive(Clone, Debug)]
struct instructionVar473 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar473 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 60i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7434:1"]
#[derive(Clone, Debug)]
struct instructionVar474 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar474 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 64i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7452:1"]
#[derive(Clone, Debug)]
struct instructionVar475 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar475 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 57i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7464:1"]
#[derive(Clone, Debug)]
struct instructionVar476 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar476 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 58i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7485:1"]
#[derive(Clone, Debug)]
struct instructionVar477 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar477 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 56i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7562:1"]
#[derive(Clone, Debug)]
struct instructionVar478 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar478 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sha"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 1i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7595:1"]
#[derive(Clone, Debug)]
struct instructionVar479 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar479 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sha.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 65i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7628:1"]
#[derive(Clone, Debug)]
struct instructionVar480 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar480 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("shas"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 2i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8408:1"]
#[derive(Clone, Debug)]
struct instructionVar481 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar481 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xnor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 13i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8436:1"]
#[derive(Clone, Debug)]
struct instructionVar482 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar482 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 12i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8448:1"]
#[derive(Clone, Debug)]
struct instructionVar483 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar483 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 47i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8460:1"]
#[derive(Clone, Debug)]
struct instructionVar484 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar484 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 51i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8472:1"]
#[derive(Clone, Debug)]
struct instructionVar485 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar485 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c53 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 52i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c53(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8484:1"]
#[derive(Clone, Debug)]
struct instructionVar486 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar486 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 49i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8496:1"]
#[derive(Clone, Debug)]
struct instructionVar487 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar487 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c53 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 50i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c53(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8508:1"]
#[derive(Clone, Debug)]
struct instructionVar488 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar488 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 48i64 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1696:1"]
#[derive(Clone, Debug)]
struct instructionVar489 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar489 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("cadd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 0i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1723:1"]
#[derive(Clone, Debug)]
struct instructionVar490 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar490 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("caddn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 1i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2014:1"]
#[derive(Clone, Debug)]
struct instructionVar491 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const2327Z: Tableconst2327Z,
}
impl instructionVar491 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("dextr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 119i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1622().disassembly() != 0i64 {
            return None;
        }
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2364:1"]
#[derive(Clone, Debug)]
struct instructionVar492 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar492 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("extr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2388:1"]
#[derive(Clone, Debug)]
struct instructionVar493 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar493 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("extr.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2555:1"]
#[derive(Clone, Debug)]
struct instructionVar494 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar494 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2576:1"]
#[derive(Clone, Debug)]
struct instructionVar495 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar495 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 183i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                const2327Z,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2620:1"]
#[derive(Clone, Debug)]
struct instructionVar496 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl instructionVar496 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2647:1"]
#[derive(Clone, Debug)]
struct instructionVar497 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd2427: TokenField_Rd2427,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
}
impl instructionVar497 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 215i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3816:1"]
#[derive(Clone, Debug)]
struct instructionVar498 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar498 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 1i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3824:1"]
#[derive(Clone, Debug)]
struct instructionVar499 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar499 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 3i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4058:1"]
#[derive(Clone, Debug)]
struct instructionVar500 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar500 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madd.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 2i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4391:1"]
#[derive(Clone, Debug)]
struct instructionVar501 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar501 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 5i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4400:1"]
#[derive(Clone, Debug)]
struct instructionVar502 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar502 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 7i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4597:1"]
#[derive(Clone, Debug)]
struct instructionVar503 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar503 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c59 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 4i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c59(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:4614:1"]
#[derive(Clone, Debug)]
struct instructionVar504 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar504 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c59 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 6i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c59(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5271:1"]
#[derive(Clone, Debug)]
struct instructionVar505 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar505 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 1i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5279:1"]
#[derive(Clone, Debug)]
struct instructionVar506 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar506 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 3i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5465:1"]
#[derive(Clone, Debug)]
struct instructionVar507 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar507 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msub.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 2i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6133:1"]
#[derive(Clone, Debug)]
struct instructionVar508 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar508 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 5i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6142:1"]
#[derive(Clone, Debug)]
struct instructionVar509 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar509 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 7i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6329:1"]
#[derive(Clone, Debug)]
struct instructionVar510 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar510 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c59 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 4i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c59(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6346:1"]
#[derive(Clone, Debug)]
struct instructionVar511 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl instructionVar511 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c59 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 6i64 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c59(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7313:1"]
#[derive(Clone, Debug)]
struct instructionVar512 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar512 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("sel"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 4i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7325:1"]
#[derive(Clone, Debug)]
struct instructionVar513 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl instructionVar513 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("seln"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 5i64 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1317:1"]
#[derive(Clone, Debug)]
struct instructionVar514 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar514 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1325:1"]
#[derive(Clone, Debug)]
struct instructionVar515 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar515 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1405:1"]
#[derive(Clone, Debug)]
struct instructionVar516 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar516 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1413:1"]
#[derive(Clone, Debug)]
struct instructionVar517 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar517 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1421:1"]
#[derive(Clone, Debug)]
struct instructionVar518 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar518 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1441:1"]
#[derive(Clone, Debug)]
struct instructionVar519 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar519 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1592:1"]
#[derive(Clone, Debug)]
struct instructionVar520 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar520 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cachea.i"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 30i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1614:1"]
#[derive(Clone, Debug)]
struct instructionVar521 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar521 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cachea.w"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 28i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1636:1"]
#[derive(Clone, Debug)]
struct instructionVar522 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar522 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cachea.wi"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 29i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3624:1"]
#[derive(Clone, Debug)]
struct instructionVar523 {
    off10: Tableoff10,
    BO: TableBO,
}
impl instructionVar523 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c28 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 36i64 {
                return None;
            }
            let off10 = if let Some((len, table)) =
                Tableoff10::parse(tokens, &mut context_instance, inst_start)
            {
                block_1_len = block_1_len.max(len as u32);
                table
            } else {
                return None;
            };
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((off10), (), pattern_len))
        };
        let ((mut off10), (), sub_len) =
            sub_pattern_c28(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3660:1"]
#[derive(Clone, Debug)]
struct instructionVar524 {
    off10: Tableoff10,
    BO: TableBO,
}
impl instructionVar524 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lducx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c28 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 37i64 {
                return None;
            }
            let off10 = if let Some((len, table)) =
                Tableoff10::parse(tokens, &mut context_instance, inst_start)
            {
                block_1_len = block_1_len.max(len as u32);
                table
            } else {
                return None;
            };
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((off10), (), pattern_len))
        };
        let ((mut off10), (), sub_len) =
            sub_pattern_c28(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8063:1"]
#[derive(Clone, Debug)]
struct instructionVar525 {
    BO: TableBO,
}
impl instructionVar525 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c28 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 38i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c28(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8078:1"]
#[derive(Clone, Debug)]
struct instructionVar526 {
    BO: TableBO,
}
impl instructionVar526 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stucx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c28 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 39i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c28(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1926:1"]
#[derive(Clone, Debug)]
struct instructionVar527 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off10: Tableoff10,
}
impl instructionVar527 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmpswap.w"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i64 {
            return None;
        }
        let Ree0811 = token_parser.TokenFieldRee0811();
        let Reo0811 = token_parser.TokenFieldReo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 19i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ree0811,
                Reo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1955:1"]
#[derive(Clone, Debug)]
struct instructionVar528 {
    op2027: TokenField_op2027,
    op1617: TokenField_op1617,
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar528 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("cop"),
            DisplayElement::Literal(" "),
            self.op2027.display(),
            DisplayElement::Literal("["),
            self.op1617.display(),
            DisplayElement::Literal("],"),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1819().disassembly() != 0i64 {
            return None;
        }
        let op1617 = token_parser.TokenFieldop1617();
        let op2027 = token_parser.TokenFieldop2027();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                op1617,
                op2027,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1963:1"]
#[derive(Clone, Debug)]
struct instructionVar529 {
    op2023: TokenField_op2023,
    op1617: TokenField_op1617,
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar529 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 13usize] = [
            DisplayElement::Literal("cop"),
            DisplayElement::Literal(" "),
            self.op2023.display(),
            DisplayElement::Literal("["),
            self.op1617.display(),
            DisplayElement::Literal("],"),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1819().disassembly() != 0i64 {
            return None;
        }
        let op1617 = token_parser.TokenFieldop1617();
        let op2023 = token_parser.TokenFieldop2023();
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                op1617,
                op2023,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2595:1"]
#[derive(Clone, Debug)]
struct instructionVar530 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar530 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ins.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 103i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2611:1"]
#[derive(Clone, Debug)]
struct instructionVar531 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar531 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2638:1"]
#[derive(Clone, Debug)]
struct instructionVar532 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar532 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 183i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                const2327Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2656:1"]
#[derive(Clone, Debug)]
struct instructionVar533 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar533 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 103i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3712:1"]
#[derive(Clone, Debug)]
struct instructionVar534 {
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar534 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("loopu"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 253i64 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off1630pc15s }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3081:1"]
#[derive(Clone, Debug)]
struct instructionVar535 {
    Ra0811: TokenField_Ra0811,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar535 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 189i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3125:1"]
#[derive(Clone, Debug)]
struct instructionVar536 {
    Ra0811: TokenField_Ra0811,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar536 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 189i64 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3703:1"]
#[derive(Clone, Debug)]
struct instructionVar537 {
    Ra1215: TokenField_Ra1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar537 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("loop"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 253i64 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6365:1"]
#[derive(Clone, Debug)]
struct instructionVar538 {
    Rd0811: TokenField_Rd0811,
    const1227Z: Tableconst1227Z,
}
impl instructionVar538 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mtcr"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 205i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2831().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2831:1"]
#[derive(Clone, Debug)]
struct instructionVar539 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar539 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 95i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2837:1"]
#[derive(Clone, Debug)]
struct instructionVar540 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar540 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 223i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2843:1"]
#[derive(Clone, Debug)]
struct instructionVar541 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar541 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 125i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2849:1"]
#[derive(Clone, Debug)]
struct instructionVar542 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar542 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jge"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 127i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2855:1"]
#[derive(Clone, Debug)]
struct instructionVar543 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar543 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jge"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 255i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2861:1"]
#[derive(Clone, Debug)]
struct instructionVar544 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar544 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jge.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 127i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2867:1"]
#[derive(Clone, Debug)]
struct instructionVar545 {
    Rd0811: TokenField_Rd0811,
    const1215Z: Tableconst1215Z,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar545 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jge.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 255i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2943:1"]
#[derive(Clone, Debug)]
struct instructionVar546 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar546 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jlt"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 63i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2949:1"]
#[derive(Clone, Debug)]
struct instructionVar547 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar547 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jlt"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 191i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2955:1"]
#[derive(Clone, Debug)]
struct instructionVar548 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar548 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jlt.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 63i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2961:1"]
#[derive(Clone, Debug)]
struct instructionVar549 {
    Rd0811: TokenField_Rd0811,
    const1215Z: Tableconst1215Z,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar549 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jlt.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 191i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3007:1"]
#[derive(Clone, Debug)]
struct instructionVar550 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar550 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 95i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3013:1"]
#[derive(Clone, Debug)]
struct instructionVar551 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar551 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 223i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3019:1"]
#[derive(Clone, Debug)]
struct instructionVar552 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar552 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 125i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3025:1"]
#[derive(Clone, Debug)]
struct instructionVar553 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar553 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jned"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 31i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3033:1"]
#[derive(Clone, Debug)]
struct instructionVar554 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar554 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jned"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 159i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3041:1"]
#[derive(Clone, Debug)]
struct instructionVar555 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar555 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jnei"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 31i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3049:1"]
#[derive(Clone, Debug)]
struct instructionVar556 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar556 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnei"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 159i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3203:1"]
#[derive(Clone, Debug)]
struct instructionVar557 {
    Ra0811: TokenField_Ra0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar557 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 22i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ra0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3235:1"]
#[derive(Clone, Debug)]
struct instructionVar558 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar558 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 16i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3303:1"]
#[derive(Clone, Debug)]
struct instructionVar559 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar559 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 17i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3329:1"]
#[derive(Clone, Debug)]
struct instructionVar560 {
    Re0811: TokenField_Re0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar560 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.d"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 21i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3355:1"]
#[derive(Clone, Debug)]
struct instructionVar561 {
    Rpe0811: TokenField_Rpe0811,
    Rpo0811: TokenField_Rpo0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar561 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("ld.da"),
            DisplayElement::Literal(" "),
            self.Rpe0811.display(),
            DisplayElement::Literal("/"),
            self.Rpo0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Rpe0811 = token_parser.TokenFieldRpe0811();
        let Rpo0811 = token_parser.TokenFieldRpo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 23i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe0811,
                Rpo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3371:1"]
#[derive(Clone, Debug)]
struct instructionVar562 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar562 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 9i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 9i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3389:1"]
#[derive(Clone, Debug)]
struct instructionVar563 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar563 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 9i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 25i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3399:1"]
#[derive(Clone, Debug)]
struct instructionVar564 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar564 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let ReN0811 = token_parser.TokenFieldReN0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 25i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                ReN0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3410:1"]
#[derive(Clone, Debug)]
struct instructionVar565 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar565 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 9i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 41i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3474:1"]
#[derive(Clone, Debug)]
struct instructionVar566 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar566 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 18i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3499:1"]
#[derive(Clone, Debug)]
struct instructionVar567 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar567 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 19i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3538:1"]
#[derive(Clone, Debug)]
struct instructionVar568 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar568 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.q"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 24i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3607:1"]
#[derive(Clone, Debug)]
struct instructionVar569 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl instructionVar569 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 20i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3617:1"]
#[derive(Clone, Debug)]
struct instructionVar570 {
    off18: Tableoff18,
}
impl instructionVar570 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3652:1"]
#[derive(Clone, Debug)]
struct instructionVar571 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off10: Tableoff10,
}
impl instructionVar571 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ldmst"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i64 {
            return None;
        }
        let Ree0811 = token_parser.TokenFieldRee0811();
        let Reo0811 = token_parser.TokenFieldReo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 17i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ree0811,
                Reo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3668:1"]
#[derive(Clone, Debug)]
struct instructionVar572 {
    off18: Tableoff18,
}
impl instructionVar572 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lducx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3688:1"]
#[derive(Clone, Debug)]
struct instructionVar573 {
    Ra0811: TokenField_Ra0811,
    BO: TableBO,
}
impl instructionVar573 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("lea"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 40i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7689:1"]
#[derive(Clone, Debug)]
struct instructionVar574 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ra0811: TokenField_Ra0811,
    off10: Tableoff10,
}
impl instructionVar574 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 22i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ra0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7763:1"]
#[derive(Clone, Debug)]
struct instructionVar575 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl instructionVar575 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 16i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7789:1"]
#[derive(Clone, Debug)]
struct instructionVar576 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Re0811: TokenField_Re0811,
    off10: Tableoff10,
}
impl instructionVar576 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.d"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Re0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 21i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7815:1"]
#[derive(Clone, Debug)]
struct instructionVar577 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rp0811: TokenField_Rp0811,
    off10: Tableoff10,
}
impl instructionVar577 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.da"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rp0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Rp0811 = token_parser.TokenFieldRp0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 23i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rp0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7831:1"]
#[derive(Clone, Debug)]
struct instructionVar578 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar578 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 137i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 9i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7849:1"]
#[derive(Clone, Debug)]
struct instructionVar579 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar579 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 137i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 25i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7859:1"]
#[derive(Clone, Debug)]
struct instructionVar580 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    off10: Tableoff10,
}
impl instructionVar580 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let ReN0811 = token_parser.TokenFieldReN0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 25i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                ReN0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7870:1"]
#[derive(Clone, Debug)]
struct instructionVar581 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl instructionVar581 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 137i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 41i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7935:1"]
#[derive(Clone, Debug)]
struct instructionVar582 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl instructionVar582 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 18i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7966:1"]
#[derive(Clone, Debug)]
struct instructionVar583 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl instructionVar583 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.q"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 24i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8046:1"]
#[derive(Clone, Debug)]
struct instructionVar584 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl instructionVar584 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 20i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8056:1"]
#[derive(Clone, Debug)]
struct instructionVar585 {
    off18: Tableoff18,
}
impl instructionVar585 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8071:1"]
#[derive(Clone, Debug)]
struct instructionVar586 {
    off18: Tableoff18,
}
impl instructionVar586 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stucx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8261:1"]
#[derive(Clone, Debug)]
struct instructionVar587 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl instructionVar587 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("swap.w"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 16i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8285:1"]
#[derive(Clone, Debug)]
struct instructionVar588 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off10: Tableoff10,
}
impl instructionVar588 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("swapmsk.w"),
            DisplayElement::Literal(" ["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i64 {
            return None;
        }
        let Ree0811 = token_parser.TokenFieldRee0811();
        let Reo0811 = token_parser.TokenFieldReo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 18i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ree0811,
                Reo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3211:1"]
#[derive(Clone, Debug)]
struct instructionVar589 {
    Ra0811: TokenField_Ra0811,
    off18: Tableoff18,
}
impl instructionVar589 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3217:1"]
#[derive(Clone, Debug)]
struct instructionVar590 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar590 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3296:1"]
#[derive(Clone, Debug)]
struct instructionVar591 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar591 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c38 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c38(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3322:1"]
#[derive(Clone, Debug)]
struct instructionVar592 {
    Re0811: TokenField_Re0811,
    off18: Tableoff18,
}
impl instructionVar592 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.d"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Re0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3365:1"]
#[derive(Clone, Debug)]
struct instructionVar593 {
    Rp0811: TokenField_Rp0811,
    off18: Tableoff18,
}
impl instructionVar593 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.da"),
            DisplayElement::Literal(" "),
            self.Rp0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c38 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i64 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c38(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rp0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3482:1"]
#[derive(Clone, Debug)]
struct instructionVar594 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar594 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3507:1"]
#[derive(Clone, Debug)]
struct instructionVar595 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar595 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c38 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c38(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3520:1"]
#[derive(Clone, Debug)]
struct instructionVar596 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar596 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.q"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 69i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3590:1"]
#[derive(Clone, Debug)]
struct instructionVar597 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar597 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3644:1"]
#[derive(Clone, Debug)]
struct instructionVar598 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off18: Tableoff18,
}
impl instructionVar598 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldmst"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 229i64 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off18,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3675:1"]
#[derive(Clone, Debug)]
struct instructionVar599 {
    Ra0811: TokenField_Ra0811,
    off18: Tableoff18,
}
impl instructionVar599 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("lea"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 197i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5043:1"]
#[derive(Clone, Debug)]
struct instructionVar600 {
    Rd2831: TokenField_Rd2831,
    const1227Z: Tableconst1227Z,
}
impl instructionVar600 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mfcr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 77i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5156:1"]
#[derive(Clone, Debug)]
struct instructionVar601 {
    Rd2831: TokenField_Rd2831,
    const1227S: Tableconst1227S,
}
impl instructionVar601 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 59i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) = Tableconst1227S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227S, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5169:1"]
#[derive(Clone, Debug)]
struct instructionVar602 {
    Re2831: TokenField_Re2831,
    const1227S: Tableconst1227S,
}
impl instructionVar602 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 251i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re2831), pattern_len))
        };
        let ((), (Re2831), sub_len) =
            sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) = Tableconst1227S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227S, Re2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5246:1"]
#[derive(Clone, Debug)]
struct instructionVar603 {
    Rd2831: TokenField_Rd2831,
    const1227Z: Tableconst1227Z,
}
impl instructionVar603 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 187i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5252:1"]
#[derive(Clone, Debug)]
struct instructionVar604 {
    Rd2831: TokenField_Rd2831,
    const1227Z: Tableconst1227Z,
}
impl instructionVar604 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("movh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 123i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5258:1"]
#[derive(Clone, Debug)]
struct instructionVar605 {
    Ra2831: TokenField_Ra2831,
    const1227Z: Tableconst1227Z,
}
impl instructionVar605 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("movh.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c44 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 145i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Ra2831 = token_parser.TokenFieldRa2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra2831), pattern_len))
        };
        let ((), (Ra2831), sub_len) =
            sub_pattern_c44(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Ra2831 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6759:1"]
#[derive(Clone, Debug)]
struct instructionVar606 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar606 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nand.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6825:1"]
#[derive(Clone, Debug)]
struct instructionVar607 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar607 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6861:1"]
#[derive(Clone, Debug)]
struct instructionVar608 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar608 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6871:1"]
#[derive(Clone, Debug)]
struct instructionVar609 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar609 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6953:1"]
#[derive(Clone, Debug)]
struct instructionVar610 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar610 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6963:1"]
#[derive(Clone, Debug)]
struct instructionVar611 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar611 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6973:1"]
#[derive(Clone, Debug)]
struct instructionVar612 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar612 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6993:1"]
#[derive(Clone, Debug)]
struct instructionVar613 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar613 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("orn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7368:1"]
#[derive(Clone, Debug)]
struct instructionVar614 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar614 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7377:1"]
#[derive(Clone, Debug)]
struct instructionVar615 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar615 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7470:1"]
#[derive(Clone, Debug)]
struct instructionVar616 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar616 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.nand.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7491:1"]
#[derive(Clone, Debug)]
struct instructionVar617 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar617 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7500:1"]
#[derive(Clone, Debug)]
struct instructionVar618 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar618 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7509:1"]
#[derive(Clone, Debug)]
struct instructionVar619 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar619 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.orn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7518:1"]
#[derive(Clone, Debug)]
struct instructionVar620 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar620 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.xnor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7527:1"]
#[derive(Clone, Debug)]
struct instructionVar621 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar621 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.xor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7697:1"]
#[derive(Clone, Debug)]
struct instructionVar622 {
    Ra0811: TokenField_Ra0811,
    off18: Tableoff18,
}
impl instructionVar622 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7738:1"]
#[derive(Clone, Debug)]
struct instructionVar623 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar623 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 37i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7782:1"]
#[derive(Clone, Debug)]
struct instructionVar624 {
    Re0811: TokenField_Re0811,
    off18: Tableoff18,
}
impl instructionVar624 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.d"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Re0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Re0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7825:1"]
#[derive(Clone, Debug)]
struct instructionVar625 {
    Rp0811: TokenField_Rp0811,
    off18: Tableoff18,
}
impl instructionVar625 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.da"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rp0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c38 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i64 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c38(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rp0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7943:1"]
#[derive(Clone, Debug)]
struct instructionVar626 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar626 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 37i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7949:1"]
#[derive(Clone, Debug)]
struct instructionVar627 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar627 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.q"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 101i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7974:1"]
#[derive(Clone, Debug)]
struct instructionVar628 {
    const0810Z: Tableconst0810Z,
    const1111Z: Tableconst1111Z,
    off18: Tableoff18,
}
impl instructionVar628 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.t"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const0810Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1111Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 213i64 {
                return None;
            }
            let const0810Z = if let Some((len, table)) = Tableconst0810Z::parse(
                tokens,
                &mut context_instance,
                inst_start,
            ) {
                block_0_len = block_0_len.max(len as u32);
                table
            } else {
                return None;
            };
            let const1111Z = if let Some((len, table)) = Tableconst1111Z::parse(
                tokens,
                &mut context_instance,
                inst_start,
            ) {
                block_0_len = block_0_len.max(len as u32);
                table
            } else {
                return None;
            };
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((const0810Z, const1111Z), (), pattern_len))
        };
        let ((mut const0810Z, mut const1111Z), (), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0810Z,
                const1111Z,
                off18,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8028:1"]
#[derive(Clone, Debug)]
struct instructionVar629 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar629 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8252:1"]
#[derive(Clone, Debug)]
struct instructionVar630 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl instructionVar630 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swap.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c39 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 229i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c39(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8414:1"]
#[derive(Clone, Debug)]
struct instructionVar631 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar631 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xnor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8514:1"]
#[derive(Clone, Debug)]
struct instructionVar632 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl instructionVar632 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i64 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1167:1"]
#[derive(Clone, Debug)]
struct instructionVar633 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1227S: Tableconst1227S,
}
impl instructionVar633 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addi"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 27i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) = Tableconst1227S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1174:1"]
#[derive(Clone, Debug)]
struct instructionVar634 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1227Z: Tableconst1227Z,
}
impl instructionVar634 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addih"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 155i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1181:1"]
#[derive(Clone, Debug)]
struct instructionVar635 {
    Ra2831: TokenField_Ra2831,
    Ra0811: TokenField_Ra0811,
    const1227Z: Tableconst1227Z,
}
impl instructionVar635 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addih.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 17i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Ra2831 = token_parser.TokenFieldRa2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811, Ra2831), pattern_len))
        };
        let ((), (Ra0811, Ra2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227Z,
                Ra0811,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1187:1"]
#[derive(Clone, Debug)]
struct instructionVar636 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar636 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("adds"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 34i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1290:1"]
#[derive(Clone, Debug)]
struct instructionVar637 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar637 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 38i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1298:1"]
#[derive(Clone, Debug)]
struct instructionVar638 {
    const0815Z: Tableconst0815Z,
}
impl instructionVar638 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 22i64 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1450:1"]
#[derive(Clone, Debug)]
struct instructionVar639 {
    const0815Z: Tableconst0815Z,
}
impl instructionVar639 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bisr"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 224i64 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1678:1"]
#[derive(Clone, Debug)]
struct instructionVar640 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar640 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("cadd"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 138i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1705:1"]
#[derive(Clone, Debug)]
struct instructionVar641 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar641 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("caddn"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 202i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1733:1"]
#[derive(Clone, Debug)]
struct instructionVar642 {
    off0815pc8s: Tableoff0815pc8s,
}
impl instructionVar642 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("call"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 92i64 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1760:1"]
#[derive(Clone, Debug)]
struct instructionVar643 {
    off24pc: Tableoff24pc,
}
impl instructionVar643 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("call"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 109i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1786:1"]
#[derive(Clone, Debug)]
struct instructionVar644 {
    off24abs: Tableoff24abs,
}
impl instructionVar644 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("calla"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 237i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1884:1"]
#[derive(Clone, Debug)]
struct instructionVar645 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar645 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 42i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1890:1"]
#[derive(Clone, Debug)]
struct instructionVar646 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar646 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("cmov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 170i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1896:1"]
#[derive(Clone, Debug)]
struct instructionVar647 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar647 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmovn"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 106i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1902:1"]
#[derive(Clone, Debug)]
struct instructionVar648 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar648 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("cmovn"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 234i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2260:1"]
#[derive(Clone, Debug)]
struct instructionVar649 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar649 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 58i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2266:1"]
#[derive(Clone, Debug)]
struct instructionVar650 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar650 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 186i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2405:1"]
#[derive(Clone, Debug)]
struct instructionVar651 {
    off24pc: Tableoff24pc,
}
impl instructionVar651 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("fcall"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 97i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2417:1"]
#[derive(Clone, Debug)]
struct instructionVar652 {
    off24abs: Tableoff24abs,
}
impl instructionVar652 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("fcalla"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 225i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2780:1"]
#[derive(Clone, Debug)]
struct instructionVar653 {
    off0815pc8s: Tableoff0815pc8s,
}
impl instructionVar653 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("j"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 60i64 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2787:1"]
#[derive(Clone, Debug)]
struct instructionVar654 {
    off24pc: Tableoff24pc,
}
impl instructionVar654 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("j"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c29 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 29i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c29(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2793:1"]
#[derive(Clone, Debug)]
struct instructionVar655 {
    off24abs: Tableoff24abs,
}
impl instructionVar655 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("ja"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 157i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2800:1"]
#[derive(Clone, Debug)]
struct instructionVar656 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl instructionVar656 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 190i64 {
            return None;
        }
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2808:1"]
#[derive(Clone, Debug)]
struct instructionVar657 {
    const1215S: Tableconst1215S,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl instructionVar657 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 158i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z16,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2816:1"]
#[derive(Clone, Debug)]
struct instructionVar658 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar658 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 62i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2824:1"]
#[derive(Clone, Debug)]
struct instructionVar659 {
    const1215S: Tableconst1215S,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar659 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 30i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2874:1"]
#[derive(Clone, Debug)]
struct instructionVar660 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar660 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jgez"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 206i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2882:1"]
#[derive(Clone, Debug)]
struct instructionVar661 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar661 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jgtz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 78i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2909:1"]
#[derive(Clone, Debug)]
struct instructionVar662 {
    off24pc: Tableoff24pc,
}
impl instructionVar662 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jl"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 93i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2917:1"]
#[derive(Clone, Debug)]
struct instructionVar663 {
    off24abs: Tableoff24abs,
}
impl instructionVar663 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jla"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 221i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2926:1"]
#[derive(Clone, Debug)]
struct instructionVar664 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar664 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jlez"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 142i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2968:1"]
#[derive(Clone, Debug)]
struct instructionVar665 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar665 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jltz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 14i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2976:1"]
#[derive(Clone, Debug)]
struct instructionVar666 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl instructionVar666 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 254i64 {
            return None;
        }
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2984:1"]
#[derive(Clone, Debug)]
struct instructionVar667 {
    const1215S: Tableconst1215S,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl instructionVar667 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 222i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z16,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:2992:1"]
#[derive(Clone, Debug)]
struct instructionVar668 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar668 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 126i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3000:1"]
#[derive(Clone, Debug)]
struct instructionVar669 {
    const1215S: Tableconst1215S,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar669 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 94i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3058:1"]
#[derive(Clone, Debug)]
struct instructionVar670 {
    off0815pc8s: Tableoff0815pc8s,
}
impl instructionVar670 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 238i64 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3066:1"]
#[derive(Clone, Debug)]
struct instructionVar671 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar671 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 246i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3074:1"]
#[derive(Clone, Debug)]
struct instructionVar672 {
    Ra1215: TokenField_Ra1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar672 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.a"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 124i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3088:1"]
#[derive(Clone, Debug)]
struct instructionVar673 {
    const1215Z: Tableconst1215Z,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar673 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.t"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 174i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3104:1"]
#[derive(Clone, Debug)]
struct instructionVar674 {
    off0815pc8s: Tableoff0815pc8s,
}
impl instructionVar674 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 110i64 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3112:1"]
#[derive(Clone, Debug)]
struct instructionVar675 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar675 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 118i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3119:1"]
#[derive(Clone, Debug)]
struct instructionVar676 {
    Ra1215: TokenField_Ra1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar676 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.a"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 188i64 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3132:1"]
#[derive(Clone, Debug)]
struct instructionVar677 {
    const1215Z: Tableconst1215Z,
    off0811pc4z: Tableoff0811pc4z,
}
impl instructionVar677 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.t"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 46i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3148:1"]
#[derive(Clone, Debug)]
struct instructionVar678 {
    SC: TableSC,
}
impl instructionVar678 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 216i64 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3157:1"]
#[derive(Clone, Debug)]
struct instructionVar679 {
    Ra0811: TokenField_Ra0811,
    SLRO: TableSLRO,
}
impl instructionVar679 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 200i64 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3166:1"]
#[derive(Clone, Debug)]
struct instructionVar680 {
    SRO: TableSRO,
}
impl instructionVar680 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 204i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3184:1"]
#[derive(Clone, Debug)]
struct instructionVar681 {
    Ra0811: TokenField_Ra0811,
    BOL: TableBOL,
}
impl instructionVar681 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 153i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3243:1"]
#[derive(Clone, Debug)]
struct instructionVar682 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar682 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 121i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3250:1"]
#[derive(Clone, Debug)]
struct instructionVar683 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar683 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 57i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3268:1"]
#[derive(Clone, Debug)]
struct instructionVar684 {
    SRO: TableSRO,
}
impl instructionVar684 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 12i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3277:1"]
#[derive(Clone, Debug)]
struct instructionVar685 {
    Rd0811: TokenField_Rd0811,
    SLRO: TableSLRO,
}
impl instructionVar685 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 8i64 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3439:1"]
#[derive(Clone, Debug)]
struct instructionVar686 {
    SRO: TableSRO,
}
impl instructionVar686 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 140i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3448:1"]
#[derive(Clone, Debug)]
struct instructionVar687 {
    Rd0811: TokenField_Rd0811,
    SLRO: TableSLRO,
}
impl instructionVar687 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 136i64 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3467:1"]
#[derive(Clone, Debug)]
struct instructionVar688 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar688 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 201i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3513:1"]
#[derive(Clone, Debug)]
struct instructionVar689 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar689 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 185i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3547:1"]
#[derive(Clone, Debug)]
struct instructionVar690 {
    SC: TableSC,
}
impl instructionVar690 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 88i64 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3566:1"]
#[derive(Clone, Debug)]
struct instructionVar691 {
    SRO: TableSRO,
}
impl instructionVar691 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 76i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3575:1"]
#[derive(Clone, Debug)]
struct instructionVar692 {
    Rd0811: TokenField_Rd0811,
    SLRO: TableSLRO,
}
impl instructionVar692 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 72i64 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3583:1"]
#[derive(Clone, Debug)]
struct instructionVar693 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar693 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 25i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3681:1"]
#[derive(Clone, Debug)]
struct instructionVar694 {
    Ra0811: TokenField_Ra0811,
    BOL: TableBOL,
}
impl instructionVar694 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("lea"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 217i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3695:1"]
#[derive(Clone, Debug)]
struct instructionVar695 {
    Ra1215: TokenField_Ra1215,
    off0811pc4o: Tableoff0811pc4o,
}
impl instructionVar695 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("loop"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4o.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 252i64 {
            return None;
        }
        let off0811pc4o = if let Some((len, table)) = Tableoff0811pc4o::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4o,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3719:1"]
#[derive(Clone, Debug)]
struct instructionVar696 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar696 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 122i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3725:1"]
#[derive(Clone, Debug)]
struct instructionVar697 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar697 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 250i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5128:1"]
#[derive(Clone, Debug)]
struct instructionVar698 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar698 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 2i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5134:1"]
#[derive(Clone, Debug)]
struct instructionVar699 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar699 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 130i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5141:1"]
#[derive(Clone, Debug)]
struct instructionVar700 {
    Re0811: TokenField_Re0811,
    const1215S: Tableconst1215S,
}
impl instructionVar700 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 210i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re0811 = token_parser.TokenFieldRe0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Re0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5149:1"]
#[derive(Clone, Debug)]
struct instructionVar701 {
    const0815Z: Tableconst0815Z,
}
impl instructionVar701 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 218i64 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5197:1"]
#[derive(Clone, Debug)]
struct instructionVar702 {
    Ra0811: TokenField_Ra0811,
    const1215Z: Tableconst1215Z,
}
impl instructionVar702 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 160i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5205:1"]
#[derive(Clone, Debug)]
struct instructionVar703 {
    Ra0811: TokenField_Ra0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar703 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 96i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5219:1"]
#[derive(Clone, Debug)]
struct instructionVar704 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar704 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.aa"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 64i64 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:5233:1"]
#[derive(Clone, Debug)]
struct instructionVar705 {
    Rd0811: TokenField_Rd0811,
    Ra1215: TokenField_Ra1215,
}
impl instructionVar705 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.d"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 128i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6378:1"]
#[derive(Clone, Debug)]
struct instructionVar706 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar706 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 226i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6834:1"]
#[derive(Clone, Debug)]
struct instructionVar707 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar707 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 166i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:6842:1"]
#[derive(Clone, Debug)]
struct instructionVar708 {
    const0815Z: Tableconst0815Z,
}
impl instructionVar708 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 150i64 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7537:1"]
#[derive(Clone, Debug)]
struct instructionVar709 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl instructionVar709 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sha"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 134i64 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7641:1"]
#[derive(Clone, Debug)]
struct instructionVar710 {
    SC: TableSC,
}
impl instructionVar710 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::a15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 248i64 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7650:1"]
#[derive(Clone, Debug)]
struct instructionVar711 {
    SRO: TableSRO,
}
impl instructionVar711 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::a15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 236i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7659:1"]
#[derive(Clone, Debug)]
struct instructionVar712 {
    Ra0811: TokenField_Ra0811,
    SSRO: TableSSRO,
}
impl instructionVar712 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 232i64 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7703:1"]
#[derive(Clone, Debug)]
struct instructionVar713 {
    Ra0811: TokenField_Ra0811,
    BOL: TableBOL,
}
impl instructionVar713 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 181i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7721:1"]
#[derive(Clone, Debug)]
struct instructionVar714 {
    Rd0811: TokenField_Rd0811,
    SSRO: TableSSRO,
}
impl instructionVar714 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 40i64 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7730:1"]
#[derive(Clone, Debug)]
struct instructionVar715 {
    SRO: TableSRO,
}
impl instructionVar715 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 44i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7744:1"]
#[derive(Clone, Debug)]
struct instructionVar716 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar716 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 233i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7899:1"]
#[derive(Clone, Debug)]
struct instructionVar717 {
    Rd0811: TokenField_Rd0811,
    SSRO: TableSSRO,
}
impl instructionVar717 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 168i64 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7908:1"]
#[derive(Clone, Debug)]
struct instructionVar718 {
    SRO: TableSRO,
}
impl instructionVar718 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 172i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7927:1"]
#[derive(Clone, Debug)]
struct instructionVar719 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar719 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 249i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7985:1"]
#[derive(Clone, Debug)]
struct instructionVar720 {
    SC: TableSC,
}
impl instructionVar720 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 120i64 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8004:1"]
#[derive(Clone, Debug)]
struct instructionVar721 {
    Rd0811: TokenField_Rd0811,
    SSRO: TableSSRO,
}
impl instructionVar721 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 104i64 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8013:1"]
#[derive(Clone, Debug)]
struct instructionVar722 {
    SRO: TableSRO,
}
impl instructionVar722 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 108i64 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8021:1"]
#[derive(Clone, Debug)]
struct instructionVar723 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl instructionVar723 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 89i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8087:1"]
#[derive(Clone, Debug)]
struct instructionVar724 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar724 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 82i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8095:1"]
#[derive(Clone, Debug)]
struct instructionVar725 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar725 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 90i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8102:1"]
#[derive(Clone, Debug)]
struct instructionVar726 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar726 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 162i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8117:1"]
#[derive(Clone, Debug)]
struct instructionVar727 {
    const0815Z: Tableconst0815Z,
}
impl instructionVar727 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sub.a"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a10),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 32i64 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8169:1"]
#[derive(Clone, Debug)]
struct instructionVar728 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar728 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("subs"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 98i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8423:1"]
#[derive(Clone, Debug)]
struct instructionVar729 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl instructionVar729 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 198i64 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:510:1"]
#[derive(Clone, Debug)]
struct instructionVar730 {
    R0608: TokenField_R0608,
    imm16: Tableimm16,
}
impl instructionVar730 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ldl.il"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0005().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let imm16 = if let Some((len, table)) =
            Tableimm16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm16, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:521:1"]
#[derive(Clone, Debug)]
struct instructionVar731 {
    R0608: TokenField_R0608,
    imm16: Tableimm16,
}
impl instructionVar731 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ldl.iu"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0005().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let imm16 = if let Some((len, table)) =
            Tableimm16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm16, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:421:1"]
#[derive(Clone, Debug)]
struct instructionVar732 {
    CONDCB: TableCONDCB,
    imm16abs: Tableimm16abs,
}
impl instructionVar732 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("jc.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm16abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0005().disassembly() != 0i64 {
            return None;
        }
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let imm16abs = if let Some((len, table)) = Tableimm16abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, imm16abs }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1248:1"]
#[derive(Clone, Debug)]
struct instructionVar733 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
    const0607Z: Tableconst0607Z,
}
impl instructionVar733 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("addsc.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0607Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0005().disassembly() != 16i64 {
            return None;
        }
        let const0607Z = if let Some((len, table)) = Tableconst0607Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0607Z,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1648:1"]
#[derive(Clone, Debug)]
struct instructionVar734 {
    BO: TableBO,
}
impl instructionVar734 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachei.i"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0407().disassembly() != 8i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 10i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1659:1"]
#[derive(Clone, Debug)]
struct instructionVar735 {
    BO: TableBO,
}
impl instructionVar735 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachei.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0407().disassembly() != 8i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 11i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1670:1"]
#[derive(Clone, Debug)]
struct instructionVar736 {
    BO: TableBO,
}
impl instructionVar736 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachei.wi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0407().disassembly() != 8i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 15i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1584:1"]
#[derive(Clone, Debug)]
struct instructionVar737 {
    BO: TableBO,
}
impl instructionVar737 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachea.i"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 14i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1606:1"]
#[derive(Clone, Debug)]
struct instructionVar738 {
    BO: TableBO,
}
impl instructionVar738 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachea.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 12i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1628:1"]
#[derive(Clone, Debug)]
struct instructionVar739 {
    BO: TableBO,
}
impl instructionVar739 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachea.wi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 13i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:1913:1"]
#[derive(Clone, Debug)]
struct instructionVar740 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    BO: TableBO,
}
impl instructionVar740 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cmpswap.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i64 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 3i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3096:1"]
#[derive(Clone, Debug)]
struct instructionVar741 {
    Rd0811: TokenField_Rd0811,
    Nbit: TableNbit,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar741 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.t"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Nbit.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0006().disassembly() != 111i64 {
            return None;
        }
        let Nbit = if let Some((len, table)) =
            TableNbit::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Nbit,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3140:1"]
#[derive(Clone, Debug)]
struct instructionVar742 {
    Rd0811: TokenField_Rd0811,
    Nbit: TableNbit,
    off1630pc15s: Tableoff1630pc15s,
}
impl instructionVar742 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.t"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Nbit.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0006().disassembly() != 111i64 {
            return None;
        }
        let Nbit = if let Some((len, table)) =
            TableNbit::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i64 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Nbit,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3176:1"]
#[derive(Clone, Debug)]
struct instructionVar743 {
    Ra0811: TokenField_Ra0811,
    SLR: TableSLR,
}
impl instructionVar743 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 3i64 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3195:1"]
#[derive(Clone, Debug)]
struct instructionVar744 {
    Ra0811: TokenField_Ra0811,
    BO: TableBO,
}
impl instructionVar744 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 6i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3227:1"]
#[derive(Clone, Debug)]
struct instructionVar745 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar745 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3259:1"]
#[derive(Clone, Debug)]
struct instructionVar746 {
    Rd0811: TokenField_Rd0811,
    SLR: TableSLR,
}
impl instructionVar746 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i64 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3289:1"]
#[derive(Clone, Debug)]
struct instructionVar747 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar747 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 1i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3315:1"]
#[derive(Clone, Debug)]
struct instructionVar748 {
    Re0811: TokenField_Re0811,
    BO: TableBO,
}
impl instructionVar748 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.d"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 5i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Re0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3347:1"]
#[derive(Clone, Debug)]
struct instructionVar749 {
    Rp0811: TokenField_Rp0811,
    BO: TableBO,
}
impl instructionVar749 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.da"),
            DisplayElement::Literal(" "),
            self.Rp0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 7i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rp0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3430:1"]
#[derive(Clone, Debug)]
struct instructionVar750 {
    Rd0811: TokenField_Rd0811,
    SLR: TableSLR,
}
impl instructionVar750 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i64 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3460:1"]
#[derive(Clone, Debug)]
struct instructionVar751 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar751 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3492:1"]
#[derive(Clone, Debug)]
struct instructionVar752 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar752 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 3i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3530:1"]
#[derive(Clone, Debug)]
struct instructionVar753 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar753 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.q"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 8i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3557:1"]
#[derive(Clone, Debug)]
struct instructionVar754 {
    Rd0811: TokenField_Rd0811,
    SLR: TableSLR,
}
impl instructionVar754 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 1i64 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3600:1"]
#[derive(Clone, Debug)]
struct instructionVar755 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar755 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 4i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:3636:1"]
#[derive(Clone, Debug)]
struct instructionVar756 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    BO: TableBO,
}
impl instructionVar756 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldmst"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c44 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i64 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 1i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c44(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7669:1"]
#[derive(Clone, Debug)]
struct instructionVar757 {
    Ra0811: TokenField_Ra0811,
    SSR: TableSSR,
}
impl instructionVar757 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 3i64 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7681:1"]
#[derive(Clone, Debug)]
struct instructionVar758 {
    Ra0811: TokenField_Ra0811,
    BO: TableBO,
}
impl instructionVar758 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 6i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7712:1"]
#[derive(Clone, Debug)]
struct instructionVar759 {
    Rd0811: TokenField_Rd0811,
    SSR: TableSSR,
}
impl instructionVar759 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i64 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7755:1"]
#[derive(Clone, Debug)]
struct instructionVar760 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar760 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7775:1"]
#[derive(Clone, Debug)]
struct instructionVar761 {
    Re0811: TokenField_Re0811,
    BO: TableBO,
}
impl instructionVar761 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.d"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Re0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 5i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Re0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7807:1"]
#[derive(Clone, Debug)]
struct instructionVar762 {
    Rp0811: TokenField_Rp0811,
    BO: TableBO,
}
impl instructionVar762 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.da"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rp0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 7i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rp0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7890:1"]
#[derive(Clone, Debug)]
struct instructionVar763 {
    Rd0811: TokenField_Rd0811,
    SSR: TableSSR,
}
impl instructionVar763 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i64 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7920:1"]
#[derive(Clone, Debug)]
struct instructionVar764 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar764 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7959:1"]
#[derive(Clone, Debug)]
struct instructionVar765 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar765 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.q"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 8i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:7995:1"]
#[derive(Clone, Debug)]
struct instructionVar766 {
    Rd0811: TokenField_Rd0811,
    SSR: TableSSR,
}
impl instructionVar766 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 1i64 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8038:1"]
#[derive(Clone, Debug)]
struct instructionVar767 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar767 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 4i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8243:1"]
#[derive(Clone, Debug)]
struct instructionVar768 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl instructionVar768 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swap.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i64 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 0i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:8276:1"]
#[derive(Clone, Debug)]
struct instructionVar769 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    BO: TableBO,
}
impl instructionVar769 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swapmsk.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i64 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 2i64 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:363:1"]
#[derive(Clone, Debug)]
struct instructionVar770 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl instructionVar770 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dinit"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("<"),
            DisplayElement::Register(Register::R0),
            DisplayElement::Literal(">"),
            DisplayElement::Literal(", "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:373:1"]
#[derive(Clone, Debug)]
struct instructionVar771 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl instructionVar771 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dstep"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("<"),
            DisplayElement::Register(Register::R0),
            DisplayElement::Literal(">"),
            DisplayElement::Literal(", "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:544:1"]
#[derive(Clone, Debug)]
struct instructionVar772 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl instructionVar772 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("minit"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("<"),
            DisplayElement::Register(Register::R0),
            DisplayElement::Literal(">"),
            DisplayElement::Literal(", "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:576:1"]
#[derive(Clone, Debug)]
struct instructionVar773 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl instructionVar773 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mstep.l"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:583:1"]
#[derive(Clone, Debug)]
struct instructionVar774 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl instructionVar774 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mstep.u"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:206:1"]
#[derive(Clone, Debug)]
struct instructionVar775 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl instructionVar775 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("add.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:245:1"]
#[derive(Clone, Debug)]
struct instructionVar776 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl instructionVar776 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("and.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:280:1"]
#[derive(Clone, Debug)]
struct instructionVar777 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl instructionVar777 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("clr"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:319:1"]
#[derive(Clone, Debug)]
struct instructionVar778 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl instructionVar778 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("comp.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:401:1"]
#[derive(Clone, Debug)]
struct instructionVar779 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl instructionVar779 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("inb.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 13i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:458:1"]
#[derive(Clone, Debug)]
struct instructionVar780 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl instructionVar780 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:635:1"]
#[derive(Clone, Debug)]
struct instructionVar781 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl instructionVar781 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("or.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:675:1"]
#[derive(Clone, Debug)]
struct instructionVar782 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl instructionVar782 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("rl"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:690:1"]
#[derive(Clone, Debug)]
struct instructionVar783 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl instructionVar783 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("rr"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 6i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:704:1"]
#[derive(Clone, Debug)]
struct instructionVar784 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl instructionVar784 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("set"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:721:1"]
#[derive(Clone, Debug)]
struct instructionVar785 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl instructionVar785 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("shl"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:732:1"]
#[derive(Clone, Debug)]
struct instructionVar786 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl instructionVar786 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("shr"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:742:1"]
#[derive(Clone, Debug)]
struct instructionVar787 {
    SIZE1W: TableSIZE1W,
}
impl instructionVar787 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.f"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1W.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1W = if let Some((len, table)) = TableSIZE1W::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1W }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:786:1"]
#[derive(Clone, Debug)]
struct instructionVar788 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl instructionVar788 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sub.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:815:1"]
#[derive(Clone, Debug)]
struct instructionVar789 {
    SIZE1RW: TableSIZE1RW,
}
impl instructionVar789 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xch.f"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1RW.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 11i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1RW = if let Some((len, table)) = TableSIZE1RW::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1RW }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:846:1"]
#[derive(Clone, Debug)]
struct instructionVar790 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl instructionVar790 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("xor.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i64 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:196:1"]
#[derive(Clone, Debug)]
struct instructionVar791 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar791 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:216:1"]
#[derive(Clone, Debug)]
struct instructionVar792 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl instructionVar792 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("add.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i64 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:225:1"]
#[derive(Clone, Debug)]
struct instructionVar793 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar793 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("add.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:235:1"]
#[derive(Clone, Debug)]
struct instructionVar794 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar794 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:255:1"]
#[derive(Clone, Debug)]
struct instructionVar795 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar795 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("and.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:265:1"]
#[derive(Clone, Debug)]
struct instructionVar796 {
    DST: TableDST,
    SRC: TableSRC,
    CNC: TableCNC,
    CNT02: TableCNT02,
}
impl instructionVar796 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bcopy"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.DST.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SRC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CNC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CNT02.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0404().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i64 {
            return None;
        }
        let DST = if let Some((len, table)) =
            TableDST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SRC = if let Some((len, table)) =
            TableSRC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNC = if let Some((len, table)) =
            TableCNC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNT02 = if let Some((len, table)) =
            TableCNT02::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                DST,
                SRC,
                CNC,
                CNT02,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:272:1"]
#[derive(Clone, Debug)]
struct instructionVar797 {
    R0608: TokenField_R0608,
    SETCLR: TableSETCLR,
    imm5: Tableimm5,
}
impl instructionVar797 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("chkb"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SETCLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 14i64 {
            return None;
        }
        let SETCLR = if let Some((len, table)) = TableSETCLR::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                SETCLR,
                imm5,
                R0608,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:310:1"]
#[derive(Clone, Debug)]
struct instructionVar798 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar798 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("comp"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:328:1"]
#[derive(Clone, Debug)]
struct instructionVar799 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl instructionVar799 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("comp.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i64 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:336:1"]
#[derive(Clone, Debug)]
struct instructionVar800 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar800 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("comp.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:354:1"]
#[derive(Clone, Debug)]
struct instructionVar801 {
    DAC: TableDAC,
    RTA: TableRTA,
    EDA: TableEDA,
    SDB: TableSDB,
    CONDCB: TableCONDCB,
}
impl instructionVar801 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("debug"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.DAC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.RTA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.EDA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SDB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0405().disassembly() != 0i64 {
            return None;
        }
        let DAC = if let Some((len, table)) =
            TableDAC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let RTA = if let Some((len, table)) =
            TableRTA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let EDA = if let Some((len, table)) =
            TableEDA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SDB = if let Some((len, table)) =
            TableSDB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                DAC,
                RTA,
                EDA,
                SDB,
                CONDCB,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:392:1"]
#[derive(Clone, Debug)]
struct instructionVar802 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar802 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("inb"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 13i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:430:1"]
#[derive(Clone, Debug)]
struct instructionVar803 {
    R0305: TokenField_R0305,
    CONDCB: TableCONDCB,
}
impl instructionVar803 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jc.i"),
            DisplayElement::Literal(" ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i64 {
            return None;
        }
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:440:1"]
#[derive(Clone, Debug)]
struct instructionVar804 {
    R0305: TokenField_R0305,
    CONDCB: TableCONDCB,
}
impl instructionVar804 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jc.ia"),
            DisplayElement::Literal(" ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 5i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i64 {
            return None;
        }
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:468:1"]
#[derive(Clone, Debug)]
struct instructionVar805 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl instructionVar805 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 12i64 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:488:1"]
#[derive(Clone, Debug)]
struct instructionVar806 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar806 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.p"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:500:1"]
#[derive(Clone, Debug)]
struct instructionVar807 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar807 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:532:1"]
#[derive(Clone, Debug)]
struct instructionVar808 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar808 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mclr.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:553:1"]
#[derive(Clone, Debug)]
struct instructionVar809 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar809 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 12i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:564:1"]
#[derive(Clone, Debug)]
struct instructionVar810 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar810 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mset.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 6i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:590:1"]
#[derive(Clone, Debug)]
struct instructionVar811 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar811 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("neg"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 3i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:613:1"]
#[derive(Clone, Debug)]
struct instructionVar812 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar812 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("not"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:624:1"]
#[derive(Clone, Debug)]
struct instructionVar813 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar813 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:645:1"]
#[derive(Clone, Debug)]
struct instructionVar814 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar814 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("or.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:655:1"]
#[derive(Clone, Debug)]
struct instructionVar815 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar815 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("pri"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 14i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:758:1"]
#[derive(Clone, Debug)]
struct instructionVar816 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar816 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("st.p"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:768:1"]
#[derive(Clone, Debug)]
struct instructionVar817 {
    offset6W: Tableoffset6W,
}
impl instructionVar817 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.pi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6W.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i64 {
            return None;
        }
        let offset6W = if let Some((len, table)) = Tableoffset6W::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6W }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:776:1"]
#[derive(Clone, Debug)]
struct instructionVar818 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar818 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:797:1"]
#[derive(Clone, Debug)]
struct instructionVar819 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl instructionVar819 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sub.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i64 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:806:1"]
#[derive(Clone, Debug)]
struct instructionVar820 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar820 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sub.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:825:1"]
#[derive(Clone, Debug)]
struct instructionVar821 {
    offset6RW: Tableoffset6RW,
}
impl instructionVar821 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xch.pi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6RW.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 11i64 {
            return None;
        }
        let offset6RW = if let Some((len, table)) = Tableoffset6RW::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6RW }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:835:1"]
#[derive(Clone, Debug)]
struct instructionVar822 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl instructionVar822 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
            self.R0305.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i64 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:856:1"]
#[derive(Clone, Debug)]
struct instructionVar823 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl instructionVar823 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("xor.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(", "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i64 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:288:1"]
#[derive(Clone, Debug)]
struct instructionVar824 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
    SIZE5: TableSIZE5,
}
impl instructionVar824 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("clr.f"),
            DisplayElement::Literal(" ["),
            self.R0608.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SIZE5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 4i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, SIZE5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:385:1"]
#[derive(Clone, Debug)]
struct instructionVar825 {
    ST: TableST,
    EC: TableEC,
    INT: TableINT,
    EP: TableEP,
    CONDCAB: TableCONDCAB,
}
impl instructionVar825 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("exit"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.ST.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.EC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.INT.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.EP.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CONDCAB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0406().disassembly() != 0i64 {
            return None;
        }
        let ST = if let Some((len, table)) =
            TableST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let EC = if let Some((len, table)) =
            TableEC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let INT = if let Some((len, table)) =
            TableINT::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let EP = if let Some((len, table)) =
            TableEP::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CONDCAB = if let Some((len, table)) = TableCONDCAB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                ST,
                EC,
                INT,
                EP,
                CONDCAB,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:412:1"]
#[derive(Clone, Debug)]
struct instructionVar826 {
    imm6pc: Tableimm6pc,
    CONDCB: TableCONDCB,
}
impl instructionVar826 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jc"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.imm6pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 1i64 {
            return None;
        }
        let imm6pc = if let Some((len, table)) = Tableimm6pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6pc, CONDCB }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:450:1"]
#[derive(Clone, Debug)]
struct instructionVar827 {
    imm10pc: Tableimm10pc,
}
impl instructionVar827 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jl"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.imm10pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 0i64 {
            return None;
        }
        let imm10pc = if let Some((len, table)) = Tableimm10pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm10pc }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:478:1"]
#[derive(Clone, Debug)]
struct instructionVar828 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
    SIZE5: TableSIZE5,
}
impl instructionVar828 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.if"),
            DisplayElement::Literal(" ["),
            self.R0608.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SIZE5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 5i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, SIZE5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:712:1"]
#[derive(Clone, Debug)]
struct instructionVar829 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
    SIZE5: TableSIZE5,
}
impl instructionVar829 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("set.f"),
            DisplayElement::Literal(" ["),
            self.R0608.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SIZE5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 3i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, SIZE5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:750:1"]
#[derive(Clone, Debug)]
struct instructionVar830 {
    SIZE5W: TableSIZE5W,
}
impl instructionVar830 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.if"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE5W.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 6i64 {
            return None;
        }
        let SIZE5W = if let Some((len, table)) = TableSIZE5W::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE5W }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:345:1"]
#[derive(Clone, Debug)]
struct instructionVar831 {
    DST: TableDST,
    SRC: TableSRC,
    CNC: TableCNC,
    CNT03: TableCNT03,
    SIZE0: TableSIZE0,
}
impl instructionVar831 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("copy"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.DST.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SRC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CNC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.CNT03.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(", ")];
        display.extend_from_slice(&extend);
        self.SIZE0.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 1i64 {
            return None;
        }
        let DST = if let Some((len, table)) =
            TableDST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SRC = if let Some((len, table)) =
            TableSRC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNC = if let Some((len, table)) =
            TableCNC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNT03 = if let Some((len, table)) =
            TableCNT03::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE0 = if let Some((len, table)) =
            TableSIZE0::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                DST,
                SRC,
                CNC,
                CNT03,
                SIZE0,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableinstruction {
    Var0(instructionVar0),
    Var1(instructionVar1),
    Var2(instructionVar2),
    Var3(instructionVar3),
    Var4(instructionVar4),
    Var5(instructionVar5),
    Var6(instructionVar6),
    Var7(instructionVar7),
    Var8(instructionVar8),
    Var9(instructionVar9),
    Var10(instructionVar10),
    Var11(instructionVar11),
    Var12(instructionVar12),
    Var13(instructionVar13),
    Var14(instructionVar14),
    Var15(instructionVar15),
    Var16(instructionVar16),
    Var17(instructionVar17),
    Var18(instructionVar18),
    Var19(instructionVar19),
    Var20(instructionVar20),
    Var21(instructionVar21),
    Var22(instructionVar22),
    Var23(instructionVar23),
    Var24(instructionVar24),
    Var25(instructionVar25),
    Var26(instructionVar26),
    Var27(instructionVar27),
    Var28(instructionVar28),
    Var29(instructionVar29),
    Var30(instructionVar30),
    Var31(instructionVar31),
    Var32(instructionVar32),
    Var33(instructionVar33),
    Var34(instructionVar34),
    Var35(instructionVar35),
    Var36(instructionVar36),
    Var37(instructionVar37),
    Var38(instructionVar38),
    Var39(instructionVar39),
    Var40(instructionVar40),
    Var41(instructionVar41),
    Var42(instructionVar42),
    Var43(instructionVar43),
    Var44(instructionVar44),
    Var45(instructionVar45),
    Var46(instructionVar46),
    Var47(instructionVar47),
    Var48(instructionVar48),
    Var49(instructionVar49),
    Var50(instructionVar50),
    Var51(instructionVar51),
    Var52(instructionVar52),
    Var53(instructionVar53),
    Var54(instructionVar54),
    Var55(instructionVar55),
    Var56(instructionVar56),
    Var57(instructionVar57),
    Var58(instructionVar58),
    Var59(instructionVar59),
    Var60(instructionVar60),
    Var61(instructionVar61),
    Var62(instructionVar62),
    Var63(instructionVar63),
    Var64(instructionVar64),
    Var65(instructionVar65),
    Var66(instructionVar66),
    Var67(instructionVar67),
    Var68(instructionVar68),
    Var69(instructionVar69),
    Var70(instructionVar70),
    Var71(instructionVar71),
    Var72(instructionVar72),
    Var73(instructionVar73),
    Var74(instructionVar74),
    Var75(instructionVar75),
    Var76(instructionVar76),
    Var77(instructionVar77),
    Var78(instructionVar78),
    Var79(instructionVar79),
    Var80(instructionVar80),
    Var81(instructionVar81),
    Var82(instructionVar82),
    Var83(instructionVar83),
    Var84(instructionVar84),
    Var85(instructionVar85),
    Var86(instructionVar86),
    Var87(instructionVar87),
    Var88(instructionVar88),
    Var89(instructionVar89),
    Var90(instructionVar90),
    Var91(instructionVar91),
    Var92(instructionVar92),
    Var93(instructionVar93),
    Var94(instructionVar94),
    Var95(instructionVar95),
    Var96(instructionVar96),
    Var97(instructionVar97),
    Var98(instructionVar98),
    Var99(instructionVar99),
    Var100(instructionVar100),
    Var101(instructionVar101),
    Var102(instructionVar102),
    Var103(instructionVar103),
    Var104(instructionVar104),
    Var105(instructionVar105),
    Var106(instructionVar106),
    Var107(instructionVar107),
    Var108(instructionVar108),
    Var109(instructionVar109),
    Var110(instructionVar110),
    Var111(instructionVar111),
    Var112(instructionVar112),
    Var113(instructionVar113),
    Var114(instructionVar114),
    Var115(instructionVar115),
    Var116(instructionVar116),
    Var117(instructionVar117),
    Var118(instructionVar118),
    Var119(instructionVar119),
    Var120(instructionVar120),
    Var121(instructionVar121),
    Var122(instructionVar122),
    Var123(instructionVar123),
    Var124(instructionVar124),
    Var125(instructionVar125),
    Var126(instructionVar126),
    Var127(instructionVar127),
    Var128(instructionVar128),
    Var129(instructionVar129),
    Var130(instructionVar130),
    Var131(instructionVar131),
    Var132(instructionVar132),
    Var133(instructionVar133),
    Var134(instructionVar134),
    Var135(instructionVar135),
    Var136(instructionVar136),
    Var137(instructionVar137),
    Var138(instructionVar138),
    Var139(instructionVar139),
    Var140(instructionVar140),
    Var141(instructionVar141),
    Var142(instructionVar142),
    Var143(instructionVar143),
    Var144(instructionVar144),
    Var145(instructionVar145),
    Var146(instructionVar146),
    Var147(instructionVar147),
    Var148(instructionVar148),
    Var149(instructionVar149),
    Var150(instructionVar150),
    Var151(instructionVar151),
    Var152(instructionVar152),
    Var153(instructionVar153),
    Var154(instructionVar154),
    Var155(instructionVar155),
    Var156(instructionVar156),
    Var157(instructionVar157),
    Var158(instructionVar158),
    Var159(instructionVar159),
    Var160(instructionVar160),
    Var161(instructionVar161),
    Var162(instructionVar162),
    Var163(instructionVar163),
    Var164(instructionVar164),
    Var165(instructionVar165),
    Var166(instructionVar166),
    Var167(instructionVar167),
    Var168(instructionVar168),
    Var169(instructionVar169),
    Var170(instructionVar170),
    Var171(instructionVar171),
    Var172(instructionVar172),
    Var173(instructionVar173),
    Var174(instructionVar174),
    Var175(instructionVar175),
    Var176(instructionVar176),
    Var177(instructionVar177),
    Var178(instructionVar178),
    Var179(instructionVar179),
    Var180(instructionVar180),
    Var181(instructionVar181),
    Var182(instructionVar182),
    Var183(instructionVar183),
    Var184(instructionVar184),
    Var185(instructionVar185),
    Var186(instructionVar186),
    Var187(instructionVar187),
    Var188(instructionVar188),
    Var189(instructionVar189),
    Var190(instructionVar190),
    Var191(instructionVar191),
    Var192(instructionVar192),
    Var193(instructionVar193),
    Var194(instructionVar194),
    Var195(instructionVar195),
    Var196(instructionVar196),
    Var197(instructionVar197),
    Var198(instructionVar198),
    Var199(instructionVar199),
    Var200(instructionVar200),
    Var201(instructionVar201),
    Var202(instructionVar202),
    Var203(instructionVar203),
    Var204(instructionVar204),
    Var205(instructionVar205),
    Var206(instructionVar206),
    Var207(instructionVar207),
    Var208(instructionVar208),
    Var209(instructionVar209),
    Var210(instructionVar210),
    Var211(instructionVar211),
    Var212(instructionVar212),
    Var213(instructionVar213),
    Var214(instructionVar214),
    Var215(instructionVar215),
    Var216(instructionVar216),
    Var217(instructionVar217),
    Var218(instructionVar218),
    Var219(instructionVar219),
    Var220(instructionVar220),
    Var221(instructionVar221),
    Var222(instructionVar222),
    Var223(instructionVar223),
    Var224(instructionVar224),
    Var225(instructionVar225),
    Var226(instructionVar226),
    Var227(instructionVar227),
    Var228(instructionVar228),
    Var229(instructionVar229),
    Var230(instructionVar230),
    Var231(instructionVar231),
    Var232(instructionVar232),
    Var233(instructionVar233),
    Var234(instructionVar234),
    Var235(instructionVar235),
    Var236(instructionVar236),
    Var237(instructionVar237),
    Var238(instructionVar238),
    Var239(instructionVar239),
    Var240(instructionVar240),
    Var241(instructionVar241),
    Var242(instructionVar242),
    Var243(instructionVar243),
    Var244(instructionVar244),
    Var245(instructionVar245),
    Var246(instructionVar246),
    Var247(instructionVar247),
    Var248(instructionVar248),
    Var249(instructionVar249),
    Var250(instructionVar250),
    Var251(instructionVar251),
    Var252(instructionVar252),
    Var253(instructionVar253),
    Var254(instructionVar254),
    Var255(instructionVar255),
    Var256(instructionVar256),
    Var257(instructionVar257),
    Var258(instructionVar258),
    Var259(instructionVar259),
    Var260(instructionVar260),
    Var261(instructionVar261),
    Var262(instructionVar262),
    Var263(instructionVar263),
    Var264(instructionVar264),
    Var265(instructionVar265),
    Var266(instructionVar266),
    Var267(instructionVar267),
    Var268(instructionVar268),
    Var269(instructionVar269),
    Var270(instructionVar270),
    Var271(instructionVar271),
    Var272(instructionVar272),
    Var273(instructionVar273),
    Var274(instructionVar274),
    Var275(instructionVar275),
    Var276(instructionVar276),
    Var277(instructionVar277),
    Var278(instructionVar278),
    Var279(instructionVar279),
    Var280(instructionVar280),
    Var281(instructionVar281),
    Var282(instructionVar282),
    Var283(instructionVar283),
    Var284(instructionVar284),
    Var285(instructionVar285),
    Var286(instructionVar286),
    Var287(instructionVar287),
    Var288(instructionVar288),
    Var289(instructionVar289),
    Var290(instructionVar290),
    Var291(instructionVar291),
    Var292(instructionVar292),
    Var293(instructionVar293),
    Var294(instructionVar294),
    Var295(instructionVar295),
    Var296(instructionVar296),
    Var297(instructionVar297),
    Var298(instructionVar298),
    Var299(instructionVar299),
    Var300(instructionVar300),
    Var301(instructionVar301),
    Var302(instructionVar302),
    Var303(instructionVar303),
    Var304(instructionVar304),
    Var305(instructionVar305),
    Var306(instructionVar306),
    Var307(instructionVar307),
    Var308(instructionVar308),
    Var309(instructionVar309),
    Var310(instructionVar310),
    Var311(instructionVar311),
    Var312(instructionVar312),
    Var313(instructionVar313),
    Var314(instructionVar314),
    Var315(instructionVar315),
    Var316(instructionVar316),
    Var317(instructionVar317),
    Var318(instructionVar318),
    Var319(instructionVar319),
    Var320(instructionVar320),
    Var321(instructionVar321),
    Var322(instructionVar322),
    Var323(instructionVar323),
    Var324(instructionVar324),
    Var325(instructionVar325),
    Var326(instructionVar326),
    Var327(instructionVar327),
    Var328(instructionVar328),
    Var329(instructionVar329),
    Var330(instructionVar330),
    Var331(instructionVar331),
    Var332(instructionVar332),
    Var333(instructionVar333),
    Var334(instructionVar334),
    Var335(instructionVar335),
    Var336(instructionVar336),
    Var337(instructionVar337),
    Var338(instructionVar338),
    Var339(instructionVar339),
    Var340(instructionVar340),
    Var341(instructionVar341),
    Var342(instructionVar342),
    Var343(instructionVar343),
    Var344(instructionVar344),
    Var345(instructionVar345),
    Var346(instructionVar346),
    Var347(instructionVar347),
    Var348(instructionVar348),
    Var349(instructionVar349),
    Var350(instructionVar350),
    Var351(instructionVar351),
    Var352(instructionVar352),
    Var353(instructionVar353),
    Var354(instructionVar354),
    Var355(instructionVar355),
    Var356(instructionVar356),
    Var357(instructionVar357),
    Var358(instructionVar358),
    Var359(instructionVar359),
    Var360(instructionVar360),
    Var361(instructionVar361),
    Var362(instructionVar362),
    Var363(instructionVar363),
    Var364(instructionVar364),
    Var365(instructionVar365),
    Var366(instructionVar366),
    Var367(instructionVar367),
    Var368(instructionVar368),
    Var369(instructionVar369),
    Var370(instructionVar370),
    Var371(instructionVar371),
    Var372(instructionVar372),
    Var373(instructionVar373),
    Var374(instructionVar374),
    Var375(instructionVar375),
    Var376(instructionVar376),
    Var377(instructionVar377),
    Var378(instructionVar378),
    Var379(instructionVar379),
    Var380(instructionVar380),
    Var381(instructionVar381),
    Var382(instructionVar382),
    Var383(instructionVar383),
    Var384(instructionVar384),
    Var385(instructionVar385),
    Var386(instructionVar386),
    Var387(instructionVar387),
    Var388(instructionVar388),
    Var389(instructionVar389),
    Var390(instructionVar390),
    Var391(instructionVar391),
    Var392(instructionVar392),
    Var393(instructionVar393),
    Var394(instructionVar394),
    Var395(instructionVar395),
    Var396(instructionVar396),
    Var397(instructionVar397),
    Var398(instructionVar398),
    Var399(instructionVar399),
    Var400(instructionVar400),
    Var401(instructionVar401),
    Var402(instructionVar402),
    Var403(instructionVar403),
    Var404(instructionVar404),
    Var405(instructionVar405),
    Var406(instructionVar406),
    Var407(instructionVar407),
    Var408(instructionVar408),
    Var409(instructionVar409),
    Var410(instructionVar410),
    Var411(instructionVar411),
    Var412(instructionVar412),
    Var413(instructionVar413),
    Var414(instructionVar414),
    Var415(instructionVar415),
    Var416(instructionVar416),
    Var417(instructionVar417),
    Var418(instructionVar418),
    Var419(instructionVar419),
    Var420(instructionVar420),
    Var421(instructionVar421),
    Var422(instructionVar422),
    Var423(instructionVar423),
    Var424(instructionVar424),
    Var425(instructionVar425),
    Var426(instructionVar426),
    Var427(instructionVar427),
    Var428(instructionVar428),
    Var429(instructionVar429),
    Var430(instructionVar430),
    Var431(instructionVar431),
    Var432(instructionVar432),
    Var433(instructionVar433),
    Var434(instructionVar434),
    Var435(instructionVar435),
    Var436(instructionVar436),
    Var437(instructionVar437),
    Var438(instructionVar438),
    Var439(instructionVar439),
    Var440(instructionVar440),
    Var441(instructionVar441),
    Var442(instructionVar442),
    Var443(instructionVar443),
    Var444(instructionVar444),
    Var445(instructionVar445),
    Var446(instructionVar446),
    Var447(instructionVar447),
    Var448(instructionVar448),
    Var449(instructionVar449),
    Var450(instructionVar450),
    Var451(instructionVar451),
    Var452(instructionVar452),
    Var453(instructionVar453),
    Var454(instructionVar454),
    Var455(instructionVar455),
    Var456(instructionVar456),
    Var457(instructionVar457),
    Var458(instructionVar458),
    Var459(instructionVar459),
    Var460(instructionVar460),
    Var461(instructionVar461),
    Var462(instructionVar462),
    Var463(instructionVar463),
    Var464(instructionVar464),
    Var465(instructionVar465),
    Var466(instructionVar466),
    Var467(instructionVar467),
    Var468(instructionVar468),
    Var469(instructionVar469),
    Var470(instructionVar470),
    Var471(instructionVar471),
    Var472(instructionVar472),
    Var473(instructionVar473),
    Var474(instructionVar474),
    Var475(instructionVar475),
    Var476(instructionVar476),
    Var477(instructionVar477),
    Var478(instructionVar478),
    Var479(instructionVar479),
    Var480(instructionVar480),
    Var481(instructionVar481),
    Var482(instructionVar482),
    Var483(instructionVar483),
    Var484(instructionVar484),
    Var485(instructionVar485),
    Var486(instructionVar486),
    Var487(instructionVar487),
    Var488(instructionVar488),
    Var489(instructionVar489),
    Var490(instructionVar490),
    Var491(instructionVar491),
    Var492(instructionVar492),
    Var493(instructionVar493),
    Var494(instructionVar494),
    Var495(instructionVar495),
    Var496(instructionVar496),
    Var497(instructionVar497),
    Var498(instructionVar498),
    Var499(instructionVar499),
    Var500(instructionVar500),
    Var501(instructionVar501),
    Var502(instructionVar502),
    Var503(instructionVar503),
    Var504(instructionVar504),
    Var505(instructionVar505),
    Var506(instructionVar506),
    Var507(instructionVar507),
    Var508(instructionVar508),
    Var509(instructionVar509),
    Var510(instructionVar510),
    Var511(instructionVar511),
    Var512(instructionVar512),
    Var513(instructionVar513),
    Var514(instructionVar514),
    Var515(instructionVar515),
    Var516(instructionVar516),
    Var517(instructionVar517),
    Var518(instructionVar518),
    Var519(instructionVar519),
    Var520(instructionVar520),
    Var521(instructionVar521),
    Var522(instructionVar522),
    Var523(instructionVar523),
    Var524(instructionVar524),
    Var525(instructionVar525),
    Var526(instructionVar526),
    Var527(instructionVar527),
    Var528(instructionVar528),
    Var529(instructionVar529),
    Var530(instructionVar530),
    Var531(instructionVar531),
    Var532(instructionVar532),
    Var533(instructionVar533),
    Var534(instructionVar534),
    Var535(instructionVar535),
    Var536(instructionVar536),
    Var537(instructionVar537),
    Var538(instructionVar538),
    Var539(instructionVar539),
    Var540(instructionVar540),
    Var541(instructionVar541),
    Var542(instructionVar542),
    Var543(instructionVar543),
    Var544(instructionVar544),
    Var545(instructionVar545),
    Var546(instructionVar546),
    Var547(instructionVar547),
    Var548(instructionVar548),
    Var549(instructionVar549),
    Var550(instructionVar550),
    Var551(instructionVar551),
    Var552(instructionVar552),
    Var553(instructionVar553),
    Var554(instructionVar554),
    Var555(instructionVar555),
    Var556(instructionVar556),
    Var557(instructionVar557),
    Var558(instructionVar558),
    Var559(instructionVar559),
    Var560(instructionVar560),
    Var561(instructionVar561),
    Var562(instructionVar562),
    Var563(instructionVar563),
    Var564(instructionVar564),
    Var565(instructionVar565),
    Var566(instructionVar566),
    Var567(instructionVar567),
    Var568(instructionVar568),
    Var569(instructionVar569),
    Var570(instructionVar570),
    Var571(instructionVar571),
    Var572(instructionVar572),
    Var573(instructionVar573),
    Var574(instructionVar574),
    Var575(instructionVar575),
    Var576(instructionVar576),
    Var577(instructionVar577),
    Var578(instructionVar578),
    Var579(instructionVar579),
    Var580(instructionVar580),
    Var581(instructionVar581),
    Var582(instructionVar582),
    Var583(instructionVar583),
    Var584(instructionVar584),
    Var585(instructionVar585),
    Var586(instructionVar586),
    Var587(instructionVar587),
    Var588(instructionVar588),
    Var589(instructionVar589),
    Var590(instructionVar590),
    Var591(instructionVar591),
    Var592(instructionVar592),
    Var593(instructionVar593),
    Var594(instructionVar594),
    Var595(instructionVar595),
    Var596(instructionVar596),
    Var597(instructionVar597),
    Var598(instructionVar598),
    Var599(instructionVar599),
    Var600(instructionVar600),
    Var601(instructionVar601),
    Var602(instructionVar602),
    Var603(instructionVar603),
    Var604(instructionVar604),
    Var605(instructionVar605),
    Var606(instructionVar606),
    Var607(instructionVar607),
    Var608(instructionVar608),
    Var609(instructionVar609),
    Var610(instructionVar610),
    Var611(instructionVar611),
    Var612(instructionVar612),
    Var613(instructionVar613),
    Var614(instructionVar614),
    Var615(instructionVar615),
    Var616(instructionVar616),
    Var617(instructionVar617),
    Var618(instructionVar618),
    Var619(instructionVar619),
    Var620(instructionVar620),
    Var621(instructionVar621),
    Var622(instructionVar622),
    Var623(instructionVar623),
    Var624(instructionVar624),
    Var625(instructionVar625),
    Var626(instructionVar626),
    Var627(instructionVar627),
    Var628(instructionVar628),
    Var629(instructionVar629),
    Var630(instructionVar630),
    Var631(instructionVar631),
    Var632(instructionVar632),
    Var633(instructionVar633),
    Var634(instructionVar634),
    Var635(instructionVar635),
    Var636(instructionVar636),
    Var637(instructionVar637),
    Var638(instructionVar638),
    Var639(instructionVar639),
    Var640(instructionVar640),
    Var641(instructionVar641),
    Var642(instructionVar642),
    Var643(instructionVar643),
    Var644(instructionVar644),
    Var645(instructionVar645),
    Var646(instructionVar646),
    Var647(instructionVar647),
    Var648(instructionVar648),
    Var649(instructionVar649),
    Var650(instructionVar650),
    Var651(instructionVar651),
    Var652(instructionVar652),
    Var653(instructionVar653),
    Var654(instructionVar654),
    Var655(instructionVar655),
    Var656(instructionVar656),
    Var657(instructionVar657),
    Var658(instructionVar658),
    Var659(instructionVar659),
    Var660(instructionVar660),
    Var661(instructionVar661),
    Var662(instructionVar662),
    Var663(instructionVar663),
    Var664(instructionVar664),
    Var665(instructionVar665),
    Var666(instructionVar666),
    Var667(instructionVar667),
    Var668(instructionVar668),
    Var669(instructionVar669),
    Var670(instructionVar670),
    Var671(instructionVar671),
    Var672(instructionVar672),
    Var673(instructionVar673),
    Var674(instructionVar674),
    Var675(instructionVar675),
    Var676(instructionVar676),
    Var677(instructionVar677),
    Var678(instructionVar678),
    Var679(instructionVar679),
    Var680(instructionVar680),
    Var681(instructionVar681),
    Var682(instructionVar682),
    Var683(instructionVar683),
    Var684(instructionVar684),
    Var685(instructionVar685),
    Var686(instructionVar686),
    Var687(instructionVar687),
    Var688(instructionVar688),
    Var689(instructionVar689),
    Var690(instructionVar690),
    Var691(instructionVar691),
    Var692(instructionVar692),
    Var693(instructionVar693),
    Var694(instructionVar694),
    Var695(instructionVar695),
    Var696(instructionVar696),
    Var697(instructionVar697),
    Var698(instructionVar698),
    Var699(instructionVar699),
    Var700(instructionVar700),
    Var701(instructionVar701),
    Var702(instructionVar702),
    Var703(instructionVar703),
    Var704(instructionVar704),
    Var705(instructionVar705),
    Var706(instructionVar706),
    Var707(instructionVar707),
    Var708(instructionVar708),
    Var709(instructionVar709),
    Var710(instructionVar710),
    Var711(instructionVar711),
    Var712(instructionVar712),
    Var713(instructionVar713),
    Var714(instructionVar714),
    Var715(instructionVar715),
    Var716(instructionVar716),
    Var717(instructionVar717),
    Var718(instructionVar718),
    Var719(instructionVar719),
    Var720(instructionVar720),
    Var721(instructionVar721),
    Var722(instructionVar722),
    Var723(instructionVar723),
    Var724(instructionVar724),
    Var725(instructionVar725),
    Var726(instructionVar726),
    Var727(instructionVar727),
    Var728(instructionVar728),
    Var729(instructionVar729),
    Var730(instructionVar730),
    Var731(instructionVar731),
    Var732(instructionVar732),
    Var733(instructionVar733),
    Var734(instructionVar734),
    Var735(instructionVar735),
    Var736(instructionVar736),
    Var737(instructionVar737),
    Var738(instructionVar738),
    Var739(instructionVar739),
    Var740(instructionVar740),
    Var741(instructionVar741),
    Var742(instructionVar742),
    Var743(instructionVar743),
    Var744(instructionVar744),
    Var745(instructionVar745),
    Var746(instructionVar746),
    Var747(instructionVar747),
    Var748(instructionVar748),
    Var749(instructionVar749),
    Var750(instructionVar750),
    Var751(instructionVar751),
    Var752(instructionVar752),
    Var753(instructionVar753),
    Var754(instructionVar754),
    Var755(instructionVar755),
    Var756(instructionVar756),
    Var757(instructionVar757),
    Var758(instructionVar758),
    Var759(instructionVar759),
    Var760(instructionVar760),
    Var761(instructionVar761),
    Var762(instructionVar762),
    Var763(instructionVar763),
    Var764(instructionVar764),
    Var765(instructionVar765),
    Var766(instructionVar766),
    Var767(instructionVar767),
    Var768(instructionVar768),
    Var769(instructionVar769),
    Var770(instructionVar770),
    Var771(instructionVar771),
    Var772(instructionVar772),
    Var773(instructionVar773),
    Var774(instructionVar774),
    Var775(instructionVar775),
    Var776(instructionVar776),
    Var777(instructionVar777),
    Var778(instructionVar778),
    Var779(instructionVar779),
    Var780(instructionVar780),
    Var781(instructionVar781),
    Var782(instructionVar782),
    Var783(instructionVar783),
    Var784(instructionVar784),
    Var785(instructionVar785),
    Var786(instructionVar786),
    Var787(instructionVar787),
    Var788(instructionVar788),
    Var789(instructionVar789),
    Var790(instructionVar790),
    Var791(instructionVar791),
    Var792(instructionVar792),
    Var793(instructionVar793),
    Var794(instructionVar794),
    Var795(instructionVar795),
    Var796(instructionVar796),
    Var797(instructionVar797),
    Var798(instructionVar798),
    Var799(instructionVar799),
    Var800(instructionVar800),
    Var801(instructionVar801),
    Var802(instructionVar802),
    Var803(instructionVar803),
    Var804(instructionVar804),
    Var805(instructionVar805),
    Var806(instructionVar806),
    Var807(instructionVar807),
    Var808(instructionVar808),
    Var809(instructionVar809),
    Var810(instructionVar810),
    Var811(instructionVar811),
    Var812(instructionVar812),
    Var813(instructionVar813),
    Var814(instructionVar814),
    Var815(instructionVar815),
    Var816(instructionVar816),
    Var817(instructionVar817),
    Var818(instructionVar818),
    Var819(instructionVar819),
    Var820(instructionVar820),
    Var821(instructionVar821),
    Var822(instructionVar822),
    Var823(instructionVar823),
    Var824(instructionVar824),
    Var825(instructionVar825),
    Var826(instructionVar826),
    Var827(instructionVar827),
    Var828(instructionVar828),
    Var829(instructionVar829),
    Var830(instructionVar830),
    Var831(instructionVar831),
}
impl Tableinstruction {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var14(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var15(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var16(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var17(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var18(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var19(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var20(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var21(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var22(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var23(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var24(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var25(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var26(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var27(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var28(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var29(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var30(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var31(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var32(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var33(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var34(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var35(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var36(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var37(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var38(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var39(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var40(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var41(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var42(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var43(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var44(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var45(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var46(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var47(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var48(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var49(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var50(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var51(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var52(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var53(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var54(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var55(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var56(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var57(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var58(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var59(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var60(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var61(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var62(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var63(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var64(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var65(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var66(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var67(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var68(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var69(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var70(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var71(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var72(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var73(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var74(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var75(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var76(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var77(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var78(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var79(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var80(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var81(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var82(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var83(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var84(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var85(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var86(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var87(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var88(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var89(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var90(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var91(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var92(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var93(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var94(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var95(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var96(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var97(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var98(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var99(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var100(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var101(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var102(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var103(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var104(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var105(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var106(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var107(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var108(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var109(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var110(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var111(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var112(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var113(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var114(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var115(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var116(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var117(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var118(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var119(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var120(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var121(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var122(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var123(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var124(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var125(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var126(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var127(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var128(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var129(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var130(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var131(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var132(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var133(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var134(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var135(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var136(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var137(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var138(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var139(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var140(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var141(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var142(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var143(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var144(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var145(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var146(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var147(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var148(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var149(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var150(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var151(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var152(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var153(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var154(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var155(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var156(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var157(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var158(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var159(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var160(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var161(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var162(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var163(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var164(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var165(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var166(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var167(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var168(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var169(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var170(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var171(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var172(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var173(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var174(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var175(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var176(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var177(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var178(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var179(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var180(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var181(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var182(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var183(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var184(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var185(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var186(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var187(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var188(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var189(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var190(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var191(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var192(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var193(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var194(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var195(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var196(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var197(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var198(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var199(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var200(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var201(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var202(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var203(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var204(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var205(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var206(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var207(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var208(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var209(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var210(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var211(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var212(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var213(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var214(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var215(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var216(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var217(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var218(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var219(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var220(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var221(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var222(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var223(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var224(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var225(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var226(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var227(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var228(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var229(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var230(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var231(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var232(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var233(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var234(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var235(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var236(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var237(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var238(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var239(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var240(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var241(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var242(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var243(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var244(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var245(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var246(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var247(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var248(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var249(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var250(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var251(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var252(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var253(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var254(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var255(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var256(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var257(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var258(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var259(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var260(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var261(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var262(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var263(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var264(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var265(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var266(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var267(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var268(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var269(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var270(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var271(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var272(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var273(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var274(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var275(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var276(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var277(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var278(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var279(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var280(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var281(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var282(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var283(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var284(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var285(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var286(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var287(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var288(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var289(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var290(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var291(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var292(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var293(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var294(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var295(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var296(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var297(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var298(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var299(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var300(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var301(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var302(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var303(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var304(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var305(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var306(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var307(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var308(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var309(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var310(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var311(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var312(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var313(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var314(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var315(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var316(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var317(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var318(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var319(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var320(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var321(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var322(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var323(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var324(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var325(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var326(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var327(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var328(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var329(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var330(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var331(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var332(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var333(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var334(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var335(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var336(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var337(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var338(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var339(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var340(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var341(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var342(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var343(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var344(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var345(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var346(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var347(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var348(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var349(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var350(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var351(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var352(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var353(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var354(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var355(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var356(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var357(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var358(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var359(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var360(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var361(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var362(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var363(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var364(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var365(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var366(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var367(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var368(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var369(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var370(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var371(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var372(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var373(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var374(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var375(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var376(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var377(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var378(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var379(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var380(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var381(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var382(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var383(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var384(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var385(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var386(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var387(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var388(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var389(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var390(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var391(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var392(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var393(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var394(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var395(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var396(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var397(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var398(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var399(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var400(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var401(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var402(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var403(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var404(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var405(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var406(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var407(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var408(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var409(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var410(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var411(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var412(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var413(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var414(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var415(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var416(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var417(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var418(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var419(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var420(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var421(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var422(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var423(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var424(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var425(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var426(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var427(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var428(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var429(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var430(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var431(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var432(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var433(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var434(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var435(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var436(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var437(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var438(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var439(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var440(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var441(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var442(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var443(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var444(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var445(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var446(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var447(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var448(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var449(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var450(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var451(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var452(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var453(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var454(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var455(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var456(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var457(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var458(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var459(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var460(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var461(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var462(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var463(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var464(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var465(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var466(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var467(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var468(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var469(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var470(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var471(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var472(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var473(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var474(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var475(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var476(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var477(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var478(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var479(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var480(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var481(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var482(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var483(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var484(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var485(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var486(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var487(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var488(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var489(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var490(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var491(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var492(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var493(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var494(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var495(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var496(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var497(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var498(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var499(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var500(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var501(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var502(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var503(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var504(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var505(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var506(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var507(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var508(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var509(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var510(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var511(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var512(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var513(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var514(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var515(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var516(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var517(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var518(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var519(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var520(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var521(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var522(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var523(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var524(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var525(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var526(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var527(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var528(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var529(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var530(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var531(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var532(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var533(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var534(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var535(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var536(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var537(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var538(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var539(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var540(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var541(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var542(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var543(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var544(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var545(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var546(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var547(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var548(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var549(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var550(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var551(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var552(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var553(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var554(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var555(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var556(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var557(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var558(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var559(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var560(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var561(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var562(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var563(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var564(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var565(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var566(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var567(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var568(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var569(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var570(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var571(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var572(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var573(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var574(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var575(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var576(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var577(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var578(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var579(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var580(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var581(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var582(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var583(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var584(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var585(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var586(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var587(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var588(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var589(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var590(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var591(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var592(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var593(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var594(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var595(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var596(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var597(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var598(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var599(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var600(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var601(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var602(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var603(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var604(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var605(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var606(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var607(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var608(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var609(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var610(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var611(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var612(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var613(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var614(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var615(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var616(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var617(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var618(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var619(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var620(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var621(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var622(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var623(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var624(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var625(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var626(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var627(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var628(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var629(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var630(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var631(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var632(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var633(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var634(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var635(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var636(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var637(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var638(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var639(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var640(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var641(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var642(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var643(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var644(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var645(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var646(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var647(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var648(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var649(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var650(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var651(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var652(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var653(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var654(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var655(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var656(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var657(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var658(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var659(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var660(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var661(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var662(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var663(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var664(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var665(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var666(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var667(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var668(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var669(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var670(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var671(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var672(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var673(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var674(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var675(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var676(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var677(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var678(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var679(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var680(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var681(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var682(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var683(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var684(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var685(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var686(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var687(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var688(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var689(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var690(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var691(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var692(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var693(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var694(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var695(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var696(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var697(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var698(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var699(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var700(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var701(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var702(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var703(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var704(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var705(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var706(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var707(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var708(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var709(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var710(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var711(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var712(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var713(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var714(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var715(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var716(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var717(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var718(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var719(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var720(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var721(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var722(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var723(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var724(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var725(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var726(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var727(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var728(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var729(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var730(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var731(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var732(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var733(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var734(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var735(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var736(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var737(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var738(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var739(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var740(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var741(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var742(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var743(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var744(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var745(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var746(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var747(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var748(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var749(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var750(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var751(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var752(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var753(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var754(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var755(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var756(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var757(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var758(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var759(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var760(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var761(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var762(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var763(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var764(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var765(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var766(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var767(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var768(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var769(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var770(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var771(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var772(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var773(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var774(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var775(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var776(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var777(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var778(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var779(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var780(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var781(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var782(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var783(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var784(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var785(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var786(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var787(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var788(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var789(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var790(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var791(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var792(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var793(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var794(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var795(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var796(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var797(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var798(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var799(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var800(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var801(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var802(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var803(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var804(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var805(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var806(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var807(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var808(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var809(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var810(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var811(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var812(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var813(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var814(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var815(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var816(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var817(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var818(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var819(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var820(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var821(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var822(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var823(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var824(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var825(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var826(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var827(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var828(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var829(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var830(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var831(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = instructionVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar1::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar2::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar3::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar4::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar5::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar6::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar7::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar8::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar9::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar10::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar11::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar12::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar13::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar14::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var14(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar15::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var15(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar16::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var16(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar17::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var17(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar18::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var18(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar19::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var19(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar20::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var20(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar21::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var21(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar22::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var22(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar23::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var23(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar24::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var24(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar25::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var25(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar26::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var26(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar27::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var27(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar28::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var28(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar29::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var29(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar30::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var30(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar31::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var31(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar32::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var32(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar33::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var33(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar34::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var34(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar35::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var35(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar36::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var36(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar37::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var37(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar38::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var38(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar39::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var39(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar40::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var40(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar41::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var41(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar42::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var42(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar43::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var43(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar44::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var44(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar45::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var45(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar46::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var46(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar47::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var47(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar48::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var48(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar49::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var49(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar50::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var50(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar51::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var51(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar52::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var52(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar53::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var53(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar54::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var54(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar55::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var55(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar56::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var56(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar57::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var57(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar58::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var58(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar59::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var59(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar60::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var60(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar61::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var61(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar62::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var62(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar63::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var63(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar64::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var64(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar65::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var65(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar66::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var66(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar67::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var67(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar68::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var68(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar69::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var69(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar70::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var70(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar71::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var71(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar72::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var72(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar73::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var73(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar74::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var74(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar75::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var75(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar76::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var76(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar77::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var77(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar78::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var78(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar79::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var79(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar80::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var80(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar81::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var81(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar82::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var82(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar83::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var83(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar84::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var84(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar85::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var85(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar86::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var86(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar87::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var87(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar88::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var88(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar89::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var89(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar90::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var90(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar91::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var91(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar92::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var92(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar93::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var93(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar94::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var94(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar95::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var95(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar96::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var96(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar97::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var97(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar98::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var98(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar99::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var99(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar100::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var100(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar101::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var101(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar102::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var102(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar103::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var103(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar104::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var104(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar105::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var105(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar106::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var106(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar107::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var107(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar108::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var108(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar109::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var109(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar110::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var110(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar111::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var111(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar112::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var112(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar113::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var113(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar114::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var114(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar115::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var115(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar116::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var116(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar117::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var117(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar118::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var118(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar119::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var119(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar120::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var120(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar121::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var121(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar122::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var122(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar123::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var123(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar124::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var124(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar125::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var125(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar126::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var126(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar127::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var127(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar128::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var128(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar129::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var129(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar130::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var130(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar131::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var131(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar132::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var132(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar133::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var133(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar134::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var134(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar135::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var135(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar136::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var136(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar137::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var137(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar138::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var138(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar139::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var139(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar140::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var140(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar141::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var141(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar142::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var142(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar143::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var143(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar144::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var144(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar145::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var145(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar146::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var146(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar147::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var147(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar148::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var148(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar149::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var149(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar150::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var150(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar151::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var151(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar152::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var152(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar153::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var153(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar154::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var154(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar155::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var155(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar156::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var156(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar157::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var157(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar158::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var158(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar159::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var159(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar160::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var160(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar161::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var161(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar162::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var162(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar163::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var163(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar164::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var164(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar165::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var165(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar166::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var166(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar167::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var167(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar168::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var168(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar169::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var169(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar170::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var170(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar171::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var171(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar172::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var172(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar173::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var173(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar174::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var174(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar175::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var175(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar176::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var176(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar177::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var177(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar178::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var178(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar179::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var179(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar180::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var180(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar181::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var181(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar182::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var182(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar183::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var183(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar184::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var184(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar185::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var185(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar186::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var186(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar187::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var187(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar188::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var188(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar189::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var189(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar190::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var190(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar191::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var191(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar192::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var192(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar193::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var193(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar194::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var194(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar195::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var195(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar196::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var196(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar197::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var197(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar198::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var198(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar199::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var199(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar200::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var200(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar201::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var201(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar202::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var202(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar203::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var203(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar204::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var204(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar205::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var205(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar206::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var206(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar207::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var207(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar208::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var208(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar209::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var209(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar210::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var210(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar211::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var211(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar212::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var212(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar213::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var213(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar214::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var214(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar215::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var215(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar216::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var216(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar217::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var217(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar218::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var218(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar219::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var219(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar220::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var220(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar221::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var221(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar222::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var222(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar223::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var223(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar224::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var224(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar225::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var225(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar226::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var226(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar227::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var227(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar228::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var228(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar229::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var229(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar230::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var230(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar231::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var231(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar232::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var232(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar233::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var233(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar234::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var234(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar235::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var235(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar236::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var236(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar237::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var237(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar238::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var238(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar239::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var239(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar240::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var240(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar241::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var241(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar242::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var242(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar243::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var243(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar244::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var244(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar245::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var245(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar246::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var246(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar247::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var247(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar248::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var248(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar249::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var249(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar250::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var250(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar251::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var251(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar252::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var252(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar253::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var253(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar254::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var254(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar255::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var255(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar256::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var256(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar257::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var257(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar258::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var258(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar259::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var259(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar260::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var260(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar261::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var261(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar262::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var262(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar263::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var263(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar264::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var264(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar265::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var265(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar266::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var266(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar267::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var267(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar268::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var268(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar269::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var269(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar270::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var270(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar271::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var271(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar272::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var272(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar273::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var273(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar274::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var274(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar275::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var275(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar276::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var276(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar277::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var277(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar278::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var278(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar279::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var279(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar280::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var280(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar281::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var281(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar282::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var282(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar283::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var283(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar284::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var284(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar285::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var285(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar286::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var286(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar287::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var287(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar288::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var288(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar289::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var289(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar290::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var290(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar291::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var291(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar292::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var292(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar293::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var293(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar294::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var294(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar295::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var295(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar296::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var296(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar297::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var297(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar298::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var298(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar299::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var299(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar300::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var300(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar301::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var301(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar302::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var302(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar303::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var303(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar304::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var304(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar305::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var305(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar306::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var306(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar307::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var307(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar308::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var308(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar309::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var309(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar310::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var310(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar311::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var311(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar312::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var312(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar313::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var313(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar314::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var314(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar315::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var315(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar316::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var316(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar317::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var317(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar318::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var318(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar319::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var319(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar320::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var320(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar321::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var321(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar322::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var322(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar323::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var323(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar324::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var324(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar325::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var325(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar326::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var326(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar327::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var327(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar328::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var328(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar329::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var329(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar330::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var330(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar331::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var331(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar332::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var332(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar333::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var333(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar334::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var334(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar335::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var335(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar336::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var336(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar337::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var337(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar338::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var338(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar339::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var339(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar340::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var340(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar341::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var341(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar342::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var342(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar343::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var343(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar344::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var344(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar345::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var345(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar346::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var346(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar347::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var347(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar348::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var348(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar349::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var349(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar350::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var350(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar351::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var351(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar352::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var352(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar353::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var353(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar354::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var354(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar355::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var355(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar356::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var356(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar357::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var357(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar358::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var358(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar359::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var359(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar360::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var360(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar361::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var361(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar362::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var362(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar363::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var363(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar364::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var364(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar365::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var365(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar366::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var366(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar367::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var367(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar368::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var368(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar369::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var369(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar370::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var370(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar371::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var371(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar372::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var372(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar373::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var373(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar374::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var374(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar375::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var375(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar376::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var376(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar377::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var377(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar378::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var378(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar379::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var379(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar380::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var380(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar381::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var381(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar382::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var382(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar383::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var383(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar384::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var384(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar385::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var385(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar386::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var386(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar387::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var387(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar388::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var388(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar389::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var389(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar390::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var390(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar391::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var391(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar392::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var392(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar393::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var393(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar394::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var394(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar395::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var395(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar396::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var396(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar397::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var397(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar398::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var398(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar399::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var399(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar400::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var400(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar401::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var401(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar402::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var402(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar403::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var403(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar404::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var404(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar405::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var405(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar406::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var406(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar407::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var407(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar408::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var408(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar409::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var409(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar410::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var410(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar411::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var411(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar412::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var412(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar413::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var413(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar414::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var414(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar415::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var415(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar416::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var416(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar417::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var417(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar418::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var418(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar419::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var419(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar420::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var420(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar421::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var421(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar422::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var422(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar423::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var423(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar424::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var424(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar425::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var425(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar426::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var426(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar427::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var427(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar428::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var428(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar429::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var429(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar430::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var430(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar431::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var431(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar432::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var432(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar433::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var433(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar434::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var434(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar435::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var435(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar436::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var436(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar437::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var437(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar438::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var438(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar439::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var439(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar440::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var440(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar441::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var441(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar442::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var442(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar443::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var443(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar444::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var444(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar445::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var445(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar446::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var446(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar447::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var447(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar448::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var448(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar449::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var449(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar450::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var450(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar451::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var451(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar452::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var452(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar453::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var453(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar454::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var454(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar455::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var455(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar456::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var456(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar457::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var457(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar458::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var458(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar459::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var459(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar460::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var460(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar461::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var461(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar462::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var462(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar463::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var463(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar464::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var464(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar465::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var465(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar466::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var466(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar467::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var467(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar468::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var468(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar469::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var469(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar470::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var470(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar471::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var471(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar472::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var472(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar473::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var473(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar474::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var474(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar475::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var475(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar476::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var476(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar477::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var477(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar478::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var478(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar479::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var479(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar480::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var480(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar481::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var481(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar482::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var482(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar483::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var483(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar484::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var484(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar485::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var485(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar486::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var486(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar487::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var487(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar488::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var488(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar489::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var489(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar490::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var490(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar491::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var491(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar492::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var492(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar493::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var493(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar494::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var494(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar495::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var495(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar496::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var496(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar497::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var497(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar498::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var498(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar499::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var499(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar500::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var500(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar501::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var501(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar502::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var502(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar503::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var503(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar504::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var504(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar505::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var505(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar506::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var506(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar507::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var507(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar508::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var508(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar509::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var509(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar510::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var510(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar511::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var511(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar512::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var512(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar513::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var513(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar514::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var514(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar515::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var515(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar516::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var516(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar517::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var517(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar518::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var518(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar519::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var519(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar520::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var520(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar521::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var521(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar522::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var522(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar523::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var523(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar524::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var524(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar525::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var525(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar526::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var526(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar527::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var527(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar528::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var528(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar529::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var529(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar530::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var530(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar531::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var531(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar532::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var532(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar533::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var533(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar534::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var534(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar535::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var535(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar536::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var536(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar537::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var537(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar538::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var538(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar539::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var539(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar540::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var540(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar541::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var541(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar542::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var542(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar543::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var543(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar544::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var544(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar545::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var545(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar546::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var546(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar547::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var547(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar548::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var548(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar549::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var549(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar550::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var550(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar551::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var551(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar552::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var552(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar553::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var553(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar554::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var554(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar555::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var555(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar556::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var556(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar557::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var557(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar558::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var558(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar559::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var559(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar560::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var560(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar561::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var561(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar562::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var562(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar563::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var563(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar564::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var564(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar565::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var565(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar566::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var566(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar567::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var567(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar568::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var568(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar569::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var569(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar570::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var570(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar571::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var571(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar572::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var572(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar573::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var573(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar574::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var574(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar575::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var575(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar576::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var576(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar577::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var577(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar578::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var578(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar579::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var579(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar580::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var580(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar581::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var581(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar582::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var582(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar583::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var583(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar584::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var584(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar585::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var585(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar586::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var586(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar587::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var587(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar588::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var588(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar589::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var589(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar590::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var590(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar591::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var591(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar592::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var592(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar593::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var593(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar594::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var594(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar595::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var595(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar596::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var596(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar597::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var597(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar598::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var598(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar599::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var599(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar600::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var600(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar601::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var601(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar602::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var602(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar603::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var603(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar604::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var604(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar605::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var605(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar606::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var606(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar607::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var607(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar608::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var608(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar609::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var609(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar610::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var610(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar611::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var611(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar612::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var612(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar613::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var613(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar614::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var614(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar615::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var615(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar616::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var616(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar617::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var617(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar618::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var618(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar619::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var619(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar620::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var620(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar621::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var621(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar622::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var622(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar623::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var623(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar624::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var624(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar625::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var625(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar626::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var626(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar627::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var627(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar628::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var628(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar629::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var629(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar630::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var630(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar631::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var631(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar632::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var632(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar633::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var633(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar634::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var634(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar635::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var635(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar636::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var636(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar637::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var637(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar638::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var638(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar639::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var639(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar640::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var640(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar641::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var641(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar642::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var642(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar643::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var643(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar644::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var644(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar645::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var645(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar646::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var646(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar647::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var647(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar648::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var648(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar649::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var649(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar650::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var650(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar651::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var651(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar652::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var652(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar653::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var653(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar654::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var654(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar655::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var655(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar656::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var656(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar657::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var657(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar658::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var658(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar659::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var659(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar660::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var660(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar661::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var661(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar662::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var662(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar663::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var663(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar664::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var664(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar665::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var665(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar666::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var666(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar667::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var667(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar668::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var668(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar669::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var669(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar670::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var670(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar671::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var671(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar672::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var672(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar673::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var673(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar674::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var674(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar675::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var675(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar676::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var676(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar677::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var677(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar678::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var678(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar679::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var679(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar680::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var680(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar681::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var681(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar682::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var682(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar683::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var683(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar684::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var684(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar685::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var685(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar686::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var686(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar687::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var687(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar688::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var688(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar689::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var689(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar690::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var690(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar691::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var691(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar692::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var692(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar693::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var693(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar694::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var694(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar695::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var695(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar696::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var696(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar697::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var697(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar698::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var698(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar699::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var699(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar700::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var700(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar701::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var701(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar702::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var702(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar703::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var703(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar704::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var704(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar705::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var705(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar706::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var706(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar707::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var707(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar708::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var708(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar709::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var709(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar710::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var710(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar711::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var711(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar712::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var712(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar713::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var713(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar714::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var714(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar715::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var715(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar716::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var716(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar717::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var717(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar718::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var718(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar719::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var719(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar720::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var720(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar721::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var721(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar722::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var722(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar723::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var723(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar724::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var724(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar725::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var725(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar726::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var726(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar727::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var727(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar728::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var728(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar729::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var729(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar730::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var730(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar731::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var731(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar732::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var732(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar733::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var733(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar734::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var734(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar735::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var735(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar736::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var736(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar737::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var737(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar738::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var738(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar739::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var739(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar740::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var740(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar741::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var741(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar742::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var742(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar743::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var743(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar744::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var744(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar745::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var745(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar746::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var746(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar747::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var747(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar748::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var748(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar749::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var749(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar750::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var750(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar751::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var751(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar752::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var752(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar753::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var753(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar754::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var754(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar755::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var755(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar756::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var756(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar757::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var757(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar758::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var758(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar759::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var759(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar760::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var760(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar761::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var761(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar762::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var762(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar763::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var763(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar764::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var764(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar765::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var765(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar766::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var766(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar767::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var767(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar768::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var768(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar769::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var769(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar770::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var770(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar771::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var771(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar772::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var772(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar773::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var773(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar774::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var774(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar775::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var775(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar776::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var776(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar777::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var777(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar778::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var778(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar779::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var779(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar780::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var780(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar781::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var781(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar782::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var782(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar783::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var783(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar784::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var784(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar785::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var785(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar786::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var786(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar787::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var787(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar788::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var788(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar789::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var789(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar790::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var790(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar791::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var791(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar792::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var792(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar793::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var793(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar794::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var794(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar795::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var795(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar796::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var796(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar797::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var797(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar798::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var798(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar799::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var799(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar800::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var800(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar801::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var801(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar802::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var802(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar803::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var803(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar804::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var804(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar805::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var805(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar806::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var806(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar807::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var807(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar808::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var808(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar809::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var809(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar810::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var810(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar811::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var811(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar812::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var812(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar813::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var813(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar814::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var814(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar815::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var815(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar816::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var816(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar817::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var817(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar818::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var818(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar819::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var819(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar820::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var820(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar821::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var821(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar822::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var822(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar823::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var823(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar824::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var824(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar825::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var825(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar826::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var826(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar827::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var827(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar828::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var828(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar829::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var829(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar830::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var830(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar831::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var831(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:794:1"]
#[derive(Clone, Debug)]
struct off10Var0 {
    op1621: TokenField_op1621,
    sop2831: TokenField_sop2831,
}
impl off10Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = (self.op1621.disassembly()
            | self
                .sop2831
                .disassembly()
                .checked_shl(u32::try_from(6i64).unwrap())
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = (token_parser.TokenFieldop1621().disassembly()
            | token_parser
                .TokenFieldsop2831()
                .disassembly()
                .checked_shl(u32::try_from(6i64).unwrap())
                .unwrap_or(0));
        let op1621 = token_parser.TokenFieldop1621();
        let sop2831 = token_parser.TokenFieldsop2831();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1621, sop2831 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff10 {
    Var0(off10Var0),
}
impl Tableoff10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off10Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:796:1"]
#[derive(Clone, Debug)]
struct off16Var0 {
    op1621: TokenField_op1621,
    op2831: TokenField_op2831,
    sop2227: TokenField_sop2227,
}
impl off16Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = ((self.op1621.disassembly()
            | self
                .op2831
                .disassembly()
                .checked_shl(u32::try_from(6i64).unwrap())
                .unwrap_or(0))
            | self
                .sop2227
                .disassembly()
                .checked_shl(u32::try_from(10i64).unwrap())
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = ((token_parser.TokenFieldop1621().disassembly()
            | token_parser
                .TokenFieldop2831()
                .disassembly()
                .checked_shl(u32::try_from(6i64).unwrap())
                .unwrap_or(0))
            | token_parser
                .TokenFieldsop2227()
                .disassembly()
                .checked_shl(u32::try_from(10i64).unwrap())
                .unwrap_or(0));
        let op1621 = token_parser.TokenFieldop1621();
        let sop2227 = token_parser.TokenFieldsop2227();
        let op2831 = token_parser.TokenFieldop2831();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op1621,
                sop2227,
                op2831,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff16 {
    Var0(off16Var0),
}
impl Tableoff16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off16Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:798:1"]
#[derive(Clone, Debug)]
struct off18Var0 {
    op1215: TokenField_op1215,
    op2225: TokenField_op2225,
    op2831: TokenField_op2831,
    op1621: TokenField_op1621,
}
impl off18Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = (((self
            .op1215
            .disassembly()
            .checked_shl(u32::try_from(28i64).unwrap())
            .unwrap_or(0)
            | self
                .op2225
                .disassembly()
                .checked_shl(u32::try_from(10i64).unwrap())
                .unwrap_or(0))
            | self
                .op2831
                .disassembly()
                .checked_shl(u32::try_from(6i64).unwrap())
                .unwrap_or(0))
            | self.op1621.disassembly());
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (((token_parser
            .TokenFieldop1215()
            .disassembly()
            .checked_shl(u32::try_from(28i64).unwrap())
            .unwrap_or(0)
            | token_parser
                .TokenFieldop2225()
                .disassembly()
                .checked_shl(u32::try_from(10i64).unwrap())
                .unwrap_or(0))
            | token_parser
                .TokenFieldop2831()
                .disassembly()
                .checked_shl(u32::try_from(6i64).unwrap())
                .unwrap_or(0))
            | token_parser.TokenFieldop1621().disassembly());
        let op1621 = token_parser.TokenFieldop1621();
        let op2225 = token_parser.TokenFieldop2225();
        let op2831 = token_parser.TokenFieldop2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op1215,
                op1621,
                op2225,
                op2831,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff18 {
    Var0(off18Var0),
}
impl Tableoff18 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off18Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:800:1"]
#[derive(Clone, Debug)]
struct off24pcVar0 {
    op1631: TokenField_op1631,
    sop0815: TokenField_sop0815,
}
impl off24pcVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            (self.op1631.disassembly()
                | self
                    .sop0815
                    .disassembly()
                    .checked_shl(u32::try_from(16i64).unwrap())
                    .unwrap_or(0))
            .wrapping_mul(2i64),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let sop0815 = token_parser.TokenFieldsop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            (token_parser.TokenFieldop1631().disassembly()
                | token_parser
                    .TokenFieldsop0815()
                    .disassembly()
                    .checked_shl(u32::try_from(16i64).unwrap())
                    .unwrap_or(0))
            .wrapping_mul(2i64),
        );
        let op1631 = token_parser.TokenFieldop1631();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop0815, op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff24pc {
    Var0(off24pcVar0),
}
impl Tableoff24pc {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off24pcVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:802:1"]
#[derive(Clone, Debug)]
struct off24absVar0 {
    op1631: TokenField_op1631,
    op0811: TokenField_op0811,
    op1215: TokenField_op1215,
}
impl off24absVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = ((self
            .op1631
            .disassembly()
            .checked_shl(u32::try_from(1i64).unwrap())
            .unwrap_or(0)
            | self
                .op0811
                .disassembly()
                .checked_shl(u32::try_from(17i64).unwrap())
                .unwrap_or(0))
            | self
                .op1215
                .disassembly()
                .checked_shl(u32::try_from(28i64).unwrap())
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op0811 = token_parser.TokenFieldop0811();
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = ((token_parser
            .TokenFieldop1631()
            .disassembly()
            .checked_shl(u32::try_from(1i64).unwrap())
            .unwrap_or(0)
            | token_parser
                .TokenFieldop0811()
                .disassembly()
                .checked_shl(u32::try_from(17i64).unwrap())
                .unwrap_or(0))
            | token_parser
                .TokenFieldop1215()
                .disassembly()
                .checked_shl(u32::try_from(28i64).unwrap())
                .unwrap_or(0));
        let op1631 = token_parser.TokenFieldop1631();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op0811,
                op1215,
                op1631,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff24abs {
    Var0(off24absVar0),
}
impl Tableoff24abs {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off24absVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:804:1"]
#[derive(Clone, Debug)]
struct off0811pc4oVar0 {
    op0811: TokenField_op0811,
}
impl off0811pc4oVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            (4294967264i64
                | self
                    .op0811
                    .disassembly()
                    .checked_shl(u32::try_from(1i64).unwrap())
                    .unwrap_or(0)),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            (4294967264i64
                | token_parser
                    .TokenFieldop0811()
                    .disassembly()
                    .checked_shl(u32::try_from(1i64).unwrap())
                    .unwrap_or(0)),
        );
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4o {
    Var0(off0811pc4oVar0),
}
impl Tableoff0811pc4o {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0811pc4oVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:806:1"]
#[derive(Clone, Debug)]
struct off0811pc4zVar0 {
    op0811: TokenField_op0811,
}
impl off0811pc4zVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.op0811.disassembly().wrapping_mul(2i64));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldop0811()
                .disassembly()
                .wrapping_mul(2i64),
        );
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4z {
    Var0(off0811pc4zVar0),
}
impl Tableoff0811pc4z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0811pc4zVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:808:1"]
#[derive(Clone, Debug)]
struct off0815pc8sVar0 {
    sop0815: TokenField_sop0815,
}
impl off0815pc8sVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.sop0815.disassembly().wrapping_mul(2i64));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldsop0815()
                .disassembly()
                .wrapping_mul(2i64),
        );
        let sop0815 = token_parser.TokenFieldsop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0815pc8s {
    Var0(off0815pc8sVar0),
}
impl Tableoff0815pc8s {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0815pc8sVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:810:1"]
#[derive(Clone, Debug)]
struct off1630pc15sVar0 {
    sop1630: TokenField_sop1630,
}
impl off1630pc15sVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.sop1630.disassembly().wrapping_mul(2i64));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldsop1630()
                .disassembly()
                .wrapping_mul(2i64),
        );
        let sop1630 = token_parser.TokenFieldsop1630();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1630 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff1630pc15s {
    Var0(off1630pc15sVar0),
}
impl Tableoff1630pc15s {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off1630pc15sVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:813:1"]
#[derive(Clone, Debug)]
struct off0811pc4z16Var0 {
    op0811: TokenField_op0811,
}
impl off0811pc4z16Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            self.op0811
                .disassembly()
                .wrapping_add(16i64)
                .wrapping_mul(2i64),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = i64::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldop0811()
                .disassembly()
                .wrapping_add(16i64)
                .wrapping_mul(2i64),
        );
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4z16 {
    Var0(off0811pc4z16Var0),
}
impl Tableoff0811pc4z16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0811pc4z16Var0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:816:1"]
#[derive(Clone, Debug)]
struct const0607ZVar0 {
    op0607: TokenField_op0607,
}
impl const0607ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0607.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op0607 = token_parser.TokenFieldop0607();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0607 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0607Z {
    Var0(const0607ZVar0),
}
impl Tableconst0607Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0607ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:818:1"]
#[derive(Clone, Debug)]
struct const0810ZVar0 {
    op0810: TokenField_op0810,
}
impl const0810ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0810.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op0810 = token_parser.TokenFieldop0810();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0810 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0810Z {
    Var0(const0810ZVar0),
}
impl Tableconst0810Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0810ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:820:1"]
#[derive(Clone, Debug)]
struct const0811Z6zzVar0 {
    op0811: TokenField_op0811,
}
impl const0811Z6zzVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = self
            .op0811
            .disassembly()
            .checked_shl(u32::try_from(2i64).unwrap())
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = token_parser
            .TokenFieldop0811()
            .disassembly()
            .checked_shl(u32::try_from(2i64).unwrap())
            .unwrap_or(0);
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z6zz {
    Var0(const0811Z6zzVar0),
}
impl Tableconst0811Z6zz {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0811Z6zzVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:822:1"]
#[derive(Clone, Debug)]
struct const0811ZVar0 {
    op0811: TokenField_op0811,
}
impl const0811ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z {
    Var0(const0811ZVar0),
}
impl Tableconst0811Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0811ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:824:1"]
#[derive(Clone, Debug)]
struct const0811Z5zVar0 {
    op0811: TokenField_op0811,
}
impl const0811Z5zVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = self
            .op0811
            .disassembly()
            .checked_shl(u32::try_from(1i64).unwrap())
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = token_parser
            .TokenFieldop0811()
            .disassembly()
            .checked_shl(u32::try_from(1i64).unwrap())
            .unwrap_or(0);
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z5z {
    Var0(const0811Z5zVar0),
}
impl Tableconst0811Z5z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0811Z5zVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:826:1"]
#[derive(Clone, Debug)]
struct const0815ZVar0 {
    op0815: TokenField_op0815,
}
impl const0815ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0815.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op0815 = token_parser.TokenFieldop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0815Z {
    Var0(const0815ZVar0),
}
impl Tableconst0815Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0815ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:828:1"]
#[derive(Clone, Debug)]
struct const0815Z10zzVar0 {
    op0815: TokenField_op0815,
}
impl const0815Z10zzVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = self
            .op0815
            .disassembly()
            .checked_shl(u32::try_from(2i64).unwrap())
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = token_parser
            .TokenFieldop0815()
            .disassembly()
            .checked_shl(u32::try_from(2i64).unwrap())
            .unwrap_or(0);
        let op0815 = token_parser.TokenFieldop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0815Z10zz {
    Var0(const0815Z10zzVar0),
}
impl Tableconst0815Z10zz {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0815Z10zzVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:830:1"]
#[derive(Clone, Debug)]
struct const1111ZVar0 {
    op1111: TokenField_op1111,
}
impl const1111ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1111.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1111 = token_parser.TokenFieldop1111();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1111 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1111Z {
    Var0(const1111ZVar0),
}
impl Tableconst1111Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1111ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:832:1"]
#[derive(Clone, Debug)]
struct const1215SVar0 {
    sop1215: TokenField_sop1215,
}
impl const1215SVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.sop1215.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let sop1215 = token_parser.TokenFieldsop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215S {
    Var0(const1215SVar0),
}
impl Tableconst1215S {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215SVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:834:1"]
#[derive(Clone, Debug)]
struct const1215ZVar0 {
    op1215: TokenField_op1215,
}
impl const1215ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1215.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z {
    Var0(const1215ZVar0),
}
impl Tableconst1215Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:836:1"]
#[derive(Clone, Debug)]
struct const1215Z6zzVar0 {
    op1215: TokenField_op1215,
}
impl const1215Z6zzVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = self
            .op1215
            .disassembly()
            .checked_shl(u32::try_from(2i64).unwrap())
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = token_parser
            .TokenFieldop1215()
            .disassembly()
            .checked_shl(u32::try_from(2i64).unwrap())
            .unwrap_or(0);
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z6zz {
    Var0(const1215Z6zzVar0),
}
impl Tableconst1215Z6zz {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215Z6zzVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:838:1"]
#[derive(Clone, Debug)]
struct const1215Z5zVar0 {
    op1215: TokenField_op1215,
}
impl const1215Z5zVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = self
            .op1215
            .disassembly()
            .checked_shl(u32::try_from(1i64).unwrap())
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = token_parser
            .TokenFieldop1215()
            .disassembly()
            .checked_shl(u32::try_from(1i64).unwrap())
            .unwrap_or(0);
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z5z {
    Var0(const1215Z5zVar0),
}
impl Tableconst1215Z5z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215Z5zVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:840:1"]
#[derive(Clone, Debug)]
struct const1220SVar0 {
    sop1620: TokenField_sop1620,
    op1215: TokenField_op1215,
}
impl const1220SVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = (self
            .sop1620
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (token_parser
            .TokenFieldsop1620()
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let sop1620 = token_parser.TokenFieldsop1620();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, sop1620 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1220S {
    Var0(const1220SVar0),
}
impl Tableconst1220S {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1220SVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:842:1"]
#[derive(Clone, Debug)]
struct const1220ZVar0 {
    op1620: TokenField_op1620,
    op1215: TokenField_op1215,
}
impl const1220ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = (self
            .op1620
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (token_parser
            .TokenFieldop1620()
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let op1620 = token_parser.TokenFieldop1620();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, op1620 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1220Z {
    Var0(const1220ZVar0),
}
impl Tableconst1220Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1220ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:844:1"]
#[derive(Clone, Debug)]
struct const1227SVar0 {
    sop1627: TokenField_sop1627,
    op1215: TokenField_op1215,
}
impl const1227SVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = (self
            .sop1627
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (token_parser
            .TokenFieldsop1627()
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let sop1627 = token_parser.TokenFieldsop1627();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, sop1627 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1227S {
    Var0(const1227SVar0),
}
impl Tableconst1227S {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1227SVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:846:1"]
#[derive(Clone, Debug)]
struct const1227ZVar0 {
    op1627: TokenField_op1627,
    op1215: TokenField_op1215,
}
impl const1227ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = (self
            .op1627
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (token_parser
            .TokenFieldop1627()
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let op1627 = token_parser.TokenFieldop1627();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, op1627 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1227Z {
    Var0(const1227ZVar0),
}
impl Tableconst1227Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1227ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:848:1"]
#[derive(Clone, Debug)]
struct const1617ZVar0 {
    op1617: TokenField_op1617,
}
impl const1617ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1617.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1617 = token_parser.TokenFieldop1617();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1617 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1617Z {
    Var0(const1617ZVar0),
}
impl Tableconst1617Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1617ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:850:1"]
#[derive(Clone, Debug)]
struct const1620ZVar0 {
    op1620: TokenField_op1620,
}
impl const1620ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1620.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op1620 = token_parser.TokenFieldop1620();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1620 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1620Z {
    Var0(const1620ZVar0),
}
impl Tableconst1620Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1620ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:852:1"]
#[derive(Clone, Debug)]
struct const2327ZVar0 {
    op2327: TokenField_op2327,
}
impl const2327ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op2327.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let op2327 = token_parser.TokenFieldop2327();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op2327 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst2327Z {
    Var0(const2327ZVar0),
}
impl Tableconst2327Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const2327ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:854:1"]
#[derive(Clone, Debug)]
struct NbitVar0 {
    op0707: TokenField_op0707,
    op1215: TokenField_op1215,
}
impl NbitVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = (self
            .op0707
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        calc_reloc = (token_parser
            .TokenFieldop0707()
            .disassembly()
            .checked_shl(u32::try_from(4i64).unwrap())
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let op0707 = token_parser.TokenFieldop0707();
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0707, op1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableNbit {
    Var0(NbitVar0),
}
impl TableNbit {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            NbitVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:862:1"]
#[derive(Clone, Debug)]
struct BOVar0 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
}
impl BOVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+r"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop2627().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rpe1215, Rpo1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:864:1"]
#[derive(Clone, Debug)]
struct BOVar1 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
}
impl BOVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+i"),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop2627().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rpe1215, Rpo1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:866:1"]
#[derive(Clone, Debug)]
struct BOVar2 {
    Ra1215: TokenField_Ra1215,
    off10: Tableoff10,
}
impl BOVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2627().disassembly() != 2i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:868:1"]
#[derive(Clone, Debug)]
struct BOVar3 {
    Ra1215: TokenField_Ra1215,
    off10: Tableoff10,
}
impl BOVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2627().disassembly() != 0i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:870:1"]
#[derive(Clone, Debug)]
struct BOVar4 {
    Ra1215: TokenField_Ra1215,
    off10: Tableoff10,
}
impl BOVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[+"),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2627().disassembly() != 1i64 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableBO {
    Var0(BOVar0),
    Var1(BOVar1),
    Var2(BOVar2),
    Var3(BOVar3),
    Var4(BOVar4),
}
impl TableBO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            BOVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:873:1"]
#[derive(Clone, Debug)]
struct BOLVar0 {
    Ra1215: TokenField_Ra1215,
    off16: Tableoff16,
}
impl BOLVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let off16 = if let Some((len, table)) =
            Tableoff16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off16, Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableBOL {
    Var0(BOLVar0),
}
impl TableBOL {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            BOLVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:880:1"]
#[derive(Clone, Debug)]
struct SSRVar0 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 1i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:882:1"]
#[derive(Clone, Debug)]
struct SSRVar1 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:878:1"]
#[derive(Clone, Debug)]
struct SSRVar2 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:876:1"]
#[derive(Clone, Debug)]
struct SSRVar3 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 3i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableSSR {
    Var0(SSRVar0),
    Var1(SSRVar1),
    Var2(SSRVar2),
    Var3(SSRVar3),
}
impl TableSSR {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SSRVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSRVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSRVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSRVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:889:1"]
#[derive(Clone, Debug)]
struct SLRVar0 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 1i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:891:1"]
#[derive(Clone, Debug)]
struct SLRVar1 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 0i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:887:1"]
#[derive(Clone, Debug)]
struct SLRVar2 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:885:1"]
#[derive(Clone, Debug)]
struct SLRVar3 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 1i64 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableSLR {
    Var0(SLRVar0),
    Var1(SLRVar1),
    Var2(SLRVar2),
    Var3(SLRVar3),
}
impl TableSLR {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SLRVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLRVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLRVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLRVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:894:1"]
#[derive(Clone, Debug)]
struct SROVar0 {
    Ra1215: TokenField_Ra1215,
    const0811Z: Tableconst0811Z,
}
impl SROVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 12i64 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i64 {
            return None;
        }
        let const0811Z = if let Some((len, table)) = Tableconst0811Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0811Z, Ra1215 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:896:1"]
#[derive(Clone, Debug)]
struct SROVar1 {
    Ra1215: TokenField_Ra1215,
    const0811Z5z: Tableconst0811Z5z,
}
impl SROVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z5z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 12i64 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i64 {
            return None;
        }
        let const0811Z5z = if let Some((len, table)) = Tableconst0811Z5z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0811Z5z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:898:1"]
#[derive(Clone, Debug)]
struct SROVar2 {
    Ra1215: TokenField_Ra1215,
    const0811Z6zz: Tableconst0811Z6zz,
}
impl SROVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z6zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 12i64 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i64 {
            return None;
        }
        let const0811Z6zz = if let Some((len, table)) =
            Tableconst0811Z6zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0811Z6zz,
                Ra1215,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TableSRO {
    Var0(SROVar0),
    Var1(SROVar1),
    Var2(SROVar2),
}
impl TableSRO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SROVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SROVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SROVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:901:1"]
#[derive(Clone, Debug)]
struct SLROVar0 {
    const1215Z: Tableconst1215Z,
}
impl SLROVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:903:1"]
#[derive(Clone, Debug)]
struct SLROVar1 {
    const1215Z5z: Tableconst1215Z5z,
}
impl SLROVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z5z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i64 {
            return None;
        }
        let const1215Z5z = if let Some((len, table)) = Tableconst1215Z5z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z5z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:905:1"]
#[derive(Clone, Debug)]
struct SLROVar2 {
    const1215Z6zz: Tableconst1215Z6zz,
}
impl SLROVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z6zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i64 {
            return None;
        }
        let const1215Z6zz = if let Some((len, table)) =
            Tableconst1215Z6zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z6zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSLRO {
    Var0(SLROVar0),
    Var1(SLROVar1),
    Var2(SLROVar2),
}
impl TableSLRO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SLROVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLROVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLROVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:908:1"]
#[derive(Clone, Debug)]
struct SSROVar0 {
    const1215Z: Tableconst1215Z,
}
impl SSROVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i64 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:910:1"]
#[derive(Clone, Debug)]
struct SSROVar1 {
    const1215Z5z: Tableconst1215Z5z,
}
impl SSROVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z5z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i64 {
            return None;
        }
        let const1215Z5z = if let Some((len, table)) = Tableconst1215Z5z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z5z }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:912:1"]
#[derive(Clone, Debug)]
struct SSROVar2 {
    const1215Z6zz: Tableconst1215Z6zz,
}
impl SSROVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z6zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i64 {
            return None;
        }
        let const1215Z6zz = if let Some((len, table)) =
            Tableconst1215Z6zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z6zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSSRO {
    Var0(SSROVar0),
    Var1(SSROVar1),
    Var2(SSROVar2),
}
impl TableSSRO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SSROVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSROVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSROVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc:915:1"]
#[derive(Clone, Debug)]
struct SCVar0 {
    const0815Z10zz: Tableconst0815Z10zz,
}
impl SCVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a10),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z10zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i64 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i64 {
            return None;
        }
        let const0815Z10zz = if let Some((len, table)) =
            Tableconst0815Z10zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z10zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSC {
    Var0(SCVar0),
}
impl TableSC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SCVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:69:1"]
#[derive(Clone, Debug)]
struct CONDCAVar0 {}
impl CONDCAVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:70:1"]
#[derive(Clone, Debug)]
struct CONDCAVar1 {}
impl CONDCAVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 1i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:71:1"]
#[derive(Clone, Debug)]
struct CONDCAVar2 {}
impl CONDCAVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 2i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:72:1"]
#[derive(Clone, Debug)]
struct CONDCAVar3 {}
impl CONDCAVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 3i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:73:1"]
#[derive(Clone, Debug)]
struct CONDCAVar4 {}
impl CONDCAVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 4i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:74:1"]
#[derive(Clone, Debug)]
struct CONDCAVar5 {}
impl CONDCAVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 5i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:75:1"]
#[derive(Clone, Debug)]
struct CONDCAVar6 {}
impl CONDCAVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 6i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:76:1"]
#[derive(Clone, Debug)]
struct CONDCAVar7 {}
impl CONDCAVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 7i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCA {
    Var0(CONDCAVar0),
    Var1(CONDCAVar1),
    Var2(CONDCAVar2),
    Var3(CONDCAVar3),
    Var4(CONDCAVar4),
    Var5(CONDCAVar5),
    Var6(CONDCAVar6),
    Var7(CONDCAVar7),
}
impl TableCONDCA {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CONDCAVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:78:1"]
#[derive(Clone, Debug)]
struct CONDCBVar0 {}
impl CONDCBVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:79:1"]
#[derive(Clone, Debug)]
struct CONDCBVar1 {}
impl CONDCBVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 1i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:80:1"]
#[derive(Clone, Debug)]
struct CONDCBVar2 {}
impl CONDCBVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 2i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:81:1"]
#[derive(Clone, Debug)]
struct CONDCBVar3 {}
impl CONDCBVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 3i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:82:1"]
#[derive(Clone, Debug)]
struct CONDCBVar4 {}
impl CONDCBVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 4i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:83:1"]
#[derive(Clone, Debug)]
struct CONDCBVar5 {}
impl CONDCBVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 5i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:84:1"]
#[derive(Clone, Debug)]
struct CONDCBVar6 {}
impl CONDCBVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 6i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:85:1"]
#[derive(Clone, Debug)]
struct CONDCBVar7 {}
impl CONDCBVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 7i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:86:1"]
#[derive(Clone, Debug)]
struct CONDCBVar8 {}
impl CONDCBVar8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_N")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 8i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:87:1"]
#[derive(Clone, Debug)]
struct CONDCBVar9 {}
impl CONDCBVar9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 9i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:88:1"]
#[derive(Clone, Debug)]
struct CONDCBVar10 {}
impl CONDCBVar10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NV")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 10i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:89:1"]
#[derive(Clone, Debug)]
struct CONDCBVar11 {}
impl CONDCBVar11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 11i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:90:1"]
#[derive(Clone, Debug)]
struct CONDCBVar12 {}
impl CONDCBVar12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 12i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:91:1"]
#[derive(Clone, Debug)]
struct CONDCBVar13 {}
impl CONDCBVar13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 13i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:92:1"]
#[derive(Clone, Debug)]
struct CONDCBVar14 {}
impl CONDCBVar14 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 14i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:93:1"]
#[derive(Clone, Debug)]
struct CONDCBVar15 {}
impl CONDCBVar15 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 15i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCB {
    Var0(CONDCBVar0),
    Var1(CONDCBVar1),
    Var2(CONDCBVar2),
    Var3(CONDCBVar3),
    Var4(CONDCBVar4),
    Var5(CONDCBVar5),
    Var6(CONDCBVar6),
    Var7(CONDCBVar7),
    Var8(CONDCBVar8),
    Var9(CONDCBVar9),
    Var10(CONDCBVar10),
    Var11(CONDCBVar11),
    Var12(CONDCBVar12),
    Var13(CONDCBVar13),
    Var14(CONDCBVar14),
    Var15(CONDCBVar15),
}
impl TableCONDCB {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var14(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var15(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CONDCBVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar8::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar9::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar10::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar11::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar12::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar13::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar14::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var14(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar15::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var15(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:96:1"]
#[derive(Clone, Debug)]
struct CONDCABVar0 {}
impl CONDCABVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:97:1"]
#[derive(Clone, Debug)]
struct CONDCABVar1 {}
impl CONDCABVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 1i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:98:1"]
#[derive(Clone, Debug)]
struct CONDCABVar2 {}
impl CONDCABVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 2i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:99:1"]
#[derive(Clone, Debug)]
struct CONDCABVar3 {}
impl CONDCABVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 3i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:100:1"]
#[derive(Clone, Debug)]
struct CONDCABVar4 {}
impl CONDCABVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 4i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:101:1"]
#[derive(Clone, Debug)]
struct CONDCABVar5 {}
impl CONDCABVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 5i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:102:1"]
#[derive(Clone, Debug)]
struct CONDCABVar6 {}
impl CONDCABVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 6i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:103:1"]
#[derive(Clone, Debug)]
struct CONDCABVar7 {}
impl CONDCABVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 7i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:104:1"]
#[derive(Clone, Debug)]
struct CONDCABVar8 {}
impl CONDCABVar8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_N")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 8i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:105:1"]
#[derive(Clone, Debug)]
struct CONDCABVar9 {}
impl CONDCABVar9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 9i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:106:1"]
#[derive(Clone, Debug)]
struct CONDCABVar10 {}
impl CONDCABVar10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NV")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 10i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:107:1"]
#[derive(Clone, Debug)]
struct CONDCABVar11 {}
impl CONDCABVar11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 11i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:108:1"]
#[derive(Clone, Debug)]
struct CONDCABVar12 {}
impl CONDCABVar12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 12i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:109:1"]
#[derive(Clone, Debug)]
struct CONDCABVar13 {}
impl CONDCABVar13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 13i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:110:1"]
#[derive(Clone, Debug)]
struct CONDCABVar14 {}
impl CONDCABVar14 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 14i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:111:1"]
#[derive(Clone, Debug)]
struct CONDCABVar15 {}
impl CONDCABVar15 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 15i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCAB {
    Var0(CONDCABVar0),
    Var1(CONDCABVar1),
    Var2(CONDCABVar2),
    Var3(CONDCABVar3),
    Var4(CONDCABVar4),
    Var5(CONDCABVar5),
    Var6(CONDCABVar6),
    Var7(CONDCABVar7),
    Var8(CONDCABVar8),
    Var9(CONDCABVar9),
    Var10(CONDCABVar10),
    Var11(CONDCABVar11),
    Var12(CONDCABVar12),
    Var13(CONDCABVar13),
    Var14(CONDCABVar14),
    Var15(CONDCABVar15),
}
impl TableCONDCAB {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var14(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var15(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CONDCABVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar8::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar9::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar10::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar11::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar12::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar13::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar14::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var14(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar15::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var15(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:113:1"]
#[derive(Clone, Debug)]
struct imm5Var0 {
    pcp_op0004: TokenField_pcp_op0004,
}
impl imm5Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.pcp_op0004.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0004 = token_parser.TokenFieldpcp_op0004();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0004 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm5 {
    Var0(imm5Var0),
}
impl Tableimm5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm5Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:114:1"]
#[derive(Clone, Debug)]
struct imm6Var0 {
    pcp_op0005: TokenField_pcp_op0005,
}
impl imm6Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.pcp_op0005.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm6 {
    Var0(imm6Var0),
}
impl Tableimm6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm6Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:116:1"]
#[derive(Clone, Debug)]
struct imm16Var0 {
    pcp_op1631: TokenField_pcp_op1631,
}
impl imm16Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.pcp_op1631.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op1631 = token_parser.TokenFieldpcp_op1631();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm16 {
    Var0(imm16Var0),
}
impl Tableimm16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm16Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:117:1"]
#[derive(Clone, Debug)]
struct offset6Var0 {
    pcp_op0005: TokenField_pcp_op0005,
}
impl offset6Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[#"),
            self.pcp_op0005.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6 {
    Var0(offset6Var0),
}
impl Tableoffset6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            offset6Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:119:1"]
#[derive(Clone, Debug)]
struct offset6WVar0 {
    R0608: TokenField_R0608,
    pcp_op0005: TokenField_pcp_op0005,
}
impl offset6WVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", "),
            DisplayElement::Literal("[#"),
            self.pcp_op0005.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6W {
    Var0(offset6WVar0),
}
impl Tableoffset6W {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            offset6WVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:120:1"]
#[derive(Clone, Debug)]
struct offset6RWVar0 {
    R0608: TokenField_R0608,
    pcp_op0005: TokenField_pcp_op0005,
}
impl offset6RWVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", "),
            DisplayElement::Literal("[#"),
            self.pcp_op0005.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6RW {
    Var0(offset6RWVar0),
}
impl Tableoffset6RW {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            offset6RWVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:122:1"]
#[derive(Clone, Debug)]
struct SRCVar0 {}
impl SRCVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Register(Register::R4)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0708().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:123:1"]
#[derive(Clone, Debug)]
struct SRCVar1 {}
impl SRCVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R4),
            DisplayElement::Literal("+"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0708().disassembly() != 1i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:124:1"]
#[derive(Clone, Debug)]
struct SRCVar2 {}
impl SRCVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R4),
            DisplayElement::Literal("-"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0708().disassembly() != 2i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSRC {
    Var0(SRCVar0),
    Var1(SRCVar1),
    Var2(SRCVar2),
}
impl TableSRC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SRCVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SRCVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SRCVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:126:1"]
#[derive(Clone, Debug)]
struct DSTVar0 {}
impl DSTVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Register(Register::R5)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0910().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:127:1"]
#[derive(Clone, Debug)]
struct DSTVar1 {}
impl DSTVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R5),
            DisplayElement::Literal("+"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0910().disassembly() != 1i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:128:1"]
#[derive(Clone, Debug)]
struct DSTVar2 {}
impl DSTVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R5),
            DisplayElement::Literal("-"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0910().disassembly() != 2i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableDST {
    Var0(DSTVar0),
    Var1(DSTVar1),
    Var2(DSTVar2),
}
impl TableDST {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            DSTVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            DSTVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            DSTVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:130:1"]
#[derive(Clone, Debug)]
struct SIZE0Var0 {}
impl SIZE0Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("8")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:131:1"]
#[derive(Clone, Debug)]
struct SIZE0Var1 {}
impl SIZE0Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("16")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:132:1"]
#[derive(Clone, Debug)]
struct SIZE0Var2 {}
impl SIZE0Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("32")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE0 {
    Var0(SIZE0Var0),
    Var1(SIZE0Var1),
    Var2(SIZE0Var2),
}
impl TableSIZE0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE0Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE0Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE0Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:134:1"]
#[derive(Clone, Debug)]
struct SIZE1Var0 {
    R0305: TokenField_R0305,
}
impl SIZE1Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:135:1"]
#[derive(Clone, Debug)]
struct SIZE1Var1 {
    R0305: TokenField_R0305,
}
impl SIZE1Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:136:1"]
#[derive(Clone, Debug)]
struct SIZE1Var2 {
    R0305: TokenField_R0305,
}
impl SIZE1Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1 {
    Var0(SIZE1Var0),
    Var1(SIZE1Var1),
    Var2(SIZE1Var2),
}
impl TableSIZE1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE1Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:138:1"]
#[derive(Clone, Debug)]
struct SIZE1WVar0 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1WVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:139:1"]
#[derive(Clone, Debug)]
struct SIZE1WVar1 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1WVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:140:1"]
#[derive(Clone, Debug)]
struct SIZE1WVar2 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1WVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1W {
    Var0(SIZE1WVar0),
    Var1(SIZE1WVar1),
    Var2(SIZE1WVar2),
}
impl TableSIZE1W {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE1WVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1WVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1WVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:142:1"]
#[derive(Clone, Debug)]
struct SIZE1RWVar0 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1RWVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:143:1"]
#[derive(Clone, Debug)]
struct SIZE1RWVar1 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1RWVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:144:1"]
#[derive(Clone, Debug)]
struct SIZE1RWVar2 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1RWVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            self.R0608.display(),
            DisplayElement::Literal(", ["),
            self.R0305.display(),
            DisplayElement::Literal("], "),
            DisplayElement::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i64 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1RW {
    Var0(SIZE1RWVar0),
    Var1(SIZE1RWVar1),
    Var2(SIZE1RWVar2),
}
impl TableSIZE1RW {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE1RWVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1RWVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1RWVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:146:1"]
#[derive(Clone, Debug)]
struct SIZE5Var0 {}
impl SIZE5Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("8")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:147:1"]
#[derive(Clone, Debug)]
struct SIZE5Var1 {}
impl SIZE5Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("16")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:148:1"]
#[derive(Clone, Debug)]
struct SIZE5Var2 {}
impl SIZE5Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("32")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 1i64 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE5 {
    Var0(SIZE5Var0),
    Var1(SIZE5Var1),
    Var2(SIZE5Var2),
}
impl TableSIZE5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE5Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:150:1"]
#[derive(Clone, Debug)]
struct SIZE5WVar0 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl SIZE5WVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(", "), DisplayElement::Literal("8")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:151:1"]
#[derive(Clone, Debug)]
struct SIZE5WVar1 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl SIZE5WVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(", "), DisplayElement::Literal("16")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:152:1"]
#[derive(Clone, Debug)]
struct SIZE5WVar2 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl SIZE5WVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("], "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(", "), DisplayElement::Literal("32")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 1i64 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE5W {
    Var0(SIZE5WVar0),
    Var1(SIZE5WVar1),
    Var2(SIZE5WVar2),
}
impl TableSIZE5W {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE5WVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5WVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5WVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:158:1"]
#[derive(Clone, Debug)]
struct CNCVar0 {
    pcp_op0506: TokenField_pcp_op0506,
}
impl CNCVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0506.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0506 = token_parser.TokenFieldpcp_op0506();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0506 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNC {
    Var0(CNCVar0),
}
impl TableCNC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CNCVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:162:1"]
#[derive(Clone, Debug)]
struct CNT03Var0 {
    pcp_op0204: TokenField_pcp_op0204,
}
impl CNT03Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0204.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0204 = token_parser.TokenFieldpcp_op0204();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0204 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNT03 {
    Var0(CNT03Var0),
}
impl TableCNT03 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CNT03Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:168:1"]
#[derive(Clone, Debug)]
struct CNT02Var0 {
    pcp_op0203: TokenField_pcp_op0203,
}
impl CNT02Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0203.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0203 = token_parser.TokenFieldpcp_op0203();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0203 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNT02 {
    Var0(CNT02Var0),
}
impl TableCNT02 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CNT02Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:170:1"]
#[derive(Clone, Debug)]
struct ECVar0 {
    pcp_op0707: TokenField_pcp_op0707,
}
impl ECVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0707.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0707 = token_parser.TokenFieldpcp_op0707();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0707 }))
    }
}
#[derive(Clone, Debug)]
enum TableEC {
    Var0(ECVar0),
}
impl TableEC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            ECVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:171:1"]
#[derive(Clone, Debug)]
struct EPVar0 {
    pcp_op0808: TokenField_pcp_op0808,
}
impl EPVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0808.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0808 = token_parser.TokenFieldpcp_op0808();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0808 }))
    }
}
#[derive(Clone, Debug)]
enum TableEP {
    Var0(EPVar0),
}
impl TableEP {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            EPVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:172:1"]
#[derive(Clone, Debug)]
struct INTVar0 {
    pcp_op0909: TokenField_pcp_op0909,
}
impl INTVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0909.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0909 = token_parser.TokenFieldpcp_op0909();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0909 }))
    }
}
#[derive(Clone, Debug)]
enum TableINT {
    Var0(INTVar0),
}
impl TableINT {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            INTVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:173:1"]
#[derive(Clone, Debug)]
struct STVar0 {
    pcp_op1010: TokenField_pcp_op1010,
}
impl STVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op1010.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op1010 = token_parser.TokenFieldpcp_op1010();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1010 }))
    }
}
#[derive(Clone, Debug)]
enum TableST {
    Var0(STVar0),
}
impl TableST {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            STVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:175:1"]
#[derive(Clone, Debug)]
struct SETCLRVar0 {}
impl SETCLRVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("SET")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 1i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:176:1"]
#[derive(Clone, Debug)]
struct SETCLRVar1 {}
impl SETCLRVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("CLR")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i64 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSETCLR {
    Var0(SETCLRVar0),
    Var1(SETCLRVar1),
}
impl TableSETCLR {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SETCLRVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SETCLRVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:178:1"]
#[derive(Clone, Debug)]
struct SDBVar0 {
    pcp_op0000: TokenField_pcp_op0000,
}
impl SDBVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0000.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0000 = token_parser.TokenFieldpcp_op0000();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0000 }))
    }
}
#[derive(Clone, Debug)]
enum TableSDB {
    Var0(SDBVar0),
}
impl TableSDB {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SDBVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:179:1"]
#[derive(Clone, Debug)]
struct EDAVar0 {
    pcp_op0101: TokenField_pcp_op0101,
}
impl EDAVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0101.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0101 = token_parser.TokenFieldpcp_op0101();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0101 }))
    }
}
#[derive(Clone, Debug)]
enum TableEDA {
    Var0(EDAVar0),
}
impl TableEDA {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            EDAVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:180:1"]
#[derive(Clone, Debug)]
struct RTAVar0 {
    pcp_op0202: TokenField_pcp_op0202,
}
impl RTAVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0202.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0202 = token_parser.TokenFieldpcp_op0202();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0202 }))
    }
}
#[derive(Clone, Debug)]
enum TableRTA {
    Var0(RTAVar0),
}
impl TableRTA {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            RTAVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:181:1"]
#[derive(Clone, Debug)]
struct DACVar0 {
    pcp_op0303: TokenField_pcp_op0303,
}
impl DACVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0303.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op0303 = token_parser.TokenFieldpcp_op0303();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0303 }))
    }
}
#[derive(Clone, Debug)]
enum TableDAC {
    Var0(DACVar0),
}
impl TableDAC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            DACVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:406:1"]
#[derive(Clone, Debug)]
struct imm6pcVar0 {
    pcp_op0005: TokenField_pcp_op0005,
}
impl imm6pcVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.pcp_op0005.disassembly());
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        calc_reloc = i64::try_from(inst_start)
            .unwrap()
            .wrapping_add(token_parser.TokenFieldpcp_op0005().disassembly());
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm6pc {
    Var0(imm6pcVar0),
}
impl Tableimm6pc {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm6pcVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:407:1"]
#[derive(Clone, Debug)]
struct imm10pcVar0 {
    pcp_op0009: TokenField_pcp_op0009,
}
impl imm10pcVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i64 = 0;
        calc_reloc = i64::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.pcp_op0009.disassembly());
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i64 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        calc_reloc = i64::try_from(inst_start)
            .unwrap()
            .wrapping_add(token_parser.TokenFieldpcp_op0009().disassembly());
        let pcp_op0009 = token_parser.TokenFieldpcp_op0009();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0009 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm10pc {
    Var0(imm10pcVar0),
}
impl Tableimm10pc {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm10pcVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at /home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc:408:1"]
#[derive(Clone, Debug)]
struct imm16absVar0 {
    pcp_op1631: TokenField_pcp_op1631,
}
impl imm16absVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op1631.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance.register().read_PCPMode_disassembly() != 1i64 {
            return None;
        }
        let pcp_op1631 = token_parser.TokenFieldpcp_op1631();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm16abs {
    Var0(imm16absVar0),
}
impl Tableimm16abs {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm16absVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
pub fn parse_instruction<T>(
    tokens: &[u8],
    context: &mut T,
    inst_start: u32,
    global_set: &mut impl GlobalSetTrait,
) -> Option<(u32, Vec<DisplayElement>)>
where
    T: ContextTrait + Clone,
{
    let (inst_len, instruction) =
        Tableinstruction::parse(tokens, context, inst_start)?;
    let inst_next = inst_start + inst_len;
    let mut display = vec![];
    instruction.display_extend(
        &mut display,
        context,
        inst_start,
        inst_next,
        global_set,
    );
    Some((inst_next, display))
}
