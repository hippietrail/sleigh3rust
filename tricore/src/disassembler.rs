use sleigh4rust::*;
pub type AddrType = u32;
pub trait GlobalSetTrait {
    fn set_PCPMode(&mut self, address: Option<u32>, value: i128);
}
#[derive(Default)]
pub struct GlobalSetDefault<C: ContextTrait>(
    pub std::collections::HashMap<AddrType, C>,
);
impl<C: ContextTrait> GlobalSetTrait for GlobalSetDefault<C> {
    fn set_PCPMode(&mut self, inst_start: Option<AddrType>, value: i128) {
        let Some (inst_start) = inst_start else { return } ;
        self.0.entry(inst_start).or_insert_with(|| {
            let mut context = C::default();
            context
                .register_mut()
                .write_PCPMode_disassembly(value)
                .unwrap();
            context
        });
    }
}
pub trait ContextregisterTrait:
    MemoryRead<AddressType = u32> + MemoryWrite
{
    fn read_PCPMode_raw(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        let work_value = self.read_u8::<false>(0, 0, 1)?;
        Ok(u8::try_from(work_value).unwrap())
    }
    fn write_PCPMode_raw(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_u8::<false>(u8::from(param), 0, 0, 1)
    }
    fn read_PCPMode_disassembly(
        &self,
    ) -> Result<i128, MemoryReadError<Self::AddressType>> {
        let raw_value = self.read_PCPMode_raw()?;
        Ok(i128::try_from(raw_value).unwrap())
    }
    fn write_PCPMode_disassembly(
        &mut self,
        param: i128,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_PCPMode_raw(param as u8)
    }
    fn read_PCPMode_execution(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        self.read_PCPMode_raw()
    }
    fn write_PCPMode_execution(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_PCPMode_raw(param)
    }
    fn PCPMode_display(
        &self,
    ) -> Result<DisplayElement, MemoryReadError<Self::AddressType>> {
        Ok(meaning_number(true, self.read_PCPMode_raw()?))
    }
}
pub trait ContextTrait: Default {
    type Typeregister: ContextregisterTrait;
    fn register(&self) -> &Self::Typeregister;
    fn register_mut(&mut self) -> &mut Self::Typeregister;
}
#[derive(Debug, Clone, Copy)]
pub struct ContextregisterStructDebug {
    pub chunk_0x0: [Option<bool>; 32],
}
impl Default for ContextregisterStructDebug {
    fn default() -> Self {
        Self {
            chunk_0x0: [None; 32],
        }
    }
}
impl ContextregisterStructDebug {
    fn read_bits(
        &self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &mut [u8],
        mask: &[u8],
    ) -> Result<(), MemoryReadError<<Self as MemoryRead>::AddressType>> {
        assert_eq!(buf.len(), mask.len());
        let buf_len =
            <<Self as MemoryRead>::AddressType>::try_from(buf.len()).unwrap();
        let addr_end = addr + ((buf_len + 7) / 8);
        match (addr, addr_end) {
            (0..=3, 0..=4) => {
                let byte_offset = usize::try_from(addr - 0).unwrap();
                for ((buf_byte, mask_byte), byte) in
                    buf.iter_mut().zip(mask.iter()).zip(byte_offset..)
                {
                    for bit in (0..8)
                        .into_iter()
                        .filter(|bit| ((*mask_byte >> bit) & 1) != 0)
                    {
                        *buf_byte |= (self.chunk_0x0[(byte * 8) + bit].unwrap()
                            as u8)
                            << bit;
                    }
                }
            }
            (addr_start, addr_end) => {
                return Err(MemoryReadError::UnableToReadMemory(
                    addr_start, addr_end,
                ))
            }
        }
        Ok(())
    }
    fn write_bits(
        &mut self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &[u8],
        mask: &[u8],
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        assert_eq!(buf.len(), mask.len());
        let buf_len =
            <<Self as MemoryRead>::AddressType>::try_from(buf.len()).unwrap();
        let addr_end = addr + ((buf_len + 7) / 8);
        match (addr, addr_end) {
            (0..=3, 0..=4) => {
                let byte_offset = usize::try_from(addr - 0).unwrap();
                for ((buf_byte, mask_byte), byte) in
                    buf.iter().zip(mask.iter()).zip(byte_offset..)
                {
                    for bit in (0..8)
                        .into_iter()
                        .filter(|bit| ((*mask_byte >> bit) & 1) != 0)
                    {
                        self.chunk_0x0[(byte * 8) + bit] =
                            Some(*buf_byte & (1 << bit) != 0);
                    }
                }
            }
            (addr_start, addr_end) => {
                return Err(MemoryWriteError::UnableToWriteMemory(
                    addr_start, addr_end,
                ))
            }
        }
        Ok(())
    }
}
impl ContextregisterTrait for ContextregisterStructDebug {}
impl MemoryRead for ContextregisterStructDebug {
    type AddressType = u32;
    fn read(
        &self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &mut [u8],
    ) -> Result<(), MemoryReadError<<Self as MemoryRead>::AddressType>> {
        let mut inner_buf = vec![0xFF; buf.len()];
        self.read_bits(addr, buf, &mut inner_buf)
    }
    fn read_u8<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u8, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u8>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u8>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u8>::from_be_bytes(data)
        } else {
            <u8>::from_le_bytes(data)
        };
        let value_mask = <u8>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u16<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u16, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u16>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u16>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u16>::from_be_bytes(data)
        } else {
            <u16>::from_le_bytes(data)
        };
        let value_mask = <u16>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u32<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u32, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u32>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u32>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u32>::from_be_bytes(data)
        } else {
            <u32>::from_le_bytes(data)
        };
        let value_mask = <u32>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u64<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u64, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u64>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u64>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u64>::from_be_bytes(data)
        } else {
            <u64>::from_le_bytes(data)
        };
        let value_mask = <u64>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u128<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u128, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u128>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u128>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u128>::from_be_bytes(data)
        } else {
            <u128>::from_le_bytes(data)
        };
        let value_mask = <u128>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
}
impl MemoryWrite for ContextregisterStructDebug {
    fn write(
        &mut self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &[u8],
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        let mut inner_buf = vec![0xFF; buf.len()];
        self.write_bits(addr, buf, &inner_buf)
    }
    fn write_u8<const BIG_ENDIAN: bool>(
        &mut self,
        value: u8,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u8>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u8>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u16<const BIG_ENDIAN: bool>(
        &mut self,
        value: u16,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u16>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u16>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u32<const BIG_ENDIAN: bool>(
        &mut self,
        value: u32,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u32>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u32>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u64<const BIG_ENDIAN: bool>(
        &mut self,
        value: u64,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u64>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u64>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u128<const BIG_ENDIAN: bool>(
        &mut self,
        value: u128,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u128>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u128>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
}
#[derive(Debug, Clone, Copy, Default)]
pub struct SpacesStruct {
    pub register: ContextregisterStructDebug,
}
impl ContextTrait for SpacesStruct {
    type Typeregister = ContextregisterStructDebug;
    fn register(&self) -> &Self::Typeregister {
        &self.register
    }
    fn register_mut(&mut self) -> &mut Self::Typeregister {
        &mut self.register
    }
}
fn meaning_number<T>(hex: bool, num: T) -> DisplayElement
where
    i128: TryFrom<T>,
    <i128 as TryFrom<T>>::Error: core::fmt::Debug,
{
    DisplayElement::Number(hex, i128::try_from(num).unwrap())
}
fn meaning_0_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_0_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_0_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d0,
        1 => Register::d1,
        2 => Register::d2,
        3 => Register::d3,
        4 => Register::d4,
        5 => Register::d5,
        6 => Register::d6,
        7 => Register::d7,
        8 => Register::d8,
        9 => Register::d9,
        10 => Register::d10,
        11 => Register::d11,
        12 => Register::d12,
        13 => Register::d13,
        14 => Register::d14,
        15 => Register::d15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_1_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_1_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_1_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a0,
        1 => Register::a1,
        2 => Register::a2,
        3 => Register::a3,
        4 => Register::a4,
        5 => Register::a5,
        6 => Register::a6,
        7 => Register::a7,
        8 => Register::a8,
        9 => Register::a9,
        10 => Register::a10,
        11 => Register::a11,
        12 => Register::a12,
        13 => Register::a13,
        14 => Register::a14,
        15 => Register::a15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_2_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_2_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_2_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::e0,
        2 => Register::e2,
        4 => Register::e4,
        6 => Register::e6,
        8 => Register::e8,
        10 => Register::e10,
        12 => Register::e12,
        14 => Register::e14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_3_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_3_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_3_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d0,
        2 => Register::d2,
        4 => Register::d4,
        6 => Register::d6,
        8 => Register::d8,
        10 => Register::d10,
        12 => Register::d12,
        14 => Register::d14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_4_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_4_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_4_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::d1,
        2 => Register::d3,
        4 => Register::d5,
        6 => Register::d7,
        8 => Register::d9,
        10 => Register::d11,
        12 => Register::d13,
        14 => Register::d15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_5_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_5_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_5_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::e2,
        2 => Register::e4,
        4 => Register::e6,
        6 => Register::e8,
        8 => Register::e10,
        10 => Register::e12,
        12 => Register::e14,
        14 => Register::e0,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_6_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_6_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_6_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::p0,
        2 => Register::p2,
        4 => Register::p4,
        6 => Register::p6,
        8 => Register::p8,
        10 => Register::p10,
        12 => Register::p12,
        14 => Register::p14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_7_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_7_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_7_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a0,
        2 => Register::a2,
        4 => Register::a4,
        6 => Register::a6,
        8 => Register::a8,
        10 => Register::a10,
        12 => Register::a12,
        14 => Register::a14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_8_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_8_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_8_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::a1,
        2 => Register::a3,
        4 => Register::a5,
        6 => Register::a7,
        8 => Register::a9,
        10 => Register::a11,
        12 => Register::a13,
        14 => Register::a15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_9_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_9_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_9_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::R0,
        1 => Register::R1,
        2 => Register::R2,
        3 => Register::R3,
        4 => Register::R4,
        5 => Register::R5,
        6 => Register::R6,
        7 => Register::R7,
        _ => unreachable!("Invalid Attach Value"),
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0003(u8);
impl TokenField_op0003 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0005(u8);
impl TokenField_op0005 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0006(u8);
impl TokenField_op0006 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0007(u8);
impl TokenField_op0007 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0404(u8);
impl TokenField_op0404 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0405(u8);
impl TokenField_op0405 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0407(u8);
impl TokenField_op0407 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0606(u8);
impl TokenField_op0606 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0607(u8);
impl TokenField_op0607 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0707(u8);
impl TokenField_op0707 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0810(u8);
impl TokenField_op0810 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd0811(u8);
impl TokenField_Rd0811 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ra0811(u8);
impl TokenField_Ra0811 {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Re0811(u8);
impl TokenField_Re0811 {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ree0811(u8);
impl TokenField_Ree0811 {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Reo0811(u8);
impl TokenField_Reo0811 {
    fn execution(&self) -> Register {
        meaning_4_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_4_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ReN0811(u8);
impl TokenField_ReN0811 {
    fn execution(&self) -> Register {
        meaning_5_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_5_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0811(u8);
impl TokenField_op0811 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rp0811(u8);
impl TokenField_Rp0811 {
    fn execution(&self) -> Register {
        meaning_6_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_6_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpe0811(u8);
impl TokenField_Rpe0811 {
    fn execution(&self) -> Register {
        meaning_7_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_7_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpo0811(u8);
impl TokenField_Rpo0811 {
    fn execution(&self) -> Register {
        meaning_8_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_8_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op0815(u8);
impl TokenField_op0815 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop0815(i8);
impl TokenField_sop0815 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1111(u8);
impl TokenField_op1111 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd1215(u8);
impl TokenField_Rd1215 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1215(u8);
impl TokenField_op1215 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1215(i8);
impl TokenField_sop1215 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ra1215(u8);
impl TokenField_Ra1215 {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpe1215(u8);
impl TokenField_Rpe1215 {
    fn execution(&self) -> Register {
        meaning_7_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_7_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rpo1215(u8);
impl TokenField_Rpo1215 {
    fn execution(&self) -> Register {
        meaning_8_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_8_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1515(u8);
impl TokenField_op1515 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1617(u8);
impl TokenField_op1617 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1620(u8);
impl TokenField_op1620 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1620(i8);
impl TokenField_sop1620 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1621(u8);
impl TokenField_op1621 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1622(u8);
impl TokenField_op1622 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1623(u8);
impl TokenField_op1623 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1627(u16);
impl TokenField_op1627 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1627(i16);
impl TokenField_sop1627 {
    fn execution(&self) -> i16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop1630(i16);
impl TokenField_sop1630 {
    fn execution(&self) -> i16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1631(u16);
impl TokenField_op1631 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1819(u8);
impl TokenField_op1819 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1823(u8);
impl TokenField_op1823 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op1827(u16);
impl TokenField_op1827 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2020(u8);
impl TokenField_op2020 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2023(u8);
impl TokenField_op2023 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2027(u8);
impl TokenField_op2027 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2122(u8);
impl TokenField_op2122 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2123(u8);
impl TokenField_op2123 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2127(u8);
impl TokenField_op2127 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2131(u16);
impl TokenField_op2131 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2225(u8);
impl TokenField_op2225 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2227(u8);
impl TokenField_op2227 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop2227(i8);
impl TokenField_sop2227 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2327(u8);
impl TokenField_op2327 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd2427(u8);
impl TokenField_Rd2427 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Re2427(u8);
impl TokenField_Re2427 {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ree2427(u8);
impl TokenField_Ree2427 {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Reo2427(u8);
impl TokenField_Reo2427 {
    fn execution(&self) -> Register {
        meaning_4_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_4_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2627(u8);
impl TokenField_op2627 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Rd2831(u8);
impl TokenField_Rd2831 {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ra2831(u8);
impl TokenField_Ra2831 {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Re2831(u8);
impl TokenField_Re2831 {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Ree2831(u8);
impl TokenField_Ree2831 {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_Reo2831(u8);
impl TokenField_Reo2831 {
    fn execution(&self) -> Register {
        meaning_4_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_4_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op2831(u8);
impl TokenField_op2831 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_sop2831(i8);
impl TokenField_sop2831 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_op3131(u8);
impl TokenField_op3131 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0000(u8);
impl TokenField_pcp_op0000 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0001(u8);
impl TokenField_pcp_op0001 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0002(u8);
impl TokenField_pcp_op0002 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ccAB(u8);
impl TokenField_ccAB {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ccA(u8);
impl TokenField_ccA {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0004(u8);
impl TokenField_pcp_op0004 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0005(u8);
impl TokenField_pcp_op0005 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0009(u16);
impl TokenField_pcp_op0009 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0010(u16);
impl TokenField_pcp_op0010 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0101(u8);
impl TokenField_pcp_op0101 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0202(u8);
impl TokenField_pcp_op0202 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0203(u8);
impl TokenField_pcp_op0203 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0204(u8);
impl TokenField_pcp_op0204 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0303(u8);
impl TokenField_pcp_op0303 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_R0305(u8);
impl TokenField_R0305 {
    fn execution(&self) -> Register {
        meaning_9_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_9_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0404(u8);
impl TokenField_pcp_op0404 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0405(u8);
impl TokenField_pcp_op0405 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0406(u8);
impl TokenField_pcp_op0406 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0505(u8);
impl TokenField_pcp_op0505 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0506(u8);
impl TokenField_pcp_op0506 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_R0608(u8);
impl TokenField_R0608 {
    fn execution(&self) -> Register {
        meaning_9_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_9_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_ccB(u8);
impl TokenField_ccB {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0707(u8);
impl TokenField_pcp_op0707 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0708(u8);
impl TokenField_pcp_op0708 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0808(u8);
impl TokenField_pcp_op0808 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0909(u8);
impl TokenField_pcp_op0909 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0910(u8);
impl TokenField_pcp_op0910 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op0912(u8);
impl TokenField_pcp_op0912 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1010(u8);
impl TokenField_pcp_op1010 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1012(u8);
impl TokenField_pcp_op1012 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1111(u8);
impl TokenField_pcp_op1111 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1212(u8);
impl TokenField_pcp_op1212 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_addrmode(u8);
impl TokenField_addrmode {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_pcp_op1631(u16);
impl TokenField_pcp_op1631 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
struct TokenParser<const LEN: usize>([u8; LEN]);
impl<const LEN: usize> MemoryRead for TokenParser<LEN> {
    type AddressType = usize;
    fn read(
        &self,
        addr: Self::AddressType,
        buf: &mut [u8],
    ) -> Result<(), MemoryReadError<Self::AddressType>> {
        let end = addr + buf.len();
        self.0
            .get(addr..end)
            .map(|src| buf.copy_from_slice(src))
            .ok_or(MemoryReadError::UnableToReadMemory(addr, end))
    }
}
impl<const LEN: usize> TokenParser<LEN> {
    fn new(data: &[u8]) -> Option<Self> {
        let token_slice: &[u8] = data.get(..LEN)?;
        let token_data = <[u8; LEN]>::try_from(token_slice).unwrap();
        Some(Self(token_data))
    }
    fn TokenFieldop0003(&self) -> TokenField_op0003 {
        let inner_value = self.read_u8::<false>(0, 0, 4).unwrap();
        TokenField_op0003(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0005(&self) -> TokenField_op0005 {
        let inner_value = self.read_u8::<false>(0, 0, 6).unwrap();
        TokenField_op0005(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0006(&self) -> TokenField_op0006 {
        let inner_value = self.read_u8::<false>(0, 0, 7).unwrap();
        TokenField_op0006(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0007(&self) -> TokenField_op0007 {
        let inner_value = self.read_u8::<false>(0, 0, 8).unwrap();
        TokenField_op0007(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0404(&self) -> TokenField_op0404 {
        let inner_value = self.read_u8::<false>(0, 4, 1).unwrap();
        TokenField_op0404(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0405(&self) -> TokenField_op0405 {
        let inner_value = self.read_u8::<false>(0, 4, 2).unwrap();
        TokenField_op0405(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0407(&self) -> TokenField_op0407 {
        let inner_value = self.read_u8::<false>(0, 4, 4).unwrap();
        TokenField_op0407(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0606(&self) -> TokenField_op0606 {
        let inner_value = self.read_u8::<false>(0, 6, 1).unwrap();
        TokenField_op0606(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0607(&self) -> TokenField_op0607 {
        let inner_value = self.read_u8::<false>(0, 6, 2).unwrap();
        TokenField_op0607(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0707(&self) -> TokenField_op0707 {
        let inner_value = self.read_u8::<false>(0, 7, 1).unwrap();
        TokenField_op0707(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0810(&self) -> TokenField_op0810 {
        let inner_value = self.read_u8::<false>(1, 0, 3).unwrap();
        TokenField_op0810(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRd0811(&self) -> TokenField_Rd0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Rd0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRa0811(&self) -> TokenField_Ra0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Ra0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRe0811(&self) -> TokenField_Re0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Re0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRee0811(&self) -> TokenField_Ree0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Ree0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldReo0811(&self) -> TokenField_Reo0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Reo0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldReN0811(&self) -> TokenField_ReN0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_ReN0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0811(&self) -> TokenField_op0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_op0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRp0811(&self) -> TokenField_Rp0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Rp0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRpe0811(&self) -> TokenField_Rpe0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Rpe0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRpo0811(&self) -> TokenField_Rpo0811 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Rpo0811(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop0815(&self) -> TokenField_op0815 {
        let inner_value = self.read_u8::<false>(1, 0, 8).unwrap();
        TokenField_op0815(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldsop0815(&self) -> TokenField_sop0815 {
        let inner_value = self.read_i8::<false>(1, 0, 8).unwrap();
        TokenField_sop0815(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1111(&self) -> TokenField_op1111 {
        let inner_value = self.read_u8::<false>(1, 3, 1).unwrap();
        TokenField_op1111(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRd1215(&self) -> TokenField_Rd1215 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Rd1215(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1215(&self) -> TokenField_op1215 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_op1215(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldsop1215(&self) -> TokenField_sop1215 {
        let inner_value = self.read_i8::<false>(1, 4, 4).unwrap();
        TokenField_sop1215(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRa1215(&self) -> TokenField_Ra1215 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Ra1215(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRpe1215(&self) -> TokenField_Rpe1215 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Rpe1215(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRpo1215(&self) -> TokenField_Rpo1215 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Rpo1215(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1515(&self) -> TokenField_op1515 {
        let inner_value = self.read_u8::<false>(1, 7, 1).unwrap();
        TokenField_op1515(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1617(&self) -> TokenField_op1617 {
        let inner_value = self.read_u8::<false>(0, 0, 2).unwrap();
        TokenField_op1617(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1620(&self) -> TokenField_op1620 {
        let inner_value = self.read_u8::<false>(0, 0, 5).unwrap();
        TokenField_op1620(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldsop1620(&self) -> TokenField_sop1620 {
        let inner_value = self.read_i8::<false>(0, 0, 5).unwrap();
        TokenField_sop1620(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1621(&self) -> TokenField_op1621 {
        let inner_value = self.read_u8::<false>(0, 0, 6).unwrap();
        TokenField_op1621(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1622(&self) -> TokenField_op1622 {
        let inner_value = self.read_u8::<false>(0, 0, 7).unwrap();
        TokenField_op1622(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1623(&self) -> TokenField_op1623 {
        let inner_value = self.read_u8::<false>(0, 0, 8).unwrap();
        TokenField_op1623(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1627(&self) -> TokenField_op1627 {
        let inner_value = self.read_u16::<false>(0, 0, 12).unwrap();
        TokenField_op1627(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldsop1627(&self) -> TokenField_sop1627 {
        let inner_value = self.read_i16::<false>(0, 0, 12).unwrap();
        TokenField_sop1627(i16::try_from(inner_value).unwrap())
    }
    fn TokenFieldsop1630(&self) -> TokenField_sop1630 {
        let inner_value = self.read_i16::<false>(0, 0, 15).unwrap();
        TokenField_sop1630(i16::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1631(&self) -> TokenField_op1631 {
        let inner_value = self.read_u16::<false>(0, 0, 16).unwrap();
        TokenField_op1631(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1819(&self) -> TokenField_op1819 {
        let inner_value = self.read_u8::<false>(0, 2, 2).unwrap();
        TokenField_op1819(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1823(&self) -> TokenField_op1823 {
        let inner_value = self.read_u8::<false>(0, 2, 6).unwrap();
        TokenField_op1823(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop1827(&self) -> TokenField_op1827 {
        let inner_value = self.read_u16::<false>(0, 2, 10).unwrap();
        TokenField_op1827(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2020(&self) -> TokenField_op2020 {
        let inner_value = self.read_u8::<false>(0, 4, 1).unwrap();
        TokenField_op2020(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2023(&self) -> TokenField_op2023 {
        let inner_value = self.read_u8::<false>(0, 4, 4).unwrap();
        TokenField_op2023(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2027(&self) -> TokenField_op2027 {
        let inner_value = self.read_u16::<false>(0, 4, 8).unwrap();
        TokenField_op2027(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2122(&self) -> TokenField_op2122 {
        let inner_value = self.read_u8::<false>(0, 5, 2).unwrap();
        TokenField_op2122(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2123(&self) -> TokenField_op2123 {
        let inner_value = self.read_u8::<false>(0, 5, 3).unwrap();
        TokenField_op2123(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2127(&self) -> TokenField_op2127 {
        let inner_value = self.read_u16::<false>(0, 5, 7).unwrap();
        TokenField_op2127(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2131(&self) -> TokenField_op2131 {
        let inner_value = self.read_u16::<false>(0, 5, 11).unwrap();
        TokenField_op2131(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2225(&self) -> TokenField_op2225 {
        let inner_value = self.read_u16::<false>(0, 6, 4).unwrap();
        TokenField_op2225(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2227(&self) -> TokenField_op2227 {
        let inner_value = self.read_u16::<false>(0, 6, 6).unwrap();
        TokenField_op2227(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldsop2227(&self) -> TokenField_sop2227 {
        let inner_value = self.read_i16::<false>(0, 6, 6).unwrap();
        TokenField_sop2227(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2327(&self) -> TokenField_op2327 {
        let inner_value = self.read_u16::<false>(0, 7, 5).unwrap();
        TokenField_op2327(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRd2427(&self) -> TokenField_Rd2427 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Rd2427(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRe2427(&self) -> TokenField_Re2427 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Re2427(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRee2427(&self) -> TokenField_Ree2427 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Ree2427(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldReo2427(&self) -> TokenField_Reo2427 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_Reo2427(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2627(&self) -> TokenField_op2627 {
        let inner_value = self.read_u8::<false>(1, 2, 2).unwrap();
        TokenField_op2627(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRd2831(&self) -> TokenField_Rd2831 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Rd2831(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRa2831(&self) -> TokenField_Ra2831 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Ra2831(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRe2831(&self) -> TokenField_Re2831 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Re2831(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldRee2831(&self) -> TokenField_Ree2831 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Ree2831(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldReo2831(&self) -> TokenField_Reo2831 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_Reo2831(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop2831(&self) -> TokenField_op2831 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_op2831(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldsop2831(&self) -> TokenField_sop2831 {
        let inner_value = self.read_i8::<false>(1, 4, 4).unwrap();
        TokenField_sop2831(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldop3131(&self) -> TokenField_op3131 {
        let inner_value = self.read_u8::<false>(1, 7, 1).unwrap();
        TokenField_op3131(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0000(&self) -> TokenField_pcp_op0000 {
        let inner_value = self.read_u8::<false>(0, 0, 1).unwrap();
        TokenField_pcp_op0000(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0001(&self) -> TokenField_pcp_op0001 {
        let inner_value = self.read_u8::<false>(0, 0, 2).unwrap();
        TokenField_pcp_op0001(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0002(&self) -> TokenField_pcp_op0002 {
        let inner_value = self.read_u8::<false>(0, 0, 3).unwrap();
        TokenField_pcp_op0002(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldccAB(&self) -> TokenField_ccAB {
        let inner_value = self.read_u8::<false>(0, 0, 4).unwrap();
        TokenField_ccAB(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldccA(&self) -> TokenField_ccA {
        let inner_value = self.read_u8::<false>(0, 0, 3).unwrap();
        TokenField_ccA(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0004(&self) -> TokenField_pcp_op0004 {
        let inner_value = self.read_u8::<false>(0, 0, 5).unwrap();
        TokenField_pcp_op0004(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0005(&self) -> TokenField_pcp_op0005 {
        let inner_value = self.read_u8::<false>(0, 0, 6).unwrap();
        TokenField_pcp_op0005(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0009(&self) -> TokenField_pcp_op0009 {
        let inner_value = self.read_u16::<false>(0, 0, 10).unwrap();
        TokenField_pcp_op0009(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0010(&self) -> TokenField_pcp_op0010 {
        let inner_value = self.read_u16::<false>(0, 0, 11).unwrap();
        TokenField_pcp_op0010(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0101(&self) -> TokenField_pcp_op0101 {
        let inner_value = self.read_u8::<false>(0, 1, 1).unwrap();
        TokenField_pcp_op0101(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0202(&self) -> TokenField_pcp_op0202 {
        let inner_value = self.read_u8::<false>(0, 2, 1).unwrap();
        TokenField_pcp_op0202(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0203(&self) -> TokenField_pcp_op0203 {
        let inner_value = self.read_u8::<false>(0, 2, 2).unwrap();
        TokenField_pcp_op0203(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0204(&self) -> TokenField_pcp_op0204 {
        let inner_value = self.read_u8::<false>(0, 2, 3).unwrap();
        TokenField_pcp_op0204(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0303(&self) -> TokenField_pcp_op0303 {
        let inner_value = self.read_u8::<false>(0, 3, 1).unwrap();
        TokenField_pcp_op0303(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldR0305(&self) -> TokenField_R0305 {
        let inner_value = self.read_u8::<false>(0, 3, 3).unwrap();
        TokenField_R0305(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0404(&self) -> TokenField_pcp_op0404 {
        let inner_value = self.read_u8::<false>(0, 4, 1).unwrap();
        TokenField_pcp_op0404(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0405(&self) -> TokenField_pcp_op0405 {
        let inner_value = self.read_u8::<false>(0, 4, 2).unwrap();
        TokenField_pcp_op0405(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0406(&self) -> TokenField_pcp_op0406 {
        let inner_value = self.read_u8::<false>(0, 4, 3).unwrap();
        TokenField_pcp_op0406(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0505(&self) -> TokenField_pcp_op0505 {
        let inner_value = self.read_u8::<false>(0, 5, 1).unwrap();
        TokenField_pcp_op0505(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0506(&self) -> TokenField_pcp_op0506 {
        let inner_value = self.read_u8::<false>(0, 5, 2).unwrap();
        TokenField_pcp_op0506(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldR0608(&self) -> TokenField_R0608 {
        let inner_value = self.read_u16::<false>(0, 6, 3).unwrap();
        TokenField_R0608(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldccB(&self) -> TokenField_ccB {
        let inner_value = self.read_u16::<false>(0, 6, 4).unwrap();
        TokenField_ccB(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0707(&self) -> TokenField_pcp_op0707 {
        let inner_value = self.read_u8::<false>(0, 7, 1).unwrap();
        TokenField_pcp_op0707(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0708(&self) -> TokenField_pcp_op0708 {
        let inner_value = self.read_u16::<false>(0, 7, 2).unwrap();
        TokenField_pcp_op0708(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0808(&self) -> TokenField_pcp_op0808 {
        let inner_value = self.read_u8::<false>(1, 0, 1).unwrap();
        TokenField_pcp_op0808(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0909(&self) -> TokenField_pcp_op0909 {
        let inner_value = self.read_u8::<false>(1, 1, 1).unwrap();
        TokenField_pcp_op0909(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0910(&self) -> TokenField_pcp_op0910 {
        let inner_value = self.read_u8::<false>(1, 1, 2).unwrap();
        TokenField_pcp_op0910(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op0912(&self) -> TokenField_pcp_op0912 {
        let inner_value = self.read_u8::<false>(1, 1, 4).unwrap();
        TokenField_pcp_op0912(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op1010(&self) -> TokenField_pcp_op1010 {
        let inner_value = self.read_u8::<false>(1, 2, 1).unwrap();
        TokenField_pcp_op1010(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op1012(&self) -> TokenField_pcp_op1012 {
        let inner_value = self.read_u8::<false>(1, 2, 3).unwrap();
        TokenField_pcp_op1012(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op1111(&self) -> TokenField_pcp_op1111 {
        let inner_value = self.read_u8::<false>(1, 3, 1).unwrap();
        TokenField_pcp_op1111(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op1212(&self) -> TokenField_pcp_op1212 {
        let inner_value = self.read_u8::<false>(1, 4, 1).unwrap();
        TokenField_pcp_op1212(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldaddrmode(&self) -> TokenField_addrmode {
        let inner_value = self.read_u8::<false>(1, 5, 3).unwrap();
        TokenField_addrmode(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldpcp_op1631(&self) -> TokenField_pcp_op1631 {
        let inner_value = self.read_u16::<false>(0, 0, 16).unwrap();
        TokenField_pcp_op1631(u16::try_from(inner_value).unwrap())
    }
}
#[derive(Clone, Copy, Debug)]
pub enum Register {
    contextreg,
    e0,
    e2,
    e4,
    e6,
    e8,
    e10,
    e12,
    e14,
    d0,
    d1,
    d2,
    d3,
    d4,
    d5,
    d6,
    d7,
    d8,
    d9,
    d10,
    d11,
    d12,
    d13,
    d14,
    d15,
    p0,
    p2,
    p4,
    p6,
    p8,
    p10,
    p12,
    p14,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    PC,
    PSW,
    PCXI,
    ISP,
    SYSCON,
    CPU_ID,
    CORE_ID,
    COMPAT,
    SMACON,
    FCX,
    LCX,
    ICR,
    PIPN,
    BIV,
    BTV,
    PSTR,
    DSTR,
    DATR,
    DEADD,
    PIETR,
    PIEAR,
    DIETR,
    DIEAR,
    PMA0,
    PMA1,
    PMA2,
    PCON1,
    PCON2,
    PCON0,
    DCON0,
    DCON1,
    DCON2,
    DPR0_L,
    DPR0_U,
    DPR1_L,
    DPR1_U,
    DPR2_L,
    DPR2_U,
    DPR3_L,
    DPR3_U,
    DPR4_L,
    DPR4_U,
    DPR5_L,
    DPR5_U,
    DPR6_L,
    DPR6_U,
    DPR7_L,
    DPR7_U,
    DPR8_L,
    DPR8_U,
    DPR9_L,
    DPR9_U,
    DPR10_L,
    DPR10_U,
    DPR11_L,
    DPR11_U,
    DPR12_L,
    DPR12_U,
    DPR13_L,
    DPR13_U,
    DPR14_L,
    DPR14_U,
    DPR15_L,
    DPR15_U,
    CPR0_L,
    CPR0_U,
    CPR1_L,
    CPR1_U,
    CPR2_L,
    CPR2_U,
    CPR3_L,
    CPR3_U,
    CPR4_L,
    CPR4_U,
    CPR5_L,
    CPR5_U,
    CPR6_L,
    CPR6_U,
    CPR7_L,
    CPR7_U,
    CPR8_L,
    CPR8_U,
    CPR9_L,
    CPR9_U,
    CPR10_L,
    CPR10_U,
    CPR11_L,
    CPR11_U,
    CPR12_L,
    CPR12_U,
    CPR13_L,
    CPR13_U,
    CPR14_L,
    CPR14_U,
    CPR15_L,
    CPR15_U,
    DPRE_0,
    DPRE_1,
    DPRE_2,
    DPRE_3,
    DPWE_0,
    DPWE_1,
    DPWE_2,
    DPWE_3,
    CPXE_0,
    CPXE_1,
    CPXE_2,
    CPXE_3,
    TPS_TIMER0,
    TPS_TIMER1,
    TPS_TIMER2,
    TPS_CON,
    FPU_TRAP_CON,
    FPU_TRAP_PC,
    FPU_TRAP_OPC,
    FPU_TRAP_SRC1,
    FPU_TRAP_SRC2,
    FPU_TRAP_SRC3,
    DBGSR,
    EXEVT,
    CREVT,
    SWEVT,
    TRIG_ACC,
    DMS,
    DCX,
    DBGTCR,
    TASK_ASI,
    TR0EVT,
    TR0ADR,
    TR1EVT,
    TR1ADR,
    TR2EVT,
    TRA2DR,
    TR3EVT,
    TR3ADR,
    TR4EVT,
    TR4ADR,
    TR5EVT,
    TR5ADR,
    TR6EVT,
    TR6ADR,
    TR7EVT,
    TR7ADR,
    CCTRL,
    CCNT,
    ICNT,
    M1CNT,
    M2CNT,
    M3CNT,
    R0,
    R1,
    R2,
    R3,
    R4,
    R5,
    R6,
    R7,
}
impl core::fmt::Display for Register {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::contextreg => write!(f, "contextreg"),
            Self::e0 => write!(f, "e0"),
            Self::e2 => write!(f, "e2"),
            Self::e4 => write!(f, "e4"),
            Self::e6 => write!(f, "e6"),
            Self::e8 => write!(f, "e8"),
            Self::e10 => write!(f, "e10"),
            Self::e12 => write!(f, "e12"),
            Self::e14 => write!(f, "e14"),
            Self::d0 => write!(f, "d0"),
            Self::d1 => write!(f, "d1"),
            Self::d2 => write!(f, "d2"),
            Self::d3 => write!(f, "d3"),
            Self::d4 => write!(f, "d4"),
            Self::d5 => write!(f, "d5"),
            Self::d6 => write!(f, "d6"),
            Self::d7 => write!(f, "d7"),
            Self::d8 => write!(f, "d8"),
            Self::d9 => write!(f, "d9"),
            Self::d10 => write!(f, "d10"),
            Self::d11 => write!(f, "d11"),
            Self::d12 => write!(f, "d12"),
            Self::d13 => write!(f, "d13"),
            Self::d14 => write!(f, "d14"),
            Self::d15 => write!(f, "d15"),
            Self::p0 => write!(f, "p0"),
            Self::p2 => write!(f, "p2"),
            Self::p4 => write!(f, "p4"),
            Self::p6 => write!(f, "p6"),
            Self::p8 => write!(f, "p8"),
            Self::p10 => write!(f, "p10"),
            Self::p12 => write!(f, "p12"),
            Self::p14 => write!(f, "p14"),
            Self::a0 => write!(f, "a0"),
            Self::a1 => write!(f, "a1"),
            Self::a2 => write!(f, "a2"),
            Self::a3 => write!(f, "a3"),
            Self::a4 => write!(f, "a4"),
            Self::a5 => write!(f, "a5"),
            Self::a6 => write!(f, "a6"),
            Self::a7 => write!(f, "a7"),
            Self::a8 => write!(f, "a8"),
            Self::a9 => write!(f, "a9"),
            Self::a10 => write!(f, "a10"),
            Self::a11 => write!(f, "a11"),
            Self::a12 => write!(f, "a12"),
            Self::a13 => write!(f, "a13"),
            Self::a14 => write!(f, "a14"),
            Self::a15 => write!(f, "a15"),
            Self::PC => write!(f, "PC"),
            Self::PSW => write!(f, "PSW"),
            Self::PCXI => write!(f, "PCXI"),
            Self::ISP => write!(f, "ISP"),
            Self::SYSCON => write!(f, "SYSCON"),
            Self::CPU_ID => write!(f, "CPU_ID"),
            Self::CORE_ID => write!(f, "CORE_ID"),
            Self::COMPAT => write!(f, "COMPAT"),
            Self::SMACON => write!(f, "SMACON"),
            Self::FCX => write!(f, "FCX"),
            Self::LCX => write!(f, "LCX"),
            Self::ICR => write!(f, "ICR"),
            Self::PIPN => write!(f, "PIPN"),
            Self::BIV => write!(f, "BIV"),
            Self::BTV => write!(f, "BTV"),
            Self::PSTR => write!(f, "PSTR"),
            Self::DSTR => write!(f, "DSTR"),
            Self::DATR => write!(f, "DATR"),
            Self::DEADD => write!(f, "DEADD"),
            Self::PIETR => write!(f, "PIETR"),
            Self::PIEAR => write!(f, "PIEAR"),
            Self::DIETR => write!(f, "DIETR"),
            Self::DIEAR => write!(f, "DIEAR"),
            Self::PMA0 => write!(f, "PMA0"),
            Self::PMA1 => write!(f, "PMA1"),
            Self::PMA2 => write!(f, "PMA2"),
            Self::PCON1 => write!(f, "PCON1"),
            Self::PCON2 => write!(f, "PCON2"),
            Self::PCON0 => write!(f, "PCON0"),
            Self::DCON0 => write!(f, "DCON0"),
            Self::DCON1 => write!(f, "DCON1"),
            Self::DCON2 => write!(f, "DCON2"),
            Self::DPR0_L => write!(f, "DPR0_L"),
            Self::DPR0_U => write!(f, "DPR0_U"),
            Self::DPR1_L => write!(f, "DPR1_L"),
            Self::DPR1_U => write!(f, "DPR1_U"),
            Self::DPR2_L => write!(f, "DPR2_L"),
            Self::DPR2_U => write!(f, "DPR2_U"),
            Self::DPR3_L => write!(f, "DPR3_L"),
            Self::DPR3_U => write!(f, "DPR3_U"),
            Self::DPR4_L => write!(f, "DPR4_L"),
            Self::DPR4_U => write!(f, "DPR4_U"),
            Self::DPR5_L => write!(f, "DPR5_L"),
            Self::DPR5_U => write!(f, "DPR5_U"),
            Self::DPR6_L => write!(f, "DPR6_L"),
            Self::DPR6_U => write!(f, "DPR6_U"),
            Self::DPR7_L => write!(f, "DPR7_L"),
            Self::DPR7_U => write!(f, "DPR7_U"),
            Self::DPR8_L => write!(f, "DPR8_L"),
            Self::DPR8_U => write!(f, "DPR8_U"),
            Self::DPR9_L => write!(f, "DPR9_L"),
            Self::DPR9_U => write!(f, "DPR9_U"),
            Self::DPR10_L => write!(f, "DPR10_L"),
            Self::DPR10_U => write!(f, "DPR10_U"),
            Self::DPR11_L => write!(f, "DPR11_L"),
            Self::DPR11_U => write!(f, "DPR11_U"),
            Self::DPR12_L => write!(f, "DPR12_L"),
            Self::DPR12_U => write!(f, "DPR12_U"),
            Self::DPR13_L => write!(f, "DPR13_L"),
            Self::DPR13_U => write!(f, "DPR13_U"),
            Self::DPR14_L => write!(f, "DPR14_L"),
            Self::DPR14_U => write!(f, "DPR14_U"),
            Self::DPR15_L => write!(f, "DPR15_L"),
            Self::DPR15_U => write!(f, "DPR15_U"),
            Self::CPR0_L => write!(f, "CPR0_L"),
            Self::CPR0_U => write!(f, "CPR0_U"),
            Self::CPR1_L => write!(f, "CPR1_L"),
            Self::CPR1_U => write!(f, "CPR1_U"),
            Self::CPR2_L => write!(f, "CPR2_L"),
            Self::CPR2_U => write!(f, "CPR2_U"),
            Self::CPR3_L => write!(f, "CPR3_L"),
            Self::CPR3_U => write!(f, "CPR3_U"),
            Self::CPR4_L => write!(f, "CPR4_L"),
            Self::CPR4_U => write!(f, "CPR4_U"),
            Self::CPR5_L => write!(f, "CPR5_L"),
            Self::CPR5_U => write!(f, "CPR5_U"),
            Self::CPR6_L => write!(f, "CPR6_L"),
            Self::CPR6_U => write!(f, "CPR6_U"),
            Self::CPR7_L => write!(f, "CPR7_L"),
            Self::CPR7_U => write!(f, "CPR7_U"),
            Self::CPR8_L => write!(f, "CPR8_L"),
            Self::CPR8_U => write!(f, "CPR8_U"),
            Self::CPR9_L => write!(f, "CPR9_L"),
            Self::CPR9_U => write!(f, "CPR9_U"),
            Self::CPR10_L => write!(f, "CPR10_L"),
            Self::CPR10_U => write!(f, "CPR10_U"),
            Self::CPR11_L => write!(f, "CPR11_L"),
            Self::CPR11_U => write!(f, "CPR11_U"),
            Self::CPR12_L => write!(f, "CPR12_L"),
            Self::CPR12_U => write!(f, "CPR12_U"),
            Self::CPR13_L => write!(f, "CPR13_L"),
            Self::CPR13_U => write!(f, "CPR13_U"),
            Self::CPR14_L => write!(f, "CPR14_L"),
            Self::CPR14_U => write!(f, "CPR14_U"),
            Self::CPR15_L => write!(f, "CPR15_L"),
            Self::CPR15_U => write!(f, "CPR15_U"),
            Self::DPRE_0 => write!(f, "DPRE_0"),
            Self::DPRE_1 => write!(f, "DPRE_1"),
            Self::DPRE_2 => write!(f, "DPRE_2"),
            Self::DPRE_3 => write!(f, "DPRE_3"),
            Self::DPWE_0 => write!(f, "DPWE_0"),
            Self::DPWE_1 => write!(f, "DPWE_1"),
            Self::DPWE_2 => write!(f, "DPWE_2"),
            Self::DPWE_3 => write!(f, "DPWE_3"),
            Self::CPXE_0 => write!(f, "CPXE_0"),
            Self::CPXE_1 => write!(f, "CPXE_1"),
            Self::CPXE_2 => write!(f, "CPXE_2"),
            Self::CPXE_3 => write!(f, "CPXE_3"),
            Self::TPS_TIMER0 => write!(f, "TPS_TIMER0"),
            Self::TPS_TIMER1 => write!(f, "TPS_TIMER1"),
            Self::TPS_TIMER2 => write!(f, "TPS_TIMER2"),
            Self::TPS_CON => write!(f, "TPS_CON"),
            Self::FPU_TRAP_CON => write!(f, "FPU_TRAP_CON"),
            Self::FPU_TRAP_PC => write!(f, "FPU_TRAP_PC"),
            Self::FPU_TRAP_OPC => write!(f, "FPU_TRAP_OPC"),
            Self::FPU_TRAP_SRC1 => write!(f, "FPU_TRAP_SRC1"),
            Self::FPU_TRAP_SRC2 => write!(f, "FPU_TRAP_SRC2"),
            Self::FPU_TRAP_SRC3 => write!(f, "FPU_TRAP_SRC3"),
            Self::DBGSR => write!(f, "DBGSR"),
            Self::EXEVT => write!(f, "EXEVT"),
            Self::CREVT => write!(f, "CREVT"),
            Self::SWEVT => write!(f, "SWEVT"),
            Self::TRIG_ACC => write!(f, "TRIG_ACC"),
            Self::DMS => write!(f, "DMS"),
            Self::DCX => write!(f, "DCX"),
            Self::DBGTCR => write!(f, "DBGTCR"),
            Self::TASK_ASI => write!(f, "TASK_ASI"),
            Self::TR0EVT => write!(f, "TR0EVT"),
            Self::TR0ADR => write!(f, "TR0ADR"),
            Self::TR1EVT => write!(f, "TR1EVT"),
            Self::TR1ADR => write!(f, "TR1ADR"),
            Self::TR2EVT => write!(f, "TR2EVT"),
            Self::TRA2DR => write!(f, "TRA2DR"),
            Self::TR3EVT => write!(f, "TR3EVT"),
            Self::TR3ADR => write!(f, "TR3ADR"),
            Self::TR4EVT => write!(f, "TR4EVT"),
            Self::TR4ADR => write!(f, "TR4ADR"),
            Self::TR5EVT => write!(f, "TR5EVT"),
            Self::TR5ADR => write!(f, "TR5ADR"),
            Self::TR6EVT => write!(f, "TR6EVT"),
            Self::TR6ADR => write!(f, "TR6ADR"),
            Self::TR7EVT => write!(f, "TR7EVT"),
            Self::TR7ADR => write!(f, "TR7ADR"),
            Self::CCTRL => write!(f, "CCTRL"),
            Self::CCNT => write!(f, "CCNT"),
            Self::ICNT => write!(f, "ICNT"),
            Self::M1CNT => write!(f, "M1CNT"),
            Self::M2CNT => write!(f, "M2CNT"),
            Self::M3CNT => write!(f, "M3CNT"),
            Self::R0 => write!(f, "R0"),
            Self::R1 => write!(f, "R1"),
            Self::R2 => write!(f, "R2"),
            Self::R3 => write!(f, "R3"),
            Self::R4 => write!(f, "R4"),
            Self::R5 => write!(f, "R5"),
            Self::R6 => write!(f, "R6"),
            Self::R7 => write!(f, "R7"),
        }
    }
}
#[derive(Clone, Copy, Debug)]
pub enum DisplayElement {
    Literal(&'static str),
    Register(Register),
    Number(bool, i128),
}
impl core::fmt::Display for DisplayElement {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Literal(lit) => lit.fmt(f),
            Self::Register(reg) => reg.fmt(f),
            Self::Number(hex, value) => match (*hex, value.is_negative()) {
                (true, true) => write!(f, "-0x{:x}", value.abs()),
                (true, false) => write!(f, "0x{:x}", value),
                (false, _) => value.fmt(f),
            },
        }
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2007:1, end:2007:2))"]
#[derive(Clone, Debug)]
struct debug_instructionVar0 {}
impl debug_instructionVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("debug")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 256i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2028:1, end:2028:2))"]
#[derive(Clone, Debug)]
struct disable_instructionVar1 {}
impl disable_instructionVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("disable")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 832i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2076:1, end:2076:2))"]
#[derive(Clone, Debug)]
struct dsync_instructionVar2 {}
impl dsync_instructionVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("dsync")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1152i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2254:1, end:2254:2))"]
#[derive(Clone, Debug)]
struct enable_instructionVar3 {}
impl enable_instructionVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("enable")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 768i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2453:1, end:2453:2))"]
#[derive(Clone, Debug)]
struct fret_instructionVar4 {}
impl fret_instructionVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("fret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop2227().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2663:1, end:2663:2))"]
#[derive(Clone, Debug)]
struct isync_instructionVar5 {}
impl isync_instructionVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("isync")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1216i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2910:1, end:2910:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar6 {}
impl ji_instructionVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("ji"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a11),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 48i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6806:1, end:6806:2))"]
#[derive(Clone, Debug)]
struct nop_instructionVar7 {}
impl nop_instructionVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nop")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7109:1, end:7109:2))"]
#[derive(Clone, Debug)]
struct ret_instructionVar8 {}
impl ret_instructionVar8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("ret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 384i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7152:1, end:7152:2))"]
#[derive(Clone, Debug)]
struct rfe_instructionVar9 {}
impl rfe_instructionVar9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("rfe")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 448i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7175:1, end:7175:2))"]
#[derive(Clone, Debug)]
struct rfm_instructionVar10 {}
impl rfm_instructionVar10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("rfm")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 320i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7197:1, end:7197:2))"]
#[derive(Clone, Debug)]
struct rslcx_instructionVar11 {}
impl rslcx_instructionVar11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("rslcx")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 576i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7210:1, end:7210:2))"]
#[derive(Clone, Debug)]
struct rstv_instructionVar12 {}
impl rstv_instructionVar12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("rstv")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 47i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8230:1, end:8230:2))"]
#[derive(Clone, Debug)]
struct svlcx_instructionVar13 {}
impl svlcx_instructionVar13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("svlcx")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 512i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8317:1, end:8317:2))"]
#[derive(Clone, Debug)]
struct tlbflush_a_instructionVar14 {}
impl tlbflush_a_instructionVar14 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("tlbflush.a")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 64i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8324:1, end:8324:2))"]
#[derive(Clone, Debug)]
struct tlbflush_b_instructionVar15 {}
impl tlbflush_b_instructionVar15 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("tlbflush.b")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 80i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8352:1, end:8352:2))"]
#[derive(Clone, Debug)]
struct trapsv_instructionVar16 {}
impl trapsv_instructionVar16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("trapsv")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1344i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8360:1, end:8360:2))"]
#[derive(Clone, Debug)]
struct trapv_instructionVar17 {}
impl trapv_instructionVar17 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("trapv")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1280i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8403:1, end:8403:2))"]
#[derive(Clone, Debug)]
struct wait_instructionVar18 {}
impl wait_instructionVar18 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("wait")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop2227().disassembly() != 22i128 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:920:1, end:920:2))"]
#[derive(Clone, Debug)]
struct abs_instructionVar19 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl abs_instructionVar19 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 448i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:927:1, end:927:2))"]
#[derive(Clone, Debug)]
struct abs_b_instructionVar20 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl abs_b_instructionVar20 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abs.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1472i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:941:1, end:941:2))"]
#[derive(Clone, Debug)]
struct abs_h_instructionVar21 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl abs_h_instructionVar21 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1984i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1015:1, end:1015:2))"]
#[derive(Clone, Debug)]
struct abss_instructionVar22 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl abss_instructionVar22 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abss"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 464i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1023:1, end:1023:2))"]
#[derive(Clone, Debug)]
struct abss_h_instructionVar23 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl abss_h_instructionVar23 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("abss.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2000i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1813:1, end:1813:2))"]
#[derive(Clone, Debug)]
struct calli_instructionVar24 {
    Ra0811: TokenField_Ra0811,
}
impl calli_instructionVar24 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("calli"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2035:1, end:2035:2))"]
#[derive(Clone, Debug)]
struct disable_instructionVar25 {
    Rd0811: TokenField_Rd0811,
}
impl disable_instructionVar25 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("disable"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 960i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2429:1, end:2429:2))"]
#[derive(Clone, Debug)]
struct fcalli_instructionVar26 {
    Ra0811: TokenField_Ra0811,
}
impl fcalli_instructionVar26 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("fcalli"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 16i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2904:1, end:2904:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar27 {
    Ra0811: TokenField_Ra0811,
}
impl ji_instructionVar27 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("ji"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 48i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2942:1, end:2942:2))"]
#[derive(Clone, Debug)]
struct jli_instructionVar28 {
    Ra0811: TokenField_Ra0811,
}
impl jli_instructionVar28 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("jli"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 45i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 32i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7081:1, end:7081:2))"]
#[derive(Clone, Debug)]
struct restore_instructionVar29 {
    Rd0811: TokenField_Rd0811,
}
impl restore_instructionVar29 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("restore"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 896i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8310:1, end:8310:2))"]
#[derive(Clone, Debug)]
struct tlbdemap_instructionVar30 {
    Rd0811: TokenField_Rd0811,
}
impl tlbdemap_instructionVar30 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbdemap"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8331:1, end:8331:2))"]
#[derive(Clone, Debug)]
struct tlbmap_instructionVar31 {
    Re0811: TokenField_Re0811,
}
impl tlbmap_instructionVar31 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbmap"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 1024i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8338:1, end:8338:2))"]
#[derive(Clone, Debug)]
struct tlbprobe_a_instructionVar32 {
    Rd0811: TokenField_Rd0811,
}
impl tlbprobe_a_instructionVar32 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbprobe.a"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 128i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8345:1, end:8345:2))"]
#[derive(Clone, Debug)]
struct tlbprobe_i_instructionVar33 {
    Rd0811: TokenField_Rd0811,
}
impl tlbprobe_i_instructionVar33 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("tlbprobe.i"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 117i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 144i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8378:1, end:8378:2))"]
#[derive(Clone, Debug)]
struct updfl_instructionVar34 {
    Rd0811: TokenField_Rd0811,
}
impl updfl_instructionVar34 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("updfl"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 193i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1535:1, end:1535:2))"]
#[derive(Clone, Debug)]
struct bsplit_instructionVar35 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
}
impl bsplit_instructionVar35 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("bsplit"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 144i128 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Re2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1841:1, end:1841:2))"]
#[derive(Clone, Debug)]
struct clo_instructionVar36 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl clo_instructionVar36 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clo"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 448i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1847:1, end:1847:2))"]
#[derive(Clone, Debug)]
struct clo_h_instructionVar37 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl clo_h_instructionVar37 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clo.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2000i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1856:1, end:1856:2))"]
#[derive(Clone, Debug)]
struct cls_instructionVar38 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl cls_instructionVar38 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("cls"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 464i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1862:1, end:1862:2))"]
#[derive(Clone, Debug)]
struct cls_h_instructionVar39 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl cls_h_instructionVar39 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("cls.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2016i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1871:1, end:1871:2))"]
#[derive(Clone, Debug)]
struct clz_instructionVar40 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl clz_instructionVar40 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clz"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 432i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1877:1, end:1877:2))"]
#[derive(Clone, Debug)]
struct clz_h_instructionVar41 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl clz_h_instructionVar41 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clz.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1984i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2350:1, end:2350:2))"]
#[derive(Clone, Debug)]
struct eqz_a_instructionVar42 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
}
impl eqz_a_instructionVar42 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("eqz.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1152i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2465:1, end:2465:2))"]
#[derive(Clone, Debug)]
struct ftoi_instructionVar43 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl ftoi_instructionVar43 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftoi"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 257i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2475:1, end:2475:2))"]
#[derive(Clone, Debug)]
struct ftoiz_instructionVar44 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl ftoiz_instructionVar44 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftoiz"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 305i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2505:1, end:2505:2))"]
#[derive(Clone, Debug)]
struct ftou_instructionVar45 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl ftou_instructionVar45 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftou"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 289i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2515:1, end:2515:2))"]
#[derive(Clone, Debug)]
struct ftouz_instructionVar46 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl ftouz_instructionVar46 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ftouz"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 369i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2670:1, end:2670:2))"]
#[derive(Clone, Debug)]
struct itof_instructionVar47 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl itof_instructionVar47 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("itof"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 321i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3388:1, end:3388:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar48 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl ld_dd_instructionVar48 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 41i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 9i128 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3427:1, end:3427:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar49 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl ld_dd_instructionVar49 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 41i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 41i128 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5057:1, end:5057:2))"]
#[derive(Clone, Debug)]
struct mffr_instructionVar50 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl mffr_instructionVar50 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mffr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 465i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5170:1, end:5170:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar51 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
}
impl mov_instructionVar51 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 496i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5185:1, end:5185:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar52 {
    Re2831: TokenField_Re2831,
    Rd1215: TokenField_Rd1215,
}
impl mov_instructionVar52 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2048i128 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Re2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5220:1, end:5220:2))"]
#[derive(Clone, Debug)]
struct mov_a_instructionVar53 {
    Ra2831: TokenField_Ra2831,
    Rd1215: TokenField_Rd1215,
}
impl mov_a_instructionVar53 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1584i128 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd1215, Ra2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5234:1, end:5234:2))"]
#[derive(Clone, Debug)]
struct mov_aa_instructionVar54 {
    Ra2831: TokenField_Ra2831,
    Ra1215: TokenField_Ra1215,
}
impl mov_aa_instructionVar54 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.aa"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 0i128 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215, Ra2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5248:1, end:5248:2))"]
#[derive(Clone, Debug)]
struct mov_d_instructionVar55 {
    Rd2831: TokenField_Rd2831,
    Ra1215: TokenField_Ra1215,
}
impl mov_d_instructionVar55 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.d"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1216i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6379:1, end:6379:2))"]
#[derive(Clone, Debug)]
struct mtfr_instructionVar56 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mtfr_instructionVar56 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mtfr"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1631().disassembly() != 449i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6793:1, end:6793:2))"]
#[derive(Clone, Debug)]
struct nez_a_instructionVar57 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
}
impl nez_a_instructionVar57 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("nez.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1168i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7050:1, end:7050:2))"]
#[derive(Clone, Debug)]
struct parity_instructionVar58 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl parity_instructionVar58 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("parity"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7071:1, end:7071:2))"]
#[derive(Clone, Debug)]
struct qseed_f_instructionVar59 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl qseed_f_instructionVar59 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("qseed.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 401i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7261:1, end:7261:2))"]
#[derive(Clone, Debug)]
struct sat_b_instructionVar60 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl sat_b_instructionVar60 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1504i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7277:1, end:7277:2))"]
#[derive(Clone, Debug)]
struct sat_bu_instructionVar61 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl sat_bu_instructionVar61 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1520i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7293:1, end:7293:2))"]
#[derive(Clone, Debug)]
struct sat_h_instructionVar62 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl sat_h_instructionVar62 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2016i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7309:1, end:7309:2))"]
#[derive(Clone, Debug)]
struct sat_hu_instructionVar63 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl sat_hu_instructionVar63 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sat.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2032i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7848:1, end:7848:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar64 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl st_dd_instructionVar64 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 169i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 9i128 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7887:1, end:7887:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar65 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl st_dd_instructionVar65 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 169i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop1621().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldop2227().disassembly() != 41i128 {
                return None;
            }
            if token_parser.TokenFieldop2831().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8369:1, end:8369:2))"]
#[derive(Clone, Debug)]
struct unpack_instructionVar66 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
}
impl unpack_instructionVar66 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("unpack"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 128i128 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Re2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8392:1, end:8392:2))"]
#[derive(Clone, Debug)]
struct utof_instructionVar67 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
}
impl utof_instructionVar67 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("utof"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 353i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:951:1, end:951:2))"]
#[derive(Clone, Debug)]
struct absdif_instructionVar68 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl absdif_instructionVar68 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdif"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 224i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:965:1, end:965:2))"]
#[derive(Clone, Debug)]
struct absdif_b_instructionVar69 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl absdif_b_instructionVar69 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdif.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1248i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:979:1, end:979:2))"]
#[derive(Clone, Debug)]
struct absdif_h_instructionVar70 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl absdif_h_instructionVar70 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdif.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1760i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:989:1, end:989:2))"]
#[derive(Clone, Debug)]
struct absdifs_instructionVar71 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl absdifs_instructionVar71 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdifs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 240i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1005:1, end:1005:2))"]
#[derive(Clone, Debug)]
struct absdifs_h_instructionVar72 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl absdifs_h_instructionVar72 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("absdifs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1776i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1079:1, end:1079:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar73 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl add_instructionVar73 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 0i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1109:1, end:1109:2))"]
#[derive(Clone, Debug)]
struct add_a_instructionVar74 {
    Ra2831: TokenField_Ra2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl add_a_instructionVar74 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 16i128 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1115:1, end:1115:2))"]
#[derive(Clone, Debug)]
struct add_b_instructionVar75 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl add_b_instructionVar75 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1024i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1139:1, end:1139:2))"]
#[derive(Clone, Debug)]
struct add_h_instructionVar76 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl add_h_instructionVar76 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1536i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1149:1, end:1149:2))"]
#[derive(Clone, Debug)]
struct addc_instructionVar77 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl addc_instructionVar77 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("addc"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 80i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1195:1, end:1195:2))"]
#[derive(Clone, Debug)]
struct adds_instructionVar78 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl adds_instructionVar78 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1211:1, end:1211:2))"]
#[derive(Clone, Debug)]
struct adds_h_instructionVar79 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl adds_h_instructionVar79 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1568i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1221:1, end:1221:2))"]
#[derive(Clone, Debug)]
struct adds_hu_instructionVar80 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl adds_hu_instructionVar80 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1584i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1231:1, end:1231:2))"]
#[derive(Clone, Debug)]
struct adds_u_instructionVar81 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl adds_u_instructionVar81 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("adds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 48i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1264:1, end:1264:2))"]
#[derive(Clone, Debug)]
struct addsc_at_instructionVar82 {
    Ra2831: TokenField_Ra2831,
    Ra1215: TokenField_Ra1215,
    Rd0811: TokenField_Rd0811,
}
impl addsc_at_instructionVar82 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("addsc.at"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1568i128 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra1215,
                Rd0811,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1271:1, end:1271:2))"]
#[derive(Clone, Debug)]
struct addx_instructionVar83 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl addx_instructionVar83 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("addx"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 64i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1305:1, end:1305:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar84 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_instructionVar84 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 128i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1333:1, end:1333:2))"]
#[derive(Clone, Debug)]
struct and_eq_instructionVar85 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_eq_instructionVar85 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 512i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1345:1, end:1345:2))"]
#[derive(Clone, Debug)]
struct and_ge_instructionVar86 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_ge_instructionVar86 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 576i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1357:1, end:1357:2))"]
#[derive(Clone, Debug)]
struct and_ge_u_instructionVar87 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_ge_u_instructionVar87 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 592i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1369:1, end:1369:2))"]
#[derive(Clone, Debug)]
struct and_lt_instructionVar88 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_lt_instructionVar88 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 544i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1381:1, end:1381:2))"]
#[derive(Clone, Debug)]
struct and_lt_u_instructionVar89 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_lt_u_instructionVar89 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 560i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1393:1, end:1393:2))"]
#[derive(Clone, Debug)]
struct and_ne_instructionVar90 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_ne_instructionVar90 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("and.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 528i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1429:1, end:1429:2))"]
#[derive(Clone, Debug)]
struct andn_instructionVar91 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl andn_instructionVar91 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("andn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 224i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1491:1, end:1491:2))"]
#[derive(Clone, Debug)]
struct bmerge_instructionVar92 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl bmerge_instructionVar92 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("bmerge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 16i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1939:1, end:1939:2))"]
#[derive(Clone, Debug)]
struct cmp_f_instructionVar93 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl cmp_f_instructionVar93 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmp.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1973:1, end:1973:2))"]
#[derive(Clone, Debug)]
struct crc32_instructionVar94 {
    Rd2831: TokenField_Rd2831,
    Rd1215: TokenField_Rd1215,
    Rd0811: TokenField_Rd0811,
}
impl crc32_instructionVar94 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("crc32"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 48i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2043:1, end:2043:2))"]
#[derive(Clone, Debug)]
struct div_instructionVar95 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl div_instructionVar95 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("div"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 513i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2054:1, end:2054:2))"]
#[derive(Clone, Debug)]
struct div_u_instructionVar96 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl div_u_instructionVar96 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("div.u"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 529i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2066:1, end:2066:2))"]
#[derive(Clone, Debug)]
struct div_f_instructionVar97 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl div_f_instructionVar97 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("div.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 81i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2105:1, end:2105:2))"]
#[derive(Clone, Debug)]
struct dvinit_instructionVar98 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl dvinit_instructionVar98 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 416i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2122:1, end:2122:2))"]
#[derive(Clone, Debug)]
struct dvinit_b_instructionVar99 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl dvinit_b_instructionVar99 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.b"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1440i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2138:1, end:2138:2))"]
#[derive(Clone, Debug)]
struct dvinit_bu_instructionVar100 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl dvinit_bu_instructionVar100 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.bu"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1184i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2154:1, end:2154:2))"]
#[derive(Clone, Debug)]
struct dvinit_h_instructionVar101 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl dvinit_h_instructionVar101 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 928i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2171:1, end:2171:2))"]
#[derive(Clone, Debug)]
struct dvinit_hu_instructionVar102 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl dvinit_hu_instructionVar102 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.hu"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 672i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2187:1, end:2187:2))"]
#[derive(Clone, Debug)]
struct dvinit_u_instructionVar103 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl dvinit_u_instructionVar103 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dvinit.u"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 160i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2272:1, end:2272:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar104 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl eq_instructionVar104 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 256i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2284:1, end:2284:2))"]
#[derive(Clone, Debug)]
struct eq_a_instructionVar105 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl eq_a_instructionVar105 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1024i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2290:1, end:2290:2))"]
#[derive(Clone, Debug)]
struct eq_b_instructionVar106 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl eq_b_instructionVar106 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1280i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2300:1, end:2300:2))"]
#[derive(Clone, Debug)]
struct eq_h_instructionVar107 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl eq_h_instructionVar107 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1792i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2308:1, end:2308:2))"]
#[derive(Clone, Debug)]
struct eq_w_instructionVar108 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl eq_w_instructionVar108 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq.w"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2304i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2314:1, end:2314:2))"]
#[derive(Clone, Debug)]
struct eqany_b_instructionVar109 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl eqany_b_instructionVar109 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eqany.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1376i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2334:1, end:2334:2))"]
#[derive(Clone, Debug)]
struct eqany_h_instructionVar110 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl eqany_h_instructionVar110 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eqany.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1888i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2486:1, end:2486:2))"]
#[derive(Clone, Debug)]
struct ftoq31_instructionVar111 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl ftoq31_instructionVar111 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ftoq31"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 273i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2495:1, end:2495:2))"]
#[derive(Clone, Debug)]
struct ftoq31z_instructionVar112 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl ftoq31z_instructionVar112 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ftoq31z"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 385i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2525:1, end:2525:2))"]
#[derive(Clone, Debug)]
struct ge_instructionVar113 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl ge_instructionVar113 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 320i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2537:1, end:2537:2))"]
#[derive(Clone, Debug)]
struct ge_a_instructionVar114 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl ge_a_instructionVar114 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ge.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1072i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2543:1, end:2543:2))"]
#[derive(Clone, Debug)]
struct ge_u_instructionVar115 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl ge_u_instructionVar115 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 336i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3739:1, end:3739:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar116 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_instructionVar116 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 288i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3751:1, end:3751:2))"]
#[derive(Clone, Debug)]
struct lt_a_instructionVar117 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl lt_a_instructionVar117 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1056i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3757:1, end:3757:2))"]
#[derive(Clone, Debug)]
struct lt_b_instructionVar118 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_b_instructionVar118 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1312i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3767:1, end:3767:2))"]
#[derive(Clone, Debug)]
struct lt_bu_instructionVar119 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_bu_instructionVar119 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1328i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3777:1, end:3777:2))"]
#[derive(Clone, Debug)]
struct lt_h_instructionVar120 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_h_instructionVar120 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1824i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3785:1, end:3785:2))"]
#[derive(Clone, Debug)]
struct lt_hu_instructionVar121 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_hu_instructionVar121 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1840i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3793:1, end:3793:2))"]
#[derive(Clone, Debug)]
struct lt_u_instructionVar122 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_u_instructionVar122 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 304i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3805:1, end:3805:2))"]
#[derive(Clone, Debug)]
struct lt_w_instructionVar123 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_w_instructionVar123 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.w"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2336i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3811:1, end:3811:2))"]
#[derive(Clone, Debug)]
struct lt_wu_instructionVar124 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_wu_instructionVar124 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt.wu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2352i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4979:1, end:4979:2))"]
#[derive(Clone, Debug)]
struct max_instructionVar125 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl max_instructionVar125 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 416i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4991:1, end:4991:2))"]
#[derive(Clone, Debug)]
struct max_b_instructionVar126 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl max_b_instructionVar126 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1440i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5005:1, end:5005:2))"]
#[derive(Clone, Debug)]
struct max_bu_instructionVar127 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl max_bu_instructionVar127 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1456i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5019:1, end:5019:2))"]
#[derive(Clone, Debug)]
struct max_h_instructionVar128 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl max_h_instructionVar128 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1952i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5029:1, end:5029:2))"]
#[derive(Clone, Debug)]
struct max_hu_instructionVar129 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl max_hu_instructionVar129 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1968i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5039:1, end:5039:2))"]
#[derive(Clone, Debug)]
struct max_u_instructionVar130 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl max_u_instructionVar130 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("max.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 432i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5064:1, end:5064:2))"]
#[derive(Clone, Debug)]
struct min_instructionVar131 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl min_instructionVar131 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 384i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5076:1, end:5076:2))"]
#[derive(Clone, Debug)]
struct min_b_instructionVar132 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl min_b_instructionVar132 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1408i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5090:1, end:5090:2))"]
#[derive(Clone, Debug)]
struct min_bu_instructionVar133 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl min_bu_instructionVar133 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.bu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1424i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5104:1, end:5104:2))"]
#[derive(Clone, Debug)]
struct min_h_instructionVar134 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl min_h_instructionVar134 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1920i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5114:1, end:5114:2))"]
#[derive(Clone, Debug)]
struct min_hu_instructionVar135 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl min_hu_instructionVar135 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1936i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5124:1, end:5124:2))"]
#[derive(Clone, Debug)]
struct min_u_instructionVar136 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl min_u_instructionVar136 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("min.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 400i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5193:1, end:5193:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar137 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mov_instructionVar137 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2064i128 {
            return None;
        }
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6401:1, end:6401:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar138 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mul_instructionVar138 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 10i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6419:1, end:6419:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar139 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mul_instructionVar139 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 106i128 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6428:1, end:6428:2))"]
#[derive(Clone, Debug)]
struct mul_f_instructionVar140 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mul_f_instructionVar140 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 65i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6575:1, end:6575:2))"]
#[derive(Clone, Debug)]
struct mul_u_instructionVar141 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mul_u_instructionVar141 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("mul.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 104i128 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6728:1, end:6728:2))"]
#[derive(Clone, Debug)]
struct muls_instructionVar142 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl muls_instructionVar142 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("muls"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 138i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6746:1, end:6746:2))"]
#[derive(Clone, Debug)]
struct muls_u_instructionVar143 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl muls_u_instructionVar143 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("muls.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 115i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 136i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6755:1, end:6755:2))"]
#[derive(Clone, Debug)]
struct nand_instructionVar144 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl nand_instructionVar144 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("nand"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 144i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6775:1, end:6775:2))"]
#[derive(Clone, Debug)]
struct ne_instructionVar145 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl ne_instructionVar145 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 272i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6787:1, end:6787:2))"]
#[derive(Clone, Debug)]
struct ne_a_instructionVar146 {
    Rd2831: TokenField_Rd2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl ne_a_instructionVar146 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ne.a"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1040i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6821:1, end:6821:2))"]
#[derive(Clone, Debug)]
struct nor_instructionVar147 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl nor_instructionVar147 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("nor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 176i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6857:1, end:6857:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar148 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_instructionVar148 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 160i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6889:1, end:6889:2))"]
#[derive(Clone, Debug)]
struct or_eq_instructionVar149 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_eq_instructionVar149 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 624i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6901:1, end:6901:2))"]
#[derive(Clone, Debug)]
struct or_ge_instructionVar150 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_ge_instructionVar150 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 688i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6913:1, end:6913:2))"]
#[derive(Clone, Debug)]
struct or_ge_u_instructionVar151 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_ge_u_instructionVar151 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 704i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6925:1, end:6925:2))"]
#[derive(Clone, Debug)]
struct or_lt_instructionVar152 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_lt_instructionVar152 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 656i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6937:1, end:6937:2))"]
#[derive(Clone, Debug)]
struct or_lt_u_instructionVar153 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_lt_u_instructionVar153 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 672i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6949:1, end:6949:2))"]
#[derive(Clone, Debug)]
struct or_ne_instructionVar154 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_ne_instructionVar154 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("or.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 640i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6989:1, end:6989:2))"]
#[derive(Clone, Debug)]
struct orn_instructionVar155 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl orn_instructionVar155 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("orn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 240i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7062:1, end:7062:2))"]
#[derive(Clone, Debug)]
struct q31tof_instructionVar156 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl q31tof_instructionVar156 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("q31tof"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 337i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7355:1, end:7355:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar157 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_instructionVar157 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 0i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7394:1, end:7394:2))"]
#[derive(Clone, Debug)]
struct sh_eq_instructionVar158 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_eq_instructionVar158 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 880i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7406:1, end:7406:2))"]
#[derive(Clone, Debug)]
struct sh_ge_instructionVar159 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_ge_instructionVar159 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 944i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7418:1, end:7418:2))"]
#[derive(Clone, Debug)]
struct sh_ge_u_instructionVar160 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_ge_u_instructionVar160 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 960i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7430:1, end:7430:2))"]
#[derive(Clone, Debug)]
struct sh_h_instructionVar161 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_h_instructionVar161 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1024i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7454:1, end:7454:2))"]
#[derive(Clone, Debug)]
struct sh_lt_instructionVar162 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_lt_instructionVar162 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 912i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7466:1, end:7466:2))"]
#[derive(Clone, Debug)]
struct sh_lt_u_instructionVar163 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_lt_u_instructionVar163 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 928i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7487:1, end:7487:2))"]
#[derive(Clone, Debug)]
struct sh_ne_instructionVar164 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sh_ne_instructionVar164 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sh.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 896i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7558:1, end:7558:2))"]
#[derive(Clone, Debug)]
struct sha_instructionVar165 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sha_instructionVar165 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sha"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 16i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7582:1, end:7582:2))"]
#[derive(Clone, Debug)]
struct sha_h_instructionVar166 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sha_h_instructionVar166 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sha.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1040i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7624:1, end:7624:2))"]
#[derive(Clone, Debug)]
struct shas_instructionVar167 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl shas_instructionVar167 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("shas"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8117:1, end:8117:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar168 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sub_instructionVar168 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 128i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8132:1, end:8132:2))"]
#[derive(Clone, Debug)]
struct sub_a_instructionVar169 {
    Ra2831: TokenField_Ra2831,
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl sub_a_instructionVar169 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 32i128 {
            return None;
        }
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Ra0811,
                Ra1215,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8138:1, end:8138:2))"]
#[derive(Clone, Debug)]
struct sub_b_instructionVar170 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sub_b_instructionVar170 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1152i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8159:1, end:8159:2))"]
#[derive(Clone, Debug)]
struct sub_h_instructionVar171 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sub_h_instructionVar171 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1664i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8168:1, end:8168:2))"]
#[derive(Clone, Debug)]
struct subc_instructionVar172 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl subc_instructionVar172 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subc"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 208i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8185:1, end:8185:2))"]
#[derive(Clone, Debug)]
struct subs_instructionVar173 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl subs_instructionVar173 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 160i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8193:1, end:8193:2))"]
#[derive(Clone, Debug)]
struct subs_h_instructionVar174 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl subs_h_instructionVar174 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1696i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8203:1, end:8203:2))"]
#[derive(Clone, Debug)]
struct subs_hu_instructionVar175 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl subs_hu_instructionVar175 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs.hu"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 1712i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8213:1, end:8213:2))"]
#[derive(Clone, Debug)]
struct subs_u_instructionVar176 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl subs_u_instructionVar176 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 176i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8221:1, end:8221:2))"]
#[derive(Clone, Debug)]
struct subx_instructionVar177 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl subx_instructionVar177 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("subx"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 192i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8410:1, end:8410:2))"]
#[derive(Clone, Debug)]
struct xnor_instructionVar178 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xnor_instructionVar178 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xnor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 208i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8438:1, end:8438:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar179 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_instructionVar179 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 15i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 192i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8450:1, end:8450:2))"]
#[derive(Clone, Debug)]
struct xor_eq_instructionVar180 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_eq_instructionVar180 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 752i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8462:1, end:8462:2))"]
#[derive(Clone, Debug)]
struct xor_ge_instructionVar181 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_ge_instructionVar181 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 816i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8474:1, end:8474:2))"]
#[derive(Clone, Debug)]
struct xor_ge_u_instructionVar182 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_ge_u_instructionVar182 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 832i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8486:1, end:8486:2))"]
#[derive(Clone, Debug)]
struct xor_lt_instructionVar183 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_lt_instructionVar183 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 784i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8498:1, end:8498:2))"]
#[derive(Clone, Debug)]
struct xor_lt_u_instructionVar184 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_lt_u_instructionVar184 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 800i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8510:1, end:8510:2))"]
#[derive(Clone, Debug)]
struct xor_ne_instructionVar185 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_ne_instructionVar185 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xor.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 768i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8530:1, end:8530:2))"]
#[derive(Clone, Debug)]
struct xpose_b_instructionVar186 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xpose_b_instructionVar186 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xpose.b"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2096i128 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8537:1, end:8537:2))"]
#[derive(Clone, Debug)]
struct xpose_h_instructionVar187 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xpose_h_instructionVar187 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("xpose.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 11i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1627().disassembly() != 2080i128 {
            return None;
        }
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1256:1, end:1256:2))"]
#[derive(Clone, Debug)]
struct addsc_a_instructionVar188 {
    Ra2831: TokenField_Ra2831,
    Ra1215: TokenField_Ra1215,
    Rd0811: TokenField_Rd0811,
    const1617Z: Tableconst1617Z,
}
impl addsc_a_instructionVar188 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("addsc.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 1i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 384i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra2831 = token_parser.TokenFieldRa2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Ra1215,
                Rd0811,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1470:1, end:1470:2))"]
#[derive(Clone, Debug)]
struct bisr_instructionVar189 {
    const1220Z: Tableconst1220Z,
}
impl bisr_instructionVar189 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bisr"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 173i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2131().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1220Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6438:1, end:6438:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar190 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar190 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6451:1, end:6451:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar191 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar191 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6464:1, end:6464:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar192 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar192 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 26i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6477:1, end:6477:2))"]
#[derive(Clone, Debug)]
struct mul_h_instructionVar193 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_h_instructionVar193 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("mul.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6490:1, end:6490:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar194 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar194 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 0i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6499:1, end:6499:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar195 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar195 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 1i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6508:1, end:6508:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar196 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar196 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 2i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6517:1, end:6517:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar197 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar197 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 4i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6528:1, end:6528:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar198 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar198 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 5i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6539:1, end:6539:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar199 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar199 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6548:1, end:6548:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar200 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar200 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6557:1, end:6557:2))"]
#[derive(Clone, Debug)]
struct mul_q_instructionVar201 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mul_q_instructionVar201 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mul.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6584:1, end:6584:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar202 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar202 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 28i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6597:1, end:6597:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar203 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar203 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 29i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6610:1, end:6610:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar204 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar204 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 30i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6623:1, end:6623:2))"]
#[derive(Clone, Debug)]
struct mulm_h_instructionVar205 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulm_h_instructionVar205 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 31i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6636:1, end:6636:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar206 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar206 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 12i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6651:1, end:6651:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar207 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar207 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 13i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6666:1, end:6666:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar208 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar208 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 14i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6681:1, end:6681:2))"]
#[derive(Clone, Debug)]
struct mulr_h_instructionVar209 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulr_h_instructionVar209 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 179i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 15i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6696:1, end:6696:2))"]
#[derive(Clone, Debug)]
struct mulr_q_instructionVar210 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulr_q_instructionVar210 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 6i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6708:1, end:6708:2))"]
#[derive(Clone, Debug)]
struct mulr_q_instructionVar211 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl mulr_q_instructionVar211 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mulr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 147i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1827().disassembly() != 7i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7363:1, end:7363:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar212 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sh_instructionVar212 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldop2020().disassembly() != 1i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7370:1, end:7370:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar213 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sh_instructionVar213 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldop2020().disassembly() != 0i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8303:1, end:8303:2))"]
#[derive(Clone, Debug)]
struct syscall_instructionVar214 {
    const1220Z: Tableconst1220Z,
}
impl syscall_instructionVar214 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("syscall"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 173i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2131().disassembly() != 4i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1220Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:958:1, end:958:2))"]
#[derive(Clone, Debug)]
struct absdif_instructionVar215 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl absdif_instructionVar215 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("absdif"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 14i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:997:1, end:997:2))"]
#[derive(Clone, Debug)]
struct absdifs_instructionVar216 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl absdifs_instructionVar216 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("absdifs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 15i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1086:1, end:1086:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar217 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl add_instructionVar217 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 0i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1130:1, end:1130:2))"]
#[derive(Clone, Debug)]
struct add_f_instructionVar218 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
}
impl add_f_instructionVar218 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 33i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1158:1, end:1158:2))"]
#[derive(Clone, Debug)]
struct addc_instructionVar219 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl addc_instructionVar219 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addc"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 5i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1203:1, end:1203:2))"]
#[derive(Clone, Debug)]
struct adds_instructionVar220 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl adds_instructionVar220 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("adds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 2i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1239:1, end:1239:2))"]
#[derive(Clone, Debug)]
struct adds_u_instructionVar221 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl adds_u_instructionVar221 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("adds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 3i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1280:1, end:1280:2))"]
#[derive(Clone, Debug)]
struct addx_instructionVar222 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl addx_instructionVar222 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addx"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 4i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1311:1, end:1311:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar223 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl and_instructionVar223 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 8i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1339:1, end:1339:2))"]
#[derive(Clone, Debug)]
struct and_eq_instructionVar224 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl and_eq_instructionVar224 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 32i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1351:1, end:1351:2))"]
#[derive(Clone, Debug)]
struct and_ge_instructionVar225 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl and_ge_instructionVar225 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 36i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1363:1, end:1363:2))"]
#[derive(Clone, Debug)]
struct and_ge_u_instructionVar226 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl and_ge_u_instructionVar226 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 37i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1375:1, end:1375:2))"]
#[derive(Clone, Debug)]
struct and_lt_instructionVar227 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl and_lt_instructionVar227 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 34i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1387:1, end:1387:2))"]
#[derive(Clone, Debug)]
struct and_lt_u_instructionVar228 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl and_lt_u_instructionVar228 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 35i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1399:1, end:1399:2))"]
#[derive(Clone, Debug)]
struct and_ne_instructionVar229 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl and_ne_instructionVar229 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 33i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1435:1, end:1435:2))"]
#[derive(Clone, Debug)]
struct andn_instructionVar230 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl andn_instructionVar230 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("andn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 14i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2083:1, end:2083:2))"]
#[derive(Clone, Debug)]
struct dvadj_instructionVar231 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd1215: TokenField_Rd1215,
}
impl dvadj_instructionVar231 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("dvadj"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 208i128 {
            return None;
        }
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2203:1, end:2203:2))"]
#[derive(Clone, Debug)]
struct dvstep_instructionVar232 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd1215: TokenField_Rd1215,
}
impl dvstep_instructionVar232 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("dvstep"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 240i128 {
            return None;
        }
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2232:1, end:2232:2))"]
#[derive(Clone, Debug)]
struct dvstep_u_instructionVar233 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd1215: TokenField_Rd1215,
}
impl dvstep_u_instructionVar233 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("dvstep.u"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 224i128 {
            return None;
        }
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2356:1, end:2356:2))"]
#[derive(Clone, Debug)]
struct extr_instructionVar234 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
}
impl extr_instructionVar234 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("extr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 64i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2380:1, end:2380:2))"]
#[derive(Clone, Debug)]
struct extr_u_instructionVar235 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
}
impl extr_u_instructionVar235 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("extr.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 96i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2680:1, end:2680:2))"]
#[derive(Clone, Debug)]
struct ixmax_instructionVar236 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl ixmax_instructionVar236 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmax"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 160i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2705:1, end:2705:2))"]
#[derive(Clone, Debug)]
struct ixmax_u_instructionVar237 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl ixmax_u_instructionVar237 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmax.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 176i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2730:1, end:2730:2))"]
#[derive(Clone, Debug)]
struct ixmin_instructionVar238 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl ixmin_instructionVar238 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmin"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 128i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2755:1, end:2755:2))"]
#[derive(Clone, Debug)]
struct ixmin_u_instructionVar239 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd1215: TokenField_Rd1215,
}
impl ixmin_u_instructionVar239 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ixmin.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 144i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7009:1, end:7009:2))"]
#[derive(Clone, Debug)]
struct pack_instructionVar240 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
}
impl pack_instructionVar240 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("pack"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8150:1, end:8150:2))"]
#[derive(Clone, Debug)]
struct sub_f_instructionVar241 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
}
impl sub_f_instructionVar241 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 49i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1687:1, end:1687:2))"]
#[derive(Clone, Debug)]
struct cadd_instructionVar242 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl cadd_instructionVar242 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("cadd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1714:1, end:1714:2))"]
#[derive(Clone, Debug)]
struct caddn_instructionVar243 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl caddn_instructionVar243 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("caddn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 16i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1982:1, end:1982:2))"]
#[derive(Clone, Debug)]
struct csub_instructionVar244 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl csub_instructionVar244 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("csub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 32i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1991:1, end:1991:2))"]
#[derive(Clone, Debug)]
struct csubn_instructionVar245 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl csubn_instructionVar245 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("csubn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 48i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2021:1, end:2021:2))"]
#[derive(Clone, Debug)]
struct dextr_instructionVar246 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    Rd2427: TokenField_Rd2427,
}
impl dextr_instructionVar246 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("dextr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 128i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2278:1, end:2278:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar247 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl eq_instructionVar247 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 16i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2324:1, end:2324:2))"]
#[derive(Clone, Debug)]
struct eqany_b_instructionVar248 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl eqany_b_instructionVar248 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eqany.b"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 86i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2342:1, end:2342:2))"]
#[derive(Clone, Debug)]
struct eqany_h_instructionVar249 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl eqany_h_instructionVar249 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eqany.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 118i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2372:1, end:2372:2))"]
#[derive(Clone, Debug)]
struct extr_instructionVar250 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl extr_instructionVar250 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("extr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2396:1, end:2396:2))"]
#[derive(Clone, Debug)]
struct extr_u_instructionVar251 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl extr_u_instructionVar251 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("extr.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2531:1, end:2531:2))"]
#[derive(Clone, Debug)]
struct ge_instructionVar252 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl ge_instructionVar252 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 20i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2549:1, end:2549:2))"]
#[derive(Clone, Debug)]
struct ge_u_instructionVar253 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl ge_u_instructionVar253 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 21i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2565:1, end:2565:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar254 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd1215: TokenField_Rd1215,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl imask_instructionVar254 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd1215,
                Rd2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2585:1, end:2585:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar255 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd2427: TokenField_Rd2427,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
}
impl imask_instructionVar255 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 215i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                Rd2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2602:1, end:2602:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar256 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
}
impl insert_instructionVar256 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 23i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2629:1, end:2629:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar257 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    const1215Z: Tableconst1215Z,
}
impl insert_instructionVar257 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 151i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 0i128 {
            return None;
        }
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                Rd0811,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3745:1, end:3745:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar258 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl lt_instructionVar258 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 18i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3799:1, end:3799:2))"]
#[derive(Clone, Debug)]
struct lt_u_instructionVar259 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl lt_u_instructionVar259 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 19i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3817:1, end:3817:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar260 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madd_instructionVar260 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 10i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3841:1, end:3841:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar261 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madd_instructionVar261 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 106i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3850:1, end:3850:2))"]
#[derive(Clone, Debug)]
struct madd_f_instructionVar262 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madd_f_instructionVar262 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 97i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4075:1, end:4075:2))"]
#[derive(Clone, Debug)]
struct madd_u_instructionVar263 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madd_u_instructionVar263 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madd.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 104i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4391:1, end:4391:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar264 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madds_instructionVar264 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 138i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4418:1, end:4418:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar265 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madds_instructionVar265 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 234i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4613:1, end:4613:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar266 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madds_u_instructionVar266 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 136i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4632:1, end:4632:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar267 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl madds_u_instructionVar267 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 232i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5272:1, end:5272:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar268 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msub_instructionVar268 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 10i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5296:1, end:5296:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar269 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msub_instructionVar269 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 106i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5305:1, end:5305:2))"]
#[derive(Clone, Debug)]
struct msub_f_instructionVar270 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msub_f_instructionVar270 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub.f"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 113i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5482:1, end:5482:2))"]
#[derive(Clone, Debug)]
struct msub_u_instructionVar271 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msub_u_instructionVar271 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msub.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 104i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6133:1, end:6133:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar272 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msubs_instructionVar272 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 138i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6160:1, end:6160:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar273 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msubs_instructionVar273 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 234i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6345:1, end:6345:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar274 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msubs_u_instructionVar274 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 136i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6364:1, end:6364:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar275 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl msubs_u_instructionVar275 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 35i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 232i128 {
            return None;
        }
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7315:1, end:7315:2))"]
#[derive(Clone, Debug)]
struct sel_instructionVar276 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sel_instructionVar276 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("sel"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 64i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7327:1, end:7327:2))"]
#[derive(Clone, Debug)]
struct seln_instructionVar277 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl seln_instructionVar277 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("seln"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 43i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1623().disassembly() != 80i128 {
            return None;
        }
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3899:1, end:3899:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar278 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar278 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3914:1, end:3914:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar279 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar279 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3929:1, end:3929:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar280 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar280 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3944:1, end:3944:2))"]
#[derive(Clone, Debug)]
struct madd_h_instructionVar281 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_h_instructionVar281 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madd.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3959:1, end:3959:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar282 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar282 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 4i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3970:1, end:3970:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar283 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar283 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 0i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3981:1, end:3981:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar284 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar284 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 1i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3992:1, end:3992:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar285 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar285 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 2i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4003:1, end:4003:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar286 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar286 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 5i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4014:1, end:4014:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar287 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar287 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4024:1, end:4024:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar288 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar288 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4034:1, end:4034:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar289 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar289 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4044:1, end:4044:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar290 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar290 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4055:1, end:4055:2))"]
#[derive(Clone, Debug)]
struct madd_q_instructionVar291 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madd_q_instructionVar291 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madd.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4084:1, end:4084:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar292 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar292 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4096:1, end:4096:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar293 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar293 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4108:1, end:4108:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar294 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar294 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4120:1, end:4120:2))"]
#[derive(Clone, Debug)]
struct maddm_h_instructionVar295 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddm_h_instructionVar295 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4132:1, end:4132:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar296 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar296 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4145:1, end:4145:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar297 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar297 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4158:1, end:4158:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar298 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar298 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4171:1, end:4171:2))"]
#[derive(Clone, Debug)]
struct maddms_h_instructionVar299 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddms_h_instructionVar299 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4184:1, end:4184:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar300 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar300 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4198:1, end:4198:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar301 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar301 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4212:1, end:4212:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar302 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar302 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4226:1, end:4226:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar303 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar303 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4240:1, end:4240:2))"]
#[derive(Clone, Debug)]
struct maddr_h_instructionVar304 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddr_h_instructionVar304 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4254:1, end:4254:2))"]
#[derive(Clone, Debug)]
struct maddr_q_instructionVar305 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddr_q_instructionVar305 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 6i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4266:1, end:4266:2))"]
#[derive(Clone, Debug)]
struct maddr_q_instructionVar306 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddr_q_instructionVar306 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 7i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4278:1, end:4278:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar307 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar307 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4294:1, end:4294:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar308 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar308 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4312:1, end:4312:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar309 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar309 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4330:1, end:4330:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar310 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar310 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4348:1, end:4348:2))"]
#[derive(Clone, Debug)]
struct maddrs_h_instructionVar311 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddrs_h_instructionVar311 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4366:1, end:4366:2))"]
#[derive(Clone, Debug)]
struct maddrs_q_instructionVar312 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddrs_q_instructionVar312 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 38i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4379:1, end:4379:2))"]
#[derive(Clone, Debug)]
struct maddrs_q_instructionVar313 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddrs_q_instructionVar313 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 39i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4428:1, end:4428:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar314 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar314 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4443:1, end:4443:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar315 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar315 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4458:1, end:4458:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar316 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar316 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4473:1, end:4473:2))"]
#[derive(Clone, Debug)]
struct madds_h_instructionVar317 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_h_instructionVar317 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("madds.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 131i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4488:1, end:4488:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar318 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar318 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 36i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4500:1, end:4500:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar319 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar319 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 32i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4512:1, end:4512:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar320 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar320 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 33i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4524:1, end:4524:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar321 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar321 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 34i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4536:1, end:4536:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar322 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar322 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 37i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4548:1, end:4548:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar323 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar323 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4559:1, end:4559:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar324 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar324 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4570:1, end:4570:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar325 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar325 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4582:1, end:4582:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar326 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar326 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4594:1, end:4594:2))"]
#[derive(Clone, Debug)]
struct madds_q_instructionVar327 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl madds_q_instructionVar327 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("madds.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 67i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4642:1, end:4642:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar328 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar328 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4657:1, end:4657:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar329 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar329 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4672:1, end:4672:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar330 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar330 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4687:1, end:4687:2))"]
#[derive(Clone, Debug)]
struct maddsu_h_instructionVar331 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsu_h_instructionVar331 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsu.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4702:1, end:4702:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar332 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar332 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4714:1, end:4714:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar333 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar333 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4726:1, end:4726:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar334 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar334 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4738:1, end:4738:2))"]
#[derive(Clone, Debug)]
struct maddsum_h_instructionVar335 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsum_h_instructionVar335 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsum.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4750:1, end:4750:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar336 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar336 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4763:1, end:4763:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar337 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar337 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4776:1, end:4776:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar338 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar338 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4789:1, end:4789:2))"]
#[derive(Clone, Debug)]
struct maddsums_h_instructionVar339 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsums_h_instructionVar339 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsums.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4802:1, end:4802:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar340 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar340 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4816:1, end:4816:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar341 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar341 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4830:1, end:4830:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar342 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar342 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4844:1, end:4844:2))"]
#[derive(Clone, Debug)]
struct maddsur_h_instructionVar343 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsur_h_instructionVar343 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsur.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4858:1, end:4858:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar344 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar344 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4874:1, end:4874:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar345 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar345 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4890:1, end:4890:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar346 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar346 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4906:1, end:4906:2))"]
#[derive(Clone, Debug)]
struct maddsurs_h_instructionVar347 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsurs_h_instructionVar347 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("maddsurs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4922:1, end:4922:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar348 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar348 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4937:1, end:4937:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar349 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar349 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4950:1, end:4950:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar350 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar350 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4965:1, end:4965:2))"]
#[derive(Clone, Debug)]
struct maddsus_h_instructionVar351 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl maddsus_h_instructionVar351 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("maddsus.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 195i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4985:1, end:4985:2))"]
#[derive(Clone, Debug)]
struct max_instructionVar352 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl max_instructionVar352 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("max"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 26i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5045:1, end:5045:2))"]
#[derive(Clone, Debug)]
struct max_u_instructionVar353 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl max_u_instructionVar353 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("max.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 27i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5070:1, end:5070:2))"]
#[derive(Clone, Debug)]
struct min_instructionVar354 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl min_instructionVar354 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("min"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 24i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5130:1, end:5130:2))"]
#[derive(Clone, Debug)]
struct min_u_instructionVar355 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl min_u_instructionVar355 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("min.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 25i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5315:1, end:5315:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar356 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar356 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5330:1, end:5330:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar357 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar357 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5345:1, end:5345:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar358 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar358 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5360:1, end:5360:2))"]
#[derive(Clone, Debug)]
struct msub_h_instructionVar359 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_h_instructionVar359 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msub.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5375:1, end:5375:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar360 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar360 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 4i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5386:1, end:5386:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar361 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar361 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 0i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5395:1, end:5395:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar362 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar362 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 1i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5404:1, end:5404:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar363 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar363 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 2i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5413:1, end:5413:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar364 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar364 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 5i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5424:1, end:5424:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar365 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar365 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5433:1, end:5433:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar366 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar366 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5442:1, end:5442:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar367 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar367 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5451:1, end:5451:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar368 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar368 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5462:1, end:5462:2))"]
#[derive(Clone, Debug)]
struct msub_q_instructionVar369 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msub_q_instructionVar369 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msub.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5491:1, end:5491:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar370 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar370 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 24i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5506:1, end:5506:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar371 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar371 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 25i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5521:1, end:5521:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar372 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar372 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 26i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5536:1, end:5536:2))"]
#[derive(Clone, Debug)]
struct msubad_h_instructionVar373 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubad_h_instructionVar373 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubad.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 27i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5551:1, end:5551:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar374 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar374 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5563:1, end:5563:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar375 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar375 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5575:1, end:5575:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar376 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar376 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5587:1, end:5587:2))"]
#[derive(Clone, Debug)]
struct msubadm_h_instructionVar377 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadm_h_instructionVar377 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5599:1, end:5599:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar378 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar378 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5612:1, end:5612:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar379 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar379 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5625:1, end:5625:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar380 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar380 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5638:1, end:5638:2))"]
#[derive(Clone, Debug)]
struct msubadms_h_instructionVar381 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadms_h_instructionVar381 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5651:1, end:5651:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar382 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar382 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5664:1, end:5664:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar383 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar383 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5678:1, end:5678:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar384 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar384 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5692:1, end:5692:2))"]
#[derive(Clone, Debug)]
struct msubadr_h_instructionVar385 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadr_h_instructionVar385 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5706:1, end:5706:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar386 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar386 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5722:1, end:5722:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar387 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar387 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5738:1, end:5738:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar388 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar388 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5754:1, end:5754:2))"]
#[derive(Clone, Debug)]
struct msubadrs_h_instructionVar389 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubadrs_h_instructionVar389 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubadrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5770:1, end:5770:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar390 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar390 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5785:1, end:5785:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar391 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar391 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5800:1, end:5800:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar392 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar392 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5815:1, end:5815:2))"]
#[derive(Clone, Debug)]
struct msubads_h_instructionVar393 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubads_h_instructionVar393 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubads.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 227i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5830:1, end:5830:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar394 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar394 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 28i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5843:1, end:5843:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar395 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar395 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 29i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5856:1, end:5856:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar396 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar396 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5869:1, end:5869:2))"]
#[derive(Clone, Debug)]
struct msubm_h_instructionVar397 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubm_h_instructionVar397 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubm.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 31i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5882:1, end:5882:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar398 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar398 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5895:1, end:5895:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar399 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar399 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5908:1, end:5908:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar400 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar400 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5921:1, end:5921:2))"]
#[derive(Clone, Debug)]
struct msubms_h_instructionVar401 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubms_h_instructionVar401 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubms.h"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 63i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5934:1, end:5934:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar402 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar402 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 30i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5948:1, end:5948:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar403 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar403 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 12i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5962:1, end:5962:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar404 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar404 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 13i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5976:1, end:5976:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar405 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar405 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 14i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5990:1, end:5990:2))"]
#[derive(Clone, Debug)]
struct msubr_h_instructionVar406 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubr_h_instructionVar406 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubr.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 15i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6004:1, end:6004:2))"]
#[derive(Clone, Debug)]
struct msubr_q_instructionVar407 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubr_q_instructionVar407 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 6i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6016:1, end:6016:2))"]
#[derive(Clone, Debug)]
struct msubr_q_instructionVar408 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubr_q_instructionVar408 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubr.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 7i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6028:1, end:6028:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar409 {
    Rd2831: TokenField_Rd2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar409 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 12usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 62i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2831,
                Ree2427,
                Reo2427,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6044:1, end:6044:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar410 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar410 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 44i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6060:1, end:6060:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar411 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar411 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 45i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6076:1, end:6076:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar412 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar412 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 46i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6092:1, end:6092:2))"]
#[derive(Clone, Debug)]
struct msubrs_h_instructionVar413 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubrs_h_instructionVar413 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubrs.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 47i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6108:1, end:6108:2))"]
#[derive(Clone, Debug)]
struct msubrs_q_instructionVar414 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubrs_q_instructionVar414 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 38i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6121:1, end:6121:2))"]
#[derive(Clone, Debug)]
struct msubrs_q_instructionVar415 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubrs_q_instructionVar415 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubrs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 39i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6170:1, end:6170:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar416 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar416 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ul,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6185:1, end:6185:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar417 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar417 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("lu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6200:1, end:6200:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar418 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar418 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("ll,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 58i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6215:1, end:6215:2))"]
#[derive(Clone, Debug)]
struct msubs_h_instructionVar419 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Ree2427: TokenField_Ree2427,
    Reo2427: TokenField_Reo2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_h_instructionVar419 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 14usize] = [
            DisplayElement::Literal("msubs.h"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Ree2427.display(),
            DisplayElement::Literal("/"),
            self.Reo2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("uu,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 163i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2427 = token_parser.TokenFieldRee2427();
        let Reo2427 = token_parser.TokenFieldReo2427();
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Ree2427,
                Reo2427,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6230:1, end:6230:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar420 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar420 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 36i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6242:1, end:6242:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar421 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar421 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 32i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6252:1, end:6252:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar422 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar422 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 33i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6262:1, end:6262:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar423 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar423 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 34i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6272:1, end:6272:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar424 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar424 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 37i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6284:1, end:6284:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar425 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar425 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 56i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6294:1, end:6294:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar426 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar426 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 57i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6304:1, end:6304:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar427 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar427 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 59i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6314:1, end:6314:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar428 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar428 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("u,"),
            self.Rd1215.display(),
            DisplayElement::Literal("u,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 60i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6326:1, end:6326:2))"]
#[derive(Clone, Debug)]
struct msubs_q_instructionVar429 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1617Z: Tableconst1617Z,
}
impl msubs_q_instructionVar429 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("msubs.q"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal("l,"),
            self.Rd1215.display(),
            DisplayElement::Literal("l,"),
        ];
        display.extend_from_slice(&extend);
        self.const1617Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 99i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1823().disassembly() != 61i128 {
            return None;
        }
        let const1617Z = if let Some((len, table)) = Tableconst1617Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re2427 = token_parser.TokenFieldRe2427();
        let Re2831 = token_parser.TokenFieldRe2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1617Z,
                Rd0811,
                Rd1215,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6393:1, end:6393:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar430 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl mul_instructionVar430 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 1i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6410:1, end:6410:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar431 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl mul_instructionVar431 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 3i128 {
                return None;
            }
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6566:1, end:6566:2))"]
#[derive(Clone, Debug)]
struct mul_u_instructionVar432 {
    Re2831: TokenField_Re2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl mul_u_instructionVar432 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mul.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 2i128 {
                return None;
            }
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6719:1, end:6719:2))"]
#[derive(Clone, Debug)]
struct muls_instructionVar433 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl muls_instructionVar433 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("muls"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 5i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6737:1, end:6737:2))"]
#[derive(Clone, Debug)]
struct muls_u_instructionVar434 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl muls_u_instructionVar434 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("muls.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 83i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 4i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6761:1, end:6761:2))"]
#[derive(Clone, Debug)]
struct nand_instructionVar435 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl nand_instructionVar435 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nand"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 9i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6781:1, end:6781:2))"]
#[derive(Clone, Debug)]
struct ne_instructionVar436 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl ne_instructionVar436 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 17i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6827:1, end:6827:2))"]
#[derive(Clone, Debug)]
struct nor_instructionVar437 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl nor_instructionVar437 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 11i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6863:1, end:6863:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar438 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl or_instructionVar438 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 10i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6895:1, end:6895:2))"]
#[derive(Clone, Debug)]
struct or_eq_instructionVar439 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl or_eq_instructionVar439 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 39i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6907:1, end:6907:2))"]
#[derive(Clone, Debug)]
struct or_ge_instructionVar440 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl or_ge_instructionVar440 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 43i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6919:1, end:6919:2))"]
#[derive(Clone, Debug)]
struct or_ge_u_instructionVar441 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl or_ge_u_instructionVar441 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 44i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6931:1, end:6931:2))"]
#[derive(Clone, Debug)]
struct or_lt_instructionVar442 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl or_lt_instructionVar442 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 41i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6943:1, end:6943:2))"]
#[derive(Clone, Debug)]
struct or_lt_u_instructionVar443 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl or_lt_u_instructionVar443 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 42i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6955:1, end:6955:2))"]
#[derive(Clone, Debug)]
struct or_ne_instructionVar444 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl or_ne_instructionVar444 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 40i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6995:1, end:6995:2))"]
#[derive(Clone, Debug)]
struct orn_instructionVar445 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl orn_instructionVar445 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("orn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 15i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7228:1, end:7228:2))"]
#[derive(Clone, Debug)]
struct rsub_instructionVar446 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl rsub_instructionVar446 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("rsub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 8i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7235:1, end:7235:2))"]
#[derive(Clone, Debug)]
struct rsubs_instructionVar447 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl rsubs_instructionVar447 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("rsubs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 10i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7243:1, end:7243:2))"]
#[derive(Clone, Debug)]
struct rsubs_u_instructionVar448 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl rsubs_u_instructionVar448 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("rsubs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 11i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7400:1, end:7400:2))"]
#[derive(Clone, Debug)]
struct sh_eq_instructionVar449 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sh_eq_instructionVar449 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 55i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7412:1, end:7412:2))"]
#[derive(Clone, Debug)]
struct sh_ge_instructionVar450 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sh_ge_instructionVar450 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 59i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7424:1, end:7424:2))"]
#[derive(Clone, Debug)]
struct sh_ge_u_instructionVar451 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl sh_ge_u_instructionVar451 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 60i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7442:1, end:7442:2))"]
#[derive(Clone, Debug)]
struct sh_h_instructionVar452 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sh_h_instructionVar452 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 64i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7460:1, end:7460:2))"]
#[derive(Clone, Debug)]
struct sh_lt_instructionVar453 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sh_lt_instructionVar453 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 57i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7472:1, end:7472:2))"]
#[derive(Clone, Debug)]
struct sh_lt_u_instructionVar454 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl sh_lt_u_instructionVar454 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 58i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7493:1, end:7493:2))"]
#[derive(Clone, Debug)]
struct sh_ne_instructionVar455 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sh_ne_instructionVar455 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 56i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7570:1, end:7570:2))"]
#[derive(Clone, Debug)]
struct sha_instructionVar456 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sha_instructionVar456 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sha"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 1i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7603:1, end:7603:2))"]
#[derive(Clone, Debug)]
struct sha_h_instructionVar457 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sha_h_instructionVar457 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sha.h"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 65i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7636:1, end:7636:2))"]
#[derive(Clone, Debug)]
struct shas_instructionVar458 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl shas_instructionVar458 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("shas"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 2i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8416:1, end:8416:2))"]
#[derive(Clone, Debug)]
struct xnor_instructionVar459 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl xnor_instructionVar459 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xnor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 13i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8444:1, end:8444:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar460 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl xor_instructionVar460 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 143i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 12i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8456:1, end:8456:2))"]
#[derive(Clone, Debug)]
struct xor_eq_instructionVar461 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl xor_eq_instructionVar461 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.eq"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 47i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8468:1, end:8468:2))"]
#[derive(Clone, Debug)]
struct xor_ge_instructionVar462 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl xor_ge_instructionVar462 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.ge"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 51i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8480:1, end:8480:2))"]
#[derive(Clone, Debug)]
struct xor_ge_u_instructionVar463 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl xor_ge_u_instructionVar463 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.ge.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 52i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8492:1, end:8492:2))"]
#[derive(Clone, Debug)]
struct xor_lt_instructionVar464 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl xor_lt_instructionVar464 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.lt"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 49i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8504:1, end:8504:2))"]
#[derive(Clone, Debug)]
struct xor_lt_u_instructionVar465 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl xor_lt_u_instructionVar465 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.lt.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c52 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 50i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c52(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8516:1, end:8516:2))"]
#[derive(Clone, Debug)]
struct xor_ne_instructionVar466 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl xor_ne_instructionVar466 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.ne"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c50 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 139i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2127().disassembly() != 48i128 {
                return None;
            }
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c50(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1696:1, end:1696:2))"]
#[derive(Clone, Debug)]
struct cadd_instructionVar467 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl cadd_instructionVar467 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("cadd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 0i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1723:1, end:1723:2))"]
#[derive(Clone, Debug)]
struct caddn_instructionVar468 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl caddn_instructionVar468 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("caddn"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 1i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2014:1, end:2014:2))"]
#[derive(Clone, Debug)]
struct dextr_instructionVar469 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const2327Z: Tableconst2327Z,
}
impl dextr_instructionVar469 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("dextr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 119i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1622().disassembly() != 0i128 {
            return None;
        }
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2364:1, end:2364:2))"]
#[derive(Clone, Debug)]
struct extr_instructionVar470 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl extr_instructionVar470 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("extr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2388:1, end:2388:2))"]
#[derive(Clone, Debug)]
struct extr_u_instructionVar471 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl extr_u_instructionVar471 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("extr.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2555:1, end:2555:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar472 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl imask_instructionVar472 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd1215,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2576:1, end:2576:2))"]
#[derive(Clone, Debug)]
struct imask_instructionVar473 {
    Ree2831: TokenField_Ree2831,
    Reo2831: TokenField_Reo2831,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl imask_instructionVar473 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("imask"),
            DisplayElement::Literal(" "),
            self.Ree2831.display(),
            DisplayElement::Literal("/"),
            self.Reo2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 183i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ree2831 = token_parser.TokenFieldRee2831();
        let Reo2831 = token_parser.TokenFieldReo2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                const2327Z,
                Ree2831,
                Reo2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2620:1, end:2620:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar474 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    Rd2427: TokenField_Rd2427,
    const1620Z: Tableconst1620Z,
}
impl insert_instructionVar474 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 87i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                Rd0811,
                Rd1215,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2647:1, end:2647:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar475 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd2427: TokenField_Rd2427,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
}
impl insert_instructionVar475 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 215i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2123().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3824:1, end:3824:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar476 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl madd_instructionVar476 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 1i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3832:1, end:3832:2))"]
#[derive(Clone, Debug)]
struct madd_instructionVar477 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl madd_instructionVar477 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madd"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 3i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4066:1, end:4066:2))"]
#[derive(Clone, Debug)]
struct madd_u_instructionVar478 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl madd_u_instructionVar478 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madd.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 2i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4399:1, end:4399:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar479 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl madds_instructionVar479 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 5i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4408:1, end:4408:2))"]
#[derive(Clone, Debug)]
struct madds_instructionVar480 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl madds_instructionVar480 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 7i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4605:1, end:4605:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar481 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl madds_u_instructionVar481 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 4i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:4622:1, end:4622:2))"]
#[derive(Clone, Debug)]
struct madds_u_instructionVar482 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl madds_u_instructionVar482 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("madds.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 19i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 6i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5279:1, end:5279:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar483 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl msub_instructionVar483 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 1i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5287:1, end:5287:2))"]
#[derive(Clone, Debug)]
struct msub_instructionVar484 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl msub_instructionVar484 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msub"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 3i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5473:1, end:5473:2))"]
#[derive(Clone, Debug)]
struct msub_u_instructionVar485 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl msub_u_instructionVar485 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msub.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c57 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 2i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c57(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6141:1, end:6141:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar486 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl msubs_instructionVar486 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 5i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6150:1, end:6150:2))"]
#[derive(Clone, Debug)]
struct msubs_instructionVar487 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl msubs_instructionVar487 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c56 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 7i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c56(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6337:1, end:6337:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar488 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl msubs_u_instructionVar488 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 4i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6354:1, end:6354:2))"]
#[derive(Clone, Debug)]
struct msubs_u_instructionVar489 {
    Re2831: TokenField_Re2831,
    Re2427: TokenField_Re2427,
    Rd0811: TokenField_Rd0811,
    const1220Z: Tableconst1220Z,
}
impl msubs_u_instructionVar489 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("msubs.u"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
            self.Re2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c58 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 51i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 6i128 {
                return None;
            }
            let Re2427 = token_parser.TokenFieldRe2427();
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Re2427, Re2831), pattern_len))
        };
        let ((), (Rd0811, Re2427, Re2831), sub_len) =
            sub_pattern_c58(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220Z = if let Some((len, table)) = Tableconst1220Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220Z,
                Rd0811,
                Re2427,
                Re2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7321:1, end:7321:2))"]
#[derive(Clone, Debug)]
struct sel_instructionVar490 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl sel_instructionVar490 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("sel"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c54 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 4i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c54(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7333:1, end:7333:2))"]
#[derive(Clone, Debug)]
struct seln_instructionVar491 {
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    const1220S: Tableconst1220S,
}
impl seln_instructionVar491 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("seln"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1220S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c55 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 171i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2123().disassembly() != 5i128 {
                return None;
            }
            let Rd2427 = token_parser.TokenFieldRd2427();
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2427, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2427, Rd2831), sub_len) =
            sub_pattern_c55(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1220S = if let Some((len, table)) = Tableconst1220S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1220S,
                Rd0811,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1317:1, end:1317:2))"]
#[derive(Clone, Debug)]
struct and_and_t_instructionVar492 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl and_and_t_instructionVar492 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1325:1, end:1325:2))"]
#[derive(Clone, Debug)]
struct and_andn_t_instructionVar493 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl and_andn_t_instructionVar493 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1405:1, end:1405:2))"]
#[derive(Clone, Debug)]
struct and_nor_t_instructionVar494 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl and_nor_t_instructionVar494 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1413:1, end:1413:2))"]
#[derive(Clone, Debug)]
struct and_or_t_instructionVar495 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl and_or_t_instructionVar495 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 71i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1421:1, end:1421:2))"]
#[derive(Clone, Debug)]
struct and_t_instructionVar496 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl and_t_instructionVar496 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1441:1, end:1441:2))"]
#[derive(Clone, Debug)]
struct andn_t_instructionVar497 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl andn_t_instructionVar497 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1592:1, end:1592:2))"]
#[derive(Clone, Debug)]
struct cachea_i_instructionVar498 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl cachea_i_instructionVar498 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cachea.i"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 30i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1614:1, end:1614:2))"]
#[derive(Clone, Debug)]
struct cachea_w_instructionVar499 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl cachea_w_instructionVar499 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cachea.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 28i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1636:1, end:1636:2))"]
#[derive(Clone, Debug)]
struct cachea_wi_instructionVar500 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl cachea_wi_instructionVar500 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cachea.wi"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 29i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3632:1, end:3632:2))"]
#[derive(Clone, Debug)]
struct ldlcx_instructionVar501 {
    off10: Tableoff10,
    BO: TableBO,
}
impl ldlcx_instructionVar501 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 36i128 {
                return None;
            }
            let off10 = if let Some((len, table)) =
                Tableoff10::parse(tokens, &mut context_instance, inst_start)
            {
                block_1_len = block_1_len.max(len as u32);
                table
            } else {
                return None;
            };
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((off10), (), pattern_len))
        };
        let ((mut off10), (), sub_len) =
            sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3668:1, end:3668:2))"]
#[derive(Clone, Debug)]
struct lducx_instructionVar502 {
    off10: Tableoff10,
    BO: TableBO,
}
impl lducx_instructionVar502 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lducx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 37i128 {
                return None;
            }
            let off10 = if let Some((len, table)) =
                Tableoff10::parse(tokens, &mut context_instance, inst_start)
            {
                block_1_len = block_1_len.max(len as u32);
                table
            } else {
                return None;
            };
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((off10), (), pattern_len))
        };
        let ((mut off10), (), sub_len) =
            sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8071:1, end:8071:2))"]
#[derive(Clone, Debug)]
struct stlcx_instructionVar503 {
    BO: TableBO,
}
impl stlcx_instructionVar503 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 38i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8086:1, end:8086:2))"]
#[derive(Clone, Debug)]
struct stucx_instructionVar504 {
    BO: TableBO,
}
impl stucx_instructionVar504 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stucx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c27 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 39i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c27(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1926:1, end:1926:2))"]
#[derive(Clone, Debug)]
struct cmpswap_w_instructionVar505 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off10: Tableoff10,
}
impl cmpswap_w_instructionVar505 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmpswap.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i128 {
            return None;
        }
        let Ree0811 = token_parser.TokenFieldRee0811();
        let Reo0811 = token_parser.TokenFieldReo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 19i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ree0811,
                Reo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1955:1, end:1955:2))"]
#[derive(Clone, Debug)]
struct cop_instructionVar506 {
    op2027: TokenField_op2027,
    op1617: TokenField_op1617,
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl cop_instructionVar506 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 11usize] = [
            DisplayElement::Literal("cop"),
            DisplayElement::Literal(" "),
            self.op2027.display(),
            DisplayElement::Literal("["),
            self.op1617.display(),
            DisplayElement::Literal("],"),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 75i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1819().disassembly() != 0i128 {
            return None;
        }
        let op1617 = token_parser.TokenFieldop1617();
        let op2027 = token_parser.TokenFieldop2027();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                op1617,
                op2027,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1963:1, end:1963:2))"]
#[derive(Clone, Debug)]
struct cop_instructionVar507 {
    op2023: TokenField_op2023,
    op1617: TokenField_op1617,
    Rd2831: TokenField_Rd2831,
    Rd2427: TokenField_Rd2427,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl cop_instructionVar507 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 13usize] = [
            DisplayElement::Literal("cop"),
            DisplayElement::Literal(" "),
            self.op2023.display(),
            DisplayElement::Literal("["),
            self.op1617.display(),
            DisplayElement::Literal("],"),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd2427.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 107i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1819().disassembly() != 0i128 {
            return None;
        }
        let op1617 = token_parser.TokenFieldop1617();
        let op2023 = token_parser.TokenFieldop2023();
        let Rd2427 = token_parser.TokenFieldRd2427();
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Rd0811,
                Rd1215,
                op1617,
                op2023,
                Rd2427,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3720:1, end:3720:2))"]
#[derive(Clone, Debug)]
struct loopu_instructionVar508 {
    off1630pc15s: Tableoff1630pc15s,
}
impl loopu_instructionVar508 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("loopu"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 253i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off1630pc15s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2000:1, end:2000:2))"]
#[derive(Clone, Debug)]
struct debug_instructionVar509 {}
impl debug_instructionVar509 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("debug")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 160i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2442:1, end:2442:2))"]
#[derive(Clone, Debug)]
struct fret_instructionVar510 {}
impl fret_instructionVar510 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("fret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 7i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2595:1, end:2595:2))"]
#[derive(Clone, Debug)]
struct ins_t_instructionVar511 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl ins_t_instructionVar511 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ins.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 103i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2611:1, end:2611:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar512 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl insert_instructionVar512 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 55i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2638:1, end:2638:2))"]
#[derive(Clone, Debug)]
struct insert_instructionVar513 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1215Z: Tableconst1215Z,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl insert_instructionVar513 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insert"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 183i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                const1620Z,
                const2327Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2656:1, end:2656:2))"]
#[derive(Clone, Debug)]
struct insn_t_instructionVar514 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl insn_t_instructionVar514 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("insn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 103i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3089:1, end:3089:2))"]
#[derive(Clone, Debug)]
struct jnz_a_instructionVar515 {
    Ra0811: TokenField_Ra0811,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnz_a_instructionVar515 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 189i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3133:1, end:3133:2))"]
#[derive(Clone, Debug)]
struct jz_a_instructionVar516 {
    Ra0811: TokenField_Ra0811,
    off1630pc15s: Tableoff1630pc15s,
}
impl jz_a_instructionVar516 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 189i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3711:1, end:3711:2))"]
#[derive(Clone, Debug)]
struct loop_instructionVar517 {
    Ra1215: TokenField_Ra1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl loop_instructionVar517 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("loop"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 253i128 {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6373:1, end:6373:2))"]
#[derive(Clone, Debug)]
struct mtcr_instructionVar518 {
    Rd0811: TokenField_Rd0811,
    const1227Z: Tableconst1227Z,
}
impl mtcr_instructionVar518 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mtcr"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 205i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2831().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2831:1, end:2831:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar519 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jeq_instructionVar519 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 95i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2837:1, end:2837:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar520 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jeq_instructionVar520 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 223i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2843:1, end:2843:2))"]
#[derive(Clone, Debug)]
struct jeq_a_instructionVar521 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jeq_a_instructionVar521 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 125i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2849:1, end:2849:2))"]
#[derive(Clone, Debug)]
struct jge_instructionVar522 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_instructionVar522 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jge"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 127i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2855:1, end:2855:2))"]
#[derive(Clone, Debug)]
struct jge_instructionVar523 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_instructionVar523 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jge"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 255i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2861:1, end:2861:2))"]
#[derive(Clone, Debug)]
struct jge_u_instructionVar524 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_u_instructionVar524 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jge.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 127i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2867:1, end:2867:2))"]
#[derive(Clone, Debug)]
struct jge_u_instructionVar525 {
    Rd0811: TokenField_Rd0811,
    const1215Z: Tableconst1215Z,
    off1630pc15s: Tableoff1630pc15s,
}
impl jge_u_instructionVar525 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jge.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 255i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2896:1, end:2896:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar526 {}
impl ji_instructionVar526 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("ji"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a11),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0811().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 220i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6799:1, end:6799:2))"]
#[derive(Clone, Debug)]
struct nop_instructionVar527 {}
impl nop_instructionVar527 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nop")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7088:1, end:7088:2))"]
#[derive(Clone, Debug)]
struct ret_instructionVar528 {}
impl ret_instructionVar528 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("ret")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 144i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7130:1, end:7130:2))"]
#[derive(Clone, Debug)]
struct rfe_instructionVar529 {}
impl rfe_instructionVar529 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("rfe")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0815().disassembly() != 128i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:604:1, end:604:2))"]
#[derive(Clone, Debug)]
struct nop_instructionVar530 {}
impl nop_instructionVar530 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nop")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0010().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2890:1, end:2890:2))"]
#[derive(Clone, Debug)]
struct ji_instructionVar531 {
    Ra0811: TokenField_Ra0811,
}
impl ji_instructionVar531 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("ji"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 220i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2951:1, end:2951:2))"]
#[derive(Clone, Debug)]
struct jlt_instructionVar532 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_instructionVar532 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jlt"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 63i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2957:1, end:2957:2))"]
#[derive(Clone, Debug)]
struct jlt_instructionVar533 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_instructionVar533 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jlt"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 191i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2963:1, end:2963:2))"]
#[derive(Clone, Debug)]
struct jlt_u_instructionVar534 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_u_instructionVar534 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jlt.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 63i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2969:1, end:2969:2))"]
#[derive(Clone, Debug)]
struct jlt_u_instructionVar535 {
    Rd0811: TokenField_Rd0811,
    const1215Z: Tableconst1215Z,
    off1630pc15s: Tableoff1630pc15s,
}
impl jlt_u_instructionVar535 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jlt.u"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 191i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3015:1, end:3015:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar536 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jne_instructionVar536 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 95i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3021:1, end:3021:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar537 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jne_instructionVar537 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 223i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3027:1, end:3027:2))"]
#[derive(Clone, Debug)]
struct jne_a_instructionVar538 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jne_a_instructionVar538 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 125i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3033:1, end:3033:2))"]
#[derive(Clone, Debug)]
struct jned_instructionVar539 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jned_instructionVar539 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jned"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 31i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3041:1, end:3041:2))"]
#[derive(Clone, Debug)]
struct jned_instructionVar540 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jned_instructionVar540 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jned"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 159i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3049:1, end:3049:2))"]
#[derive(Clone, Debug)]
struct jnei_instructionVar541 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnei_instructionVar541 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jnei"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 31i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off1630pc15s,
                Rd0811,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3057:1, end:3057:2))"]
#[derive(Clone, Debug)]
struct jnei_instructionVar542 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnei_instructionVar542 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnei"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 159i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3211:1, end:3211:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar543 {
    Ra0811: TokenField_Ra0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_a_instructionVar543 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 22i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ra0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3243:1, end:3243:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar544 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_b_instructionVar544 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 16i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3311:1, end:3311:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar545 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_bu_instructionVar545 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 17i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3337:1, end:3337:2))"]
#[derive(Clone, Debug)]
struct ld_d_instructionVar546 {
    Re0811: TokenField_Re0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_d_instructionVar546 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.d"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 21i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3363:1, end:3363:2))"]
#[derive(Clone, Debug)]
struct ld_da_instructionVar547 {
    Rpe0811: TokenField_Rpe0811,
    Rpo0811: TokenField_Rpo0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_da_instructionVar547 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("ld.da"),
            DisplayElement::Literal(" "),
            self.Rpe0811.display(),
            DisplayElement::Literal("/"),
            self.Rpo0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Rpe0811 = token_parser.TokenFieldRpe0811();
        let Rpo0811 = token_parser.TokenFieldRpo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 23i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rpe0811,
                Rpo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3379:1, end:3379:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar548 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl ld_dd_instructionVar548 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 9i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 9i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3397:1, end:3397:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar549 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl ld_dd_instructionVar549 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 9i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 25i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3407:1, end:3407:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar550 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_dd_instructionVar550 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let ReN0811 = token_parser.TokenFieldReN0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 25i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                ReN0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3418:1, end:3418:2))"]
#[derive(Clone, Debug)]
struct ld_dd_instructionVar551 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl ld_dd_instructionVar551 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.dd"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 9i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 41i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3482:1, end:3482:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar552 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_h_instructionVar552 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 18i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3507:1, end:3507:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar553 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_hu_instructionVar553 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 19i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3546:1, end:3546:2))"]
#[derive(Clone, Debug)]
struct ld_q_instructionVar554 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_q_instructionVar554 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.q"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 24i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3615:1, end:3615:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar555 {
    Rd0811: TokenField_Rd0811,
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    off10: Tableoff10,
}
impl ld_w_instructionVar555 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(",["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 41i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 20i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3625:1, end:3625:2))"]
#[derive(Clone, Debug)]
struct ldlcx_instructionVar556 {
    off18: Tableoff18,
}
impl ldlcx_instructionVar556 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3660:1, end:3660:2))"]
#[derive(Clone, Debug)]
struct ldmst_instructionVar557 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off10: Tableoff10,
}
impl ldmst_instructionVar557 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("ldmst"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i128 {
            return None;
        }
        let Ree0811 = token_parser.TokenFieldRee0811();
        let Reo0811 = token_parser.TokenFieldReo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 17i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ree0811,
                Reo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3676:1, end:3676:2))"]
#[derive(Clone, Debug)]
struct lducx_instructionVar558 {
    off18: Tableoff18,
}
impl lducx_instructionVar558 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lducx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3696:1, end:3696:2))"]
#[derive(Clone, Debug)]
struct lea_instructionVar559 {
    Ra0811: TokenField_Ra0811,
    BO: TableBO,
}
impl lea_instructionVar559 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("lea"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 73i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 40i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7697:1, end:7697:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar560 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ra0811: TokenField_Ra0811,
    off10: Tableoff10,
}
impl st_a_instructionVar560 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 22i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ra0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7771:1, end:7771:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar561 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl st_b_instructionVar561 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 16i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7797:1, end:7797:2))"]
#[derive(Clone, Debug)]
struct st_d_instructionVar562 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Re0811: TokenField_Re0811,
    off10: Tableoff10,
}
impl st_d_instructionVar562 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.d"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Re0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 21i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7823:1, end:7823:2))"]
#[derive(Clone, Debug)]
struct st_da_instructionVar563 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rp0811: TokenField_Rp0811,
    off10: Tableoff10,
}
impl st_da_instructionVar563 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.da"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rp0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Rp0811 = token_parser.TokenFieldRp0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 23i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rp0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7839:1, end:7839:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar564 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl st_dd_instructionVar564 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 137i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 9i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7857:1, end:7857:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar565 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl st_dd_instructionVar565 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 137i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 25i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7867:1, end:7867:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar566 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    off10: Tableoff10,
}
impl st_dd_instructionVar566 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Re0811 = token_parser.TokenFieldRe0811();
        let ReN0811 = token_parser.TokenFieldReN0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 25i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Re0811,
                ReN0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7878:1, end:7878:2))"]
#[derive(Clone, Debug)]
struct st_dd_instructionVar567 {
    Re0811: TokenField_Re0811,
    ReN0811: TokenField_ReN0811,
    BO: TableBO,
}
impl st_dd_instructionVar567 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.dd"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Re0811.display(),
            DisplayElement::Literal("/"),
            self.ReN0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 137i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            let ReN0811 = token_parser.TokenFieldReN0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2227().disassembly() != 41i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811, ReN0811), pattern_len))
        };
        let ((), (Re0811, ReN0811), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Re0811,
                ReN0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7943:1, end:7943:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar568 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl st_h_instructionVar568 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 18i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7974:1, end:7974:2))"]
#[derive(Clone, Debug)]
struct st_q_instructionVar569 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl st_q_instructionVar569 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.q"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 24i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8054:1, end:8054:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar570 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl st_w_instructionVar570 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 169i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 20i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8064:1, end:8064:2))"]
#[derive(Clone, Debug)]
struct stlcx_instructionVar571 {
    off18: Tableoff18,
}
impl stlcx_instructionVar571 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stlcx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8079:1, end:8079:2))"]
#[derive(Clone, Debug)]
struct stucx_instructionVar572 {
    off18: Tableoff18,
}
impl stucx_instructionVar572 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("stucx"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 21i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8269:1, end:8269:2))"]
#[derive(Clone, Debug)]
struct swap_w_instructionVar573 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Rd0811: TokenField_Rd0811,
    off10: Tableoff10,
}
impl swap_w_instructionVar573 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("swap.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 16i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Rd0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8293:1, end:8293:2))"]
#[derive(Clone, Debug)]
struct swapmsk_w_instructionVar574 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off10: Tableoff10,
}
impl swapmsk_w_instructionVar574 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("swapmsk.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+c]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 105i128 {
            return None;
        }
        let Ree0811 = token_parser.TokenFieldRee0811();
        let Reo0811 = token_parser.TokenFieldReo0811();
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2227().disassembly() != 18i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off10,
                Ree0811,
                Reo0811,
                Rpe1215,
                Rpo1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3219:1, end:3219:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar575 {
    Ra0811: TokenField_Ra0811,
    off18: Tableoff18,
}
impl ld_a_instructionVar575 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3225:1, end:3225:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar576 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl ld_b_instructionVar576 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3304:1, end:3304:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar577 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl ld_bu_instructionVar577 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3330:1, end:3330:2))"]
#[derive(Clone, Debug)]
struct ld_d_instructionVar578 {
    Re0811: TokenField_Re0811,
    off18: Tableoff18,
}
impl ld_d_instructionVar578 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.d"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3373:1, end:3373:2))"]
#[derive(Clone, Debug)]
struct ld_da_instructionVar579 {
    Rp0811: TokenField_Rp0811,
    off18: Tableoff18,
}
impl ld_da_instructionVar579 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.da"),
            DisplayElement::Literal(" "),
            self.Rp0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i128 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3490:1, end:3490:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar580 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl ld_h_instructionVar580 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3515:1, end:3515:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar581 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl ld_hu_instructionVar581 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 5i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3528:1, end:3528:2))"]
#[derive(Clone, Debug)]
struct ld_q_instructionVar582 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl ld_q_instructionVar582 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.q"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 69i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3598:1, end:3598:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar583 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl ld_w_instructionVar583 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 133i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3652:1, end:3652:2))"]
#[derive(Clone, Debug)]
struct ldmst_instructionVar584 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    off18: Tableoff18,
}
impl ldmst_instructionVar584 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldmst"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c46 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 229i128 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c46(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off18,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3683:1, end:3683:2))"]
#[derive(Clone, Debug)]
struct lea_instructionVar585 {
    Ra0811: TokenField_Ra0811,
    off18: Tableoff18,
}
impl lea_instructionVar585 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("lea"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 197i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5051:1, end:5051:2))"]
#[derive(Clone, Debug)]
struct mfcr_instructionVar586 {
    Rd2831: TokenField_Rd2831,
    const1227Z: Tableconst1227Z,
}
impl mfcr_instructionVar586 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mfcr"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 77i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5164:1, end:5164:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar587 {
    Rd2831: TokenField_Rd2831,
    const1227S: Tableconst1227S,
}
impl mov_instructionVar587 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c40 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 59i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c40(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) = Tableconst1227S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227S, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5177:1, end:5177:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar588 {
    Re2831: TokenField_Re2831,
    const1227S: Tableconst1227S,
}
impl mov_instructionVar588 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Re2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c40 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 251i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Re2831 = token_parser.TokenFieldRe2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re2831), pattern_len))
        };
        let ((), (Re2831), sub_len) =
            sub_pattern_c40(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) = Tableconst1227S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227S, Re2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5254:1, end:5254:2))"]
#[derive(Clone, Debug)]
struct mov_u_instructionVar589 {
    Rd2831: TokenField_Rd2831,
    const1227Z: Tableconst1227Z,
}
impl mov_u_instructionVar589 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov.u"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c42 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 187i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c42(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5260:1, end:5260:2))"]
#[derive(Clone, Debug)]
struct movh_instructionVar590 {
    Rd2831: TokenField_Rd2831,
    const1227Z: Tableconst1227Z,
}
impl movh_instructionVar590 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("movh"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c41 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 123i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd2831), pattern_len))
        };
        let ((), (Rd2831), sub_len) =
            sub_pattern_c41(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Rd2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5266:1, end:5266:2))"]
#[derive(Clone, Debug)]
struct movh_a_instructionVar591 {
    Ra2831: TokenField_Ra2831,
    const1227Z: Tableconst1227Z,
}
impl movh_a_instructionVar591 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("movh.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 145i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Ra2831 = token_parser.TokenFieldRa2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra2831), pattern_len))
        };
        let ((), (Ra2831), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1227Z, Ra2831 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6767:1, end:6767:2))"]
#[derive(Clone, Debug)]
struct nand_t_instructionVar592 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl nand_t_instructionVar592 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nand.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6814:1, end:6814:2))"]
#[derive(Clone, Debug)]
struct not_instructionVar593 {
    Rd0811: TokenField_Rd0811,
}
impl not_instructionVar593 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("not"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 70i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6833:1, end:6833:2))"]
#[derive(Clone, Debug)]
struct nor_t_instructionVar594 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl nor_t_instructionVar594 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6869:1, end:6869:2))"]
#[derive(Clone, Debug)]
struct or_and_t_instructionVar595 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_and_t_instructionVar595 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6879:1, end:6879:2))"]
#[derive(Clone, Debug)]
struct or_andn_t_instructionVar596 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_andn_t_instructionVar596 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6961:1, end:6961:2))"]
#[derive(Clone, Debug)]
struct or_nor_t_instructionVar597 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_nor_t_instructionVar597 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6971:1, end:6971:2))"]
#[derive(Clone, Debug)]
struct or_or_t_instructionVar598 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_or_t_instructionVar598 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 199i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6981:1, end:6981:2))"]
#[derive(Clone, Debug)]
struct or_t_instructionVar599 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl or_t_instructionVar599 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 135i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7001:1, end:7001:2))"]
#[derive(Clone, Debug)]
struct orn_t_instructionVar600 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl orn_t_instructionVar600 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("orn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7220:1, end:7220:2))"]
#[derive(Clone, Debug)]
struct rsub_instructionVar601 {
    Rd0811: TokenField_Rd0811,
}
impl rsub_instructionVar601 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("rsub"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 5i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7252:1, end:7252:2))"]
#[derive(Clone, Debug)]
struct sat_b_instructionVar602 {
    Rd0811: TokenField_Rd0811,
}
impl sat_b_instructionVar602 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 0i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7270:1, end:7270:2))"]
#[derive(Clone, Debug)]
struct sat_bu_instructionVar603 {
    Rd0811: TokenField_Rd0811,
}
impl sat_bu_instructionVar603 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 1i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7284:1, end:7284:2))"]
#[derive(Clone, Debug)]
struct sat_h_instructionVar604 {
    Rd0811: TokenField_Rd0811,
}
impl sat_h_instructionVar604 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 2i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7302:1, end:7302:2))"]
#[derive(Clone, Debug)]
struct sat_hu_instructionVar605 {
    Rd0811: TokenField_Rd0811,
}
impl sat_hu_instructionVar605 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("sat.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 50i128 {
            return None;
        }
        if token_parser.TokenFieldop1215().disassembly() != 3i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7341:1, end:7341:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar606 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl sh_instructionVar606 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldop1515().disassembly() != 1i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7348:1, end:7348:2))"]
#[derive(Clone, Debug)]
struct sh_instructionVar607 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl sh_instructionVar607 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sh"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldop1515().disassembly() != 0i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7376:1, end:7376:2))"]
#[derive(Clone, Debug)]
struct sh_and_t_instructionVar608 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_and_t_instructionVar608 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.and.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7385:1, end:7385:2))"]
#[derive(Clone, Debug)]
struct sh_andn_t_instructionVar609 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_andn_t_instructionVar609 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.andn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7478:1, end:7478:2))"]
#[derive(Clone, Debug)]
struct sh_nand_t_instructionVar610 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_nand_t_instructionVar610 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.nand.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 0i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7499:1, end:7499:2))"]
#[derive(Clone, Debug)]
struct sh_nor_t_instructionVar611 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_nor_t_instructionVar611 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.nor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7508:1, end:7508:2))"]
#[derive(Clone, Debug)]
struct sh_or_t_instructionVar612 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_or_t_instructionVar612 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.or.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 39i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7517:1, end:7517:2))"]
#[derive(Clone, Debug)]
struct sh_orn_t_instructionVar613 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_orn_t_instructionVar613 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.orn.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 1i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7526:1, end:7526:2))"]
#[derive(Clone, Debug)]
struct sh_xnor_t_instructionVar614 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_xnor_t_instructionVar614 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.xnor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7535:1, end:7535:2))"]
#[derive(Clone, Debug)]
struct sh_xor_t_instructionVar615 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl sh_xor_t_instructionVar615 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("sh.xor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 167i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7705:1, end:7705:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar616 {
    Ra0811: TokenField_Ra0811,
    off18: Tableoff18,
}
impl st_a_instructionVar616 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7746:1, end:7746:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar617 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl st_b_instructionVar617 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 37i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7790:1, end:7790:2))"]
#[derive(Clone, Debug)]
struct st_d_instructionVar618 {
    Re0811: TokenField_Re0811,
    off18: Tableoff18,
}
impl st_d_instructionVar618 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.d"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Re0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 1i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7833:1, end:7833:2))"]
#[derive(Clone, Debug)]
struct st_da_instructionVar619 {
    Rp0811: TokenField_Rp0811,
    off18: Tableoff18,
}
impl st_da_instructionVar619 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.da"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rp0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c37 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i128 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 3i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c37(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7951:1, end:7951:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar620 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl st_h_instructionVar620 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 37i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7957:1, end:7957:2))"]
#[derive(Clone, Debug)]
struct st_q_instructionVar621 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl st_q_instructionVar621 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.q"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 101i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7982:1, end:7982:2))"]
#[derive(Clone, Debug)]
struct st_t_instructionVar622 {
    const0810Z: Tableconst0810Z,
    const1111Z: Tableconst1111Z,
    off18: Tableoff18,
}
impl st_t_instructionVar622 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.t"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const0810Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.const1111Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 213i128 {
                return None;
            }
            let const0810Z = if let Some((len, table)) = Tableconst0810Z::parse(
                tokens,
                &mut context_instance,
                inst_start,
            ) {
                block_0_len = block_0_len.max(len as u32);
                table
            } else {
                return None;
            };
            let const1111Z = if let Some((len, table)) = Tableconst1111Z::parse(
                tokens,
                &mut context_instance,
                inst_start,
            ) {
                block_0_len = block_0_len.max(len as u32);
                table
            } else {
                return None;
            };
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((const0810Z, const1111Z), (), pattern_len))
        };
        let ((mut const0810Z, mut const1111Z), (), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0810Z,
                const1111Z,
                off18,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8036:1, end:8036:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar623 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl st_w_instructionVar623 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c36 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 165i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c36(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8260:1, end:8260:2))"]
#[derive(Clone, Debug)]
struct swap_w_instructionVar624 {
    Rd0811: TokenField_Rd0811,
    off18: Tableoff18,
}
impl swap_w_instructionVar624 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swap.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off18.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c38 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 229i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2627().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c38(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off18 = if let Some((len, table)) =
            Tableoff18::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off18, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8422:1, end:8422:2))"]
#[derive(Clone, Debug)]
struct xnor_t_instructionVar625 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl xnor_t_instructionVar625 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xnor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 2i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8522:1, end:8522:2))"]
#[derive(Clone, Debug)]
struct xor_t_instructionVar626 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
    const1620Z: Tableconst1620Z,
    const2327Z: Tableconst2327Z,
}
impl xor_t_instructionVar626 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("xor.t"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1620Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const2327Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 7i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2122().disassembly() != 3i128 {
            return None;
        }
        let const1620Z = if let Some((len, table)) = Tableconst1620Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let const2327Z = if let Some((len, table)) = Tableconst2327Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd2831 = token_parser.TokenFieldRd2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1620Z,
                const2327Z,
                Rd0811,
                Rd1215,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1034:1, end:1034:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar627 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl add_instructionVar627 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 18i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1043:1, end:1043:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar628 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl add_instructionVar628 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 146i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1051:1, end:1051:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar629 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl add_instructionVar629 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 26i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1058:1, end:1058:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar630 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl add_instructionVar630 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 66i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1065:1, end:1065:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar631 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl add_instructionVar631 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 154i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1072:1, end:1072:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar632 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl add_instructionVar632 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 194i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1094:1, end:1094:2))"]
#[derive(Clone, Debug)]
struct add_a_instructionVar633 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl add_a_instructionVar633 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("add.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 48i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1102:1, end:1102:2))"]
#[derive(Clone, Debug)]
struct add_a_instructionVar634 {
    Ra0811: TokenField_Ra0811,
    const1215S: Tableconst1215S,
}
impl add_a_instructionVar634 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("add.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 176i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1167:1, end:1167:2))"]
#[derive(Clone, Debug)]
struct addi_instructionVar635 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1227S: Tableconst1227S,
}
impl addi_instructionVar635 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addi"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c48 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 27i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c48(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227S = if let Some((len, table)) = Tableconst1227S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227S,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1174:1, end:1174:2))"]
#[derive(Clone, Debug)]
struct addih_instructionVar636 {
    Rd2831: TokenField_Rd2831,
    Rd0811: TokenField_Rd0811,
    const1227Z: Tableconst1227Z,
}
impl addih_instructionVar636 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addih"),
            DisplayElement::Literal(" "),
            self.Rd2831.display(),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c49 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 155i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Rd2831 = token_parser.TokenFieldRd2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811, Rd2831), pattern_len))
        };
        let ((), (Rd0811, Rd2831), sub_len) =
            sub_pattern_c49(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227Z,
                Rd0811,
                Rd2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1181:1, end:1181:2))"]
#[derive(Clone, Debug)]
struct addih_a_instructionVar637 {
    Ra2831: TokenField_Ra2831,
    Ra0811: TokenField_Ra0811,
    const1227Z: Tableconst1227Z,
}
impl addih_a_instructionVar637 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("addih.a"),
            DisplayElement::Literal(" "),
            self.Ra2831.display(),
            DisplayElement::Literal(","),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1227Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c51 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 17i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            let Ra2831 = token_parser.TokenFieldRa2831();
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811, Ra2831), pattern_len))
        };
        let ((), (Ra0811, Ra2831), sub_len) =
            sub_pattern_c51(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let const1227Z = if let Some((len, table)) = Tableconst1227Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1227Z,
                Ra0811,
                Ra2831,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1187:1, end:1187:2))"]
#[derive(Clone, Debug)]
struct adds_instructionVar638 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl adds_instructionVar638 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("adds"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 34i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1290:1, end:1290:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar639 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl and_instructionVar639 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 38i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1298:1, end:1298:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar640 {
    const0815Z: Tableconst0815Z,
}
impl and_instructionVar640 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 22i128 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1450:1, end:1450:2))"]
#[derive(Clone, Debug)]
struct bisr_instructionVar641 {
    const0815Z: Tableconst0815Z,
}
impl bisr_instructionVar641 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bisr"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 224i128 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1678:1, end:1678:2))"]
#[derive(Clone, Debug)]
struct cadd_instructionVar642 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl cadd_instructionVar642 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("cadd"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 138i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1705:1, end:1705:2))"]
#[derive(Clone, Debug)]
struct caddn_instructionVar643 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl caddn_instructionVar643 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("caddn"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 202i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1733:1, end:1733:2))"]
#[derive(Clone, Debug)]
struct call_instructionVar644 {
    off0815pc8s: Tableoff0815pc8s,
}
impl call_instructionVar644 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("call"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 92i128 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1760:1, end:1760:2))"]
#[derive(Clone, Debug)]
struct call_instructionVar645 {
    off24pc: Tableoff24pc,
}
impl call_instructionVar645 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("call"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 109i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1786:1, end:1786:2))"]
#[derive(Clone, Debug)]
struct calla_instructionVar646 {
    off24abs: Tableoff24abs,
}
impl calla_instructionVar646 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("calla"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 237i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1884:1, end:1884:2))"]
#[derive(Clone, Debug)]
struct cmov_instructionVar647 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl cmov_instructionVar647 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 42i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1890:1, end:1890:2))"]
#[derive(Clone, Debug)]
struct cmov_instructionVar648 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl cmov_instructionVar648 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("cmov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 170i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1896:1, end:1896:2))"]
#[derive(Clone, Debug)]
struct cmovn_instructionVar649 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl cmovn_instructionVar649 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("cmovn"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 106i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1902:1, end:1902:2))"]
#[derive(Clone, Debug)]
struct cmovn_instructionVar650 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl cmovn_instructionVar650 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("cmovn"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 234i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2260:1, end:2260:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar651 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl eq_instructionVar651 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 58i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2266:1, end:2266:2))"]
#[derive(Clone, Debug)]
struct eq_instructionVar652 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl eq_instructionVar652 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("eq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 186i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2405:1, end:2405:2))"]
#[derive(Clone, Debug)]
struct fcall_instructionVar653 {
    off24pc: Tableoff24pc,
}
impl fcall_instructionVar653 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("fcall"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c32 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 97i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c32(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2417:1, end:2417:2))"]
#[derive(Clone, Debug)]
struct fcalla_instructionVar654 {
    off24abs: Tableoff24abs,
}
impl fcalla_instructionVar654 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("fcalla"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 225i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2780:1, end:2780:2))"]
#[derive(Clone, Debug)]
struct j_instructionVar655 {
    off0815pc8s: Tableoff0815pc8s,
}
impl j_instructionVar655 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("j"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 60i128 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2787:1, end:2787:2))"]
#[derive(Clone, Debug)]
struct j_instructionVar656 {
    off24pc: Tableoff24pc,
}
impl j_instructionVar656 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("j"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c28 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 29i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c28(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2793:1, end:2793:2))"]
#[derive(Clone, Debug)]
struct ja_instructionVar657 {
    off24abs: Tableoff24abs,
}
impl ja_instructionVar657 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("ja"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 157i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2800:1, end:2800:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar658 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl jeq_instructionVar658 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 190i128 {
            return None;
        }
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2808:1, end:2808:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar659 {
    const1215S: Tableconst1215S,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl jeq_instructionVar659 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 158i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z16,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2816:1, end:2816:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar660 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jeq_instructionVar660 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 62i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2824:1, end:2824:2))"]
#[derive(Clone, Debug)]
struct jeq_instructionVar661 {
    const1215S: Tableconst1215S,
    off0811pc4z: Tableoff0811pc4z,
}
impl jeq_instructionVar661 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jeq"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 30i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2874:1, end:2874:2))"]
#[derive(Clone, Debug)]
struct jgez_instructionVar662 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jgez_instructionVar662 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jgez"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 206i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2882:1, end:2882:2))"]
#[derive(Clone, Debug)]
struct jgtz_instructionVar663 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jgtz_instructionVar663 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jgtz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 78i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2917:1, end:2917:2))"]
#[derive(Clone, Debug)]
struct jl_instructionVar664 {
    off24pc: Tableoff24pc,
}
impl jl_instructionVar664 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jl"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c29 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 93i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c29(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24pc = if let Some((len, table)) = Tableoff24pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2925:1, end:2925:2))"]
#[derive(Clone, Debug)]
struct jla_instructionVar665 {
    off24abs: Tableoff24abs,
}
impl jla_instructionVar665 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jla"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.off24abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 221i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let off24abs = if let Some((len, table)) = Tableoff24abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off24abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2934:1, end:2934:2))"]
#[derive(Clone, Debug)]
struct jlez_instructionVar666 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jlez_instructionVar666 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jlez"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 142i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2976:1, end:2976:2))"]
#[derive(Clone, Debug)]
struct jltz_instructionVar667 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jltz_instructionVar667 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jltz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 14i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2984:1, end:2984:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar668 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl jne_instructionVar668 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 254i128 {
            return None;
        }
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z16,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:2992:1, end:2992:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar669 {
    const1215S: Tableconst1215S,
    off0811pc4z16: Tableoff0811pc4z16,
}
impl jne_instructionVar669 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 222i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z16 = if let Some((len, table)) =
            Tableoff0811pc4z16::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z16,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3000:1, end:3000:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar670 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jne_instructionVar670 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 126i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3008:1, end:3008:2))"]
#[derive(Clone, Debug)]
struct jne_instructionVar671 {
    const1215S: Tableconst1215S,
    off0811pc4z: Tableoff0811pc4z,
}
impl jne_instructionVar671 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jne"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 94i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215S,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3066:1, end:3066:2))"]
#[derive(Clone, Debug)]
struct jnz_instructionVar672 {
    off0815pc8s: Tableoff0815pc8s,
}
impl jnz_instructionVar672 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 238i128 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3074:1, end:3074:2))"]
#[derive(Clone, Debug)]
struct jnz_instructionVar673 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jnz_instructionVar673 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 246i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3082:1, end:3082:2))"]
#[derive(Clone, Debug)]
struct jnz_a_instructionVar674 {
    Ra1215: TokenField_Ra1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jnz_a_instructionVar674 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.a"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 124i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3096:1, end:3096:2))"]
#[derive(Clone, Debug)]
struct jnz_t_instructionVar675 {
    const1215Z: Tableconst1215Z,
    off0811pc4z: Tableoff0811pc4z,
}
impl jnz_t_instructionVar675 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.t"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 174i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3104:1, end:3104:2))"]
#[derive(Clone, Debug)]
struct jnz_t_instructionVar676 {
    Rd0811: TokenField_Rd0811,
    Nbit: TableNbit,
    off1630pc15s: Tableoff1630pc15s,
}
impl jnz_t_instructionVar676 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jnz.t"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Nbit.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0006().disassembly() != 111i128 {
            return None;
        }
        let Nbit = if let Some((len, table)) =
            TableNbit::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 1i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Nbit,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3112:1, end:3112:2))"]
#[derive(Clone, Debug)]
struct jz_instructionVar677 {
    off0815pc8s: Tableoff0815pc8s,
}
impl jz_instructionVar677 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0815pc8s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 110i128 {
            return None;
        }
        let off0815pc8s = if let Some((len, table)) = Tableoff0815pc8s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off0815pc8s }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3120:1, end:3120:2))"]
#[derive(Clone, Debug)]
struct jz_instructionVar678 {
    Rd1215: TokenField_Rd1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jz_instructionVar678 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz"),
            DisplayElement::Literal(" "),
            self.Rd1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 118i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Rd1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3127:1, end:3127:2))"]
#[derive(Clone, Debug)]
struct jz_a_instructionVar679 {
    Ra1215: TokenField_Ra1215,
    off0811pc4z: Tableoff0811pc4z,
}
impl jz_a_instructionVar679 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.a"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 188i128 {
            return None;
        }
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3140:1, end:3140:2))"]
#[derive(Clone, Debug)]
struct jz_t_instructionVar680 {
    const1215Z: Tableconst1215Z,
    off0811pc4z: Tableoff0811pc4z,
}
impl jz_t_instructionVar680 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.t"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off0811pc4z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 46i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let off0811pc4z = if let Some((len, table)) = Tableoff0811pc4z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const1215Z,
                off0811pc4z,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3148:1, end:3148:2))"]
#[derive(Clone, Debug)]
struct jz_t_instructionVar681 {
    Rd0811: TokenField_Rd0811,
    Nbit: TableNbit,
    off1630pc15s: Tableoff1630pc15s,
}
impl jz_t_instructionVar681 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("jz.t"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Nbit.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.off1630pc15s.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0006().disassembly() != 111i128 {
            return None;
        }
        let Nbit = if let Some((len, table)) =
            TableNbit::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop3131().disassembly() != 0i128 {
            return None;
        }
        let off1630pc15s = if let Some((len, table)) = Tableoff1630pc15s::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Nbit,
                off1630pc15s,
                Rd0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3156:1, end:3156:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar682 {
    SC: TableSC,
}
impl ld_a_instructionVar682 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 216i128 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3165:1, end:3165:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar683 {
    Ra0811: TokenField_Ra0811,
    SLRO: TableSLRO,
}
impl ld_a_instructionVar683 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 200i128 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3174:1, end:3174:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar684 {
    SRO: TableSRO,
}
impl ld_a_instructionVar684 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 204i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3192:1, end:3192:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar685 {
    Ra0811: TokenField_Ra0811,
    BOL: TableBOL,
}
impl ld_a_instructionVar685 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 153i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3251:1, end:3251:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar686 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl ld_b_instructionVar686 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 121i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3258:1, end:3258:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar687 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl ld_bu_instructionVar687 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 57i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3276:1, end:3276:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar688 {
    SRO: TableSRO,
}
impl ld_bu_instructionVar688 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 12i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3285:1, end:3285:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar689 {
    Rd0811: TokenField_Rd0811,
    SLRO: TableSLRO,
}
impl ld_bu_instructionVar689 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 8i128 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3447:1, end:3447:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar690 {
    SRO: TableSRO,
}
impl ld_h_instructionVar690 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 140i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3456:1, end:3456:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar691 {
    Rd0811: TokenField_Rd0811,
    SLRO: TableSLRO,
}
impl ld_h_instructionVar691 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 136i128 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3475:1, end:3475:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar692 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl ld_h_instructionVar692 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 201i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3521:1, end:3521:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar693 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl ld_hu_instructionVar693 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 185i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3555:1, end:3555:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar694 {
    SC: TableSC,
}
impl ld_w_instructionVar694 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 88i128 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3574:1, end:3574:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar695 {
    SRO: TableSRO,
}
impl ld_w_instructionVar695 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 76i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3583:1, end:3583:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar696 {
    Rd0811: TokenField_Rd0811,
    SLRO: TableSLRO,
}
impl ld_w_instructionVar696 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 72i128 {
            return None;
        }
        let SLRO = if let Some((len, table)) =
            TableSLRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3591:1, end:3591:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar697 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl ld_w_instructionVar697 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 25i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3689:1, end:3689:2))"]
#[derive(Clone, Debug)]
struct lea_instructionVar698 {
    Ra0811: TokenField_Ra0811,
    BOL: TableBOL,
}
impl lea_instructionVar698 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("lea"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 217i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3703:1, end:3703:2))"]
#[derive(Clone, Debug)]
struct loop_instructionVar699 {
    Ra1215: TokenField_Ra1215,
    off0811pc4o: Tableoff0811pc4o,
}
impl loop_instructionVar699 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("loop"),
            DisplayElement::Literal(" "),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.off0811pc4o.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 252i128 {
            return None;
        }
        let off0811pc4o = if let Some((len, table)) = Tableoff0811pc4o::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                off0811pc4o,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3727:1, end:3727:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar700 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl lt_instructionVar700 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 122i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3733:1, end:3733:2))"]
#[derive(Clone, Debug)]
struct lt_instructionVar701 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl lt_instructionVar701 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("lt"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 250i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5136:1, end:5136:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar702 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mov_instructionVar702 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 2i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5142:1, end:5142:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar703 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl mov_instructionVar703 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 130i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5149:1, end:5149:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar704 {
    Re0811: TokenField_Re0811,
    const1215S: Tableconst1215S,
}
impl mov_instructionVar704 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 210i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Re0811 = token_parser.TokenFieldRe0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5157:1, end:5157:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar705 {
    const0815Z: Tableconst0815Z,
}
impl mov_instructionVar705 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 218i128 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5205:1, end:5205:2))"]
#[derive(Clone, Debug)]
struct mov_a_instructionVar706 {
    Ra0811: TokenField_Ra0811,
    const1215Z: Tableconst1215Z,
}
impl mov_a_instructionVar706 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 160i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5213:1, end:5213:2))"]
#[derive(Clone, Debug)]
struct mov_a_instructionVar707 {
    Ra0811: TokenField_Ra0811,
    Rd1215: TokenField_Rd1215,
}
impl mov_a_instructionVar707 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 96i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5227:1, end:5227:2))"]
#[derive(Clone, Debug)]
struct mov_aa_instructionVar708 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
}
impl mov_aa_instructionVar708 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.aa"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 64i128 {
            return None;
        }
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra0811, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:5241:1, end:5241:2))"]
#[derive(Clone, Debug)]
struct mov_d_instructionVar709 {
    Rd0811: TokenField_Rd0811,
    Ra1215: TokenField_Ra1215,
}
impl mov_d_instructionVar709 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mov.d"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 128i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6386:1, end:6386:2))"]
#[derive(Clone, Debug)]
struct mul_instructionVar710 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl mul_instructionVar710 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mul"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 226i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6842:1, end:6842:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar711 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl or_instructionVar711 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 166i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:6850:1, end:6850:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar712 {
    const0815Z: Tableconst0815Z,
}
impl or_instructionVar712 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 150i128 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7545:1, end:7545:2))"]
#[derive(Clone, Debug)]
struct sha_instructionVar713 {
    Rd0811: TokenField_Rd0811,
    const1215S: Tableconst1215S,
}
impl sha_instructionVar713 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sha"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const1215S.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 134i128 {
            return None;
        }
        let const1215S = if let Some((len, table)) = Tableconst1215S::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215S, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7649:1, end:7649:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar714 {
    SC: TableSC,
}
impl st_a_instructionVar714 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::a15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 248i128 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7658:1, end:7658:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar715 {
    SRO: TableSRO,
}
impl st_a_instructionVar715 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::a15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 236i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7667:1, end:7667:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar716 {
    Ra0811: TokenField_Ra0811,
    SSRO: TableSSRO,
}
impl st_a_instructionVar716 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 232i128 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7711:1, end:7711:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar717 {
    Ra0811: TokenField_Ra0811,
    BOL: TableBOL,
}
impl st_a_instructionVar717 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 181i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7729:1, end:7729:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar718 {
    Rd0811: TokenField_Rd0811,
    SSRO: TableSSRO,
}
impl st_b_instructionVar718 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 40i128 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7738:1, end:7738:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar719 {
    SRO: TableSRO,
}
impl st_b_instructionVar719 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 44i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7752:1, end:7752:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar720 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl st_b_instructionVar720 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 233i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7907:1, end:7907:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar721 {
    Rd0811: TokenField_Rd0811,
    SSRO: TableSSRO,
}
impl st_h_instructionVar721 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 168i128 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7916:1, end:7916:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar722 {
    SRO: TableSRO,
}
impl st_h_instructionVar722 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 172i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7935:1, end:7935:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar723 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl st_h_instructionVar723 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 249i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7993:1, end:7993:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar724 {
    SC: TableSC,
}
impl st_w_instructionVar724 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 120i128 {
            return None;
        }
        let SC = if let Some((len, table)) =
            TableSC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SC }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8012:1, end:8012:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar725 {
    Rd0811: TokenField_Rd0811,
    SSRO: TableSSRO,
}
impl st_w_instructionVar725 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 104i128 {
            return None;
        }
        let SSRO = if let Some((len, table)) =
            TableSSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSRO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8021:1, end:8021:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar726 {
    SRO: TableSRO,
}
impl st_w_instructionVar726 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SRO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 108i128 {
            return None;
        }
        let SRO = if let Some((len, table)) =
            TableSRO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SRO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8029:1, end:8029:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar727 {
    Rd0811: TokenField_Rd0811,
    BOL: TableBOL,
}
impl st_w_instructionVar727 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BOL.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0007().disassembly() != 89i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BOL = if let Some((len, table)) =
            TableBOL::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BOL, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8095:1, end:8095:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar728 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sub_instructionVar728 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 82i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8103:1, end:8103:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar729 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sub_instructionVar729 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 7usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 90i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8110:1, end:8110:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar730 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl sub_instructionVar730 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 162i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8125:1, end:8125:2))"]
#[derive(Clone, Debug)]
struct sub_a_instructionVar731 {
    const0815Z: Tableconst0815Z,
}
impl sub_a_instructionVar731 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("sub.a"),
            DisplayElement::Literal(" "),
            DisplayElement::Register(Register::a10),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 32i128 {
            return None;
        }
        let const0815Z = if let Some((len, table)) = Tableconst0815Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8177:1, end:8177:2))"]
#[derive(Clone, Debug)]
struct subs_instructionVar732 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl subs_instructionVar732 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("subs"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 98i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8431:1, end:8431:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar733 {
    Rd0811: TokenField_Rd0811,
    Rd1215: TokenField_Rd1215,
}
impl xor_instructionVar733 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
            self.Rd1215.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0007().disassembly() != 198i128 {
            return None;
        }
        let Rd0811 = token_parser.TokenFieldRd0811();
        let Rd1215 = token_parser.TokenFieldRd1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rd0811, Rd1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:510:1, end:510:2))"]
#[derive(Clone, Debug)]
struct ldl_il_instructionVar734 {
    R0608: TokenField_R0608,
    imm16: Tableimm16,
}
impl ldl_il_instructionVar734 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ldl.il"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0005().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let imm16 = if let Some((len, table)) =
            Tableimm16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm16, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:521:1, end:521:2))"]
#[derive(Clone, Debug)]
struct ldl_iu_instructionVar735 {
    R0608: TokenField_R0608,
    imm16: Tableimm16,
}
impl ldl_iu_instructionVar735 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ldl.iu"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0005().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let imm16 = if let Some((len, table)) =
            Tableimm16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm16, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:421:1, end:421:2))"]
#[derive(Clone, Debug)]
struct jc_a_instructionVar736 {
    CONDCB: TableCONDCB,
    imm16abs: Tableimm16abs,
}
impl jc_a_instructionVar736 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("jc.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm16abs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0005().disassembly() != 0i128 {
            return None;
        }
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let imm16abs = if let Some((len, table)) = Tableimm16abs::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, imm16abs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1248:1, end:1248:2))"]
#[derive(Clone, Debug)]
struct addsc_a_instructionVar737 {
    Ra0811: TokenField_Ra0811,
    Ra1215: TokenField_Ra1215,
    const0607Z: Tableconst0607Z,
}
impl addsc_a_instructionVar737 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("addsc.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
            self.Ra1215.display(),
            DisplayElement::Literal(","),
            DisplayElement::Register(Register::d15),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.const0607Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0005().disassembly() != 16i128 {
            return None;
        }
        let const0607Z = if let Some((len, table)) = Tableconst0607Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0607Z,
                Ra0811,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1648:1, end:1648:2))"]
#[derive(Clone, Debug)]
struct cachei_i_instructionVar738 {
    BO: TableBO,
}
impl cachei_i_instructionVar738 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachei.i"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0407().disassembly() != 8i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 10i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1659:1, end:1659:2))"]
#[derive(Clone, Debug)]
struct cachei_w_instructionVar739 {
    BO: TableBO,
}
impl cachei_w_instructionVar739 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachei.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0407().disassembly() != 8i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 11i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1670:1, end:1670:2))"]
#[derive(Clone, Debug)]
struct cachei_wi_instructionVar740 {
    BO: TableBO,
}
impl cachei_wi_instructionVar740 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachei.wi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0407().disassembly() != 8i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 15i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1584:1, end:1584:2))"]
#[derive(Clone, Debug)]
struct cachea_i_instructionVar741 {
    BO: TableBO,
}
impl cachea_i_instructionVar741 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachea.i"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 14i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1606:1, end:1606:2))"]
#[derive(Clone, Debug)]
struct cachea_w_instructionVar742 {
    BO: TableBO,
}
impl cachea_w_instructionVar742 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachea.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c30 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 12i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c30(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1628:1, end:1628:2))"]
#[derive(Clone, Debug)]
struct cachea_wi_instructionVar743 {
    BO: TableBO,
}
impl cachea_wi_instructionVar743 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cachea.wi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c31 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            if token_parser.TokenFieldop0811().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 13i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c31(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:1913:1, end:1913:2))"]
#[derive(Clone, Debug)]
struct cmpswap_w_instructionVar744 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    BO: TableBO,
}
impl cmpswap_w_instructionVar744 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cmpswap.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i128 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 3i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3203:1, end:3203:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar745 {
    Ra0811: TokenField_Ra0811,
    BO: TableBO,
}
impl ld_a_instructionVar745 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 6i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3235:1, end:3235:2))"]
#[derive(Clone, Debug)]
struct ld_b_instructionVar746 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl ld_b_instructionVar746 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.b"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3297:1, end:3297:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar747 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl ld_bu_instructionVar747 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 1i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3323:1, end:3323:2))"]
#[derive(Clone, Debug)]
struct ld_d_instructionVar748 {
    Re0811: TokenField_Re0811,
    BO: TableBO,
}
impl ld_d_instructionVar748 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.d"),
            DisplayElement::Literal(" "),
            self.Re0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 5i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3355:1, end:3355:2))"]
#[derive(Clone, Debug)]
struct ld_da_instructionVar749 {
    Rp0811: TokenField_Rp0811,
    BO: TableBO,
}
impl ld_da_instructionVar749 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.da"),
            DisplayElement::Literal(" "),
            self.Rp0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 7i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3468:1, end:3468:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar750 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl ld_h_instructionVar750 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3500:1, end:3500:2))"]
#[derive(Clone, Debug)]
struct ld_hu_instructionVar751 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl ld_hu_instructionVar751 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.hu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 3i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3538:1, end:3538:2))"]
#[derive(Clone, Debug)]
struct ld_q_instructionVar752 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl ld_q_instructionVar752 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.q"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 8i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3608:1, end:3608:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar753 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl ld_w_instructionVar753 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 0i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 4i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3644:1, end:3644:2))"]
#[derive(Clone, Debug)]
struct ldmst_instructionVar754 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    BO: TableBO,
}
impl ldmst_instructionVar754 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ldmst"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c43 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i128 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 1i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c43(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7689:1, end:7689:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar755 {
    Ra0811: TokenField_Ra0811,
    BO: TableBO,
}
impl st_a_instructionVar755 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            let Ra0811 = token_parser.TokenFieldRa0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 6i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ra0811), pattern_len))
        };
        let ((), (Ra0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7763:1, end:7763:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar756 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl st_b_instructionVar756 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7783:1, end:7783:2))"]
#[derive(Clone, Debug)]
struct st_d_instructionVar757 {
    Re0811: TokenField_Re0811,
    BO: TableBO,
}
impl st_d_instructionVar757 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.d"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Re0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            let Re0811 = token_parser.TokenFieldRe0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 5i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Re0811), pattern_len))
        };
        let ((), (Re0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Re0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7815:1, end:7815:2))"]
#[derive(Clone, Debug)]
struct st_da_instructionVar758 {
    Rp0811: TokenField_Rp0811,
    BO: TableBO,
}
impl st_da_instructionVar758 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.da"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rp0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c34 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            let Rp0811 = token_parser.TokenFieldRp0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 7i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rp0811), pattern_len))
        };
        let ((), (Rp0811), sub_len) =
            sub_pattern_c34(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rp0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7928:1, end:7928:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar759 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl st_h_instructionVar759 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7967:1, end:7967:2))"]
#[derive(Clone, Debug)]
struct st_q_instructionVar760 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl st_q_instructionVar760 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.q"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 8i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8046:1, end:8046:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar761 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl st_w_instructionVar761 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c33 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 2i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 4i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c33(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8251:1, end:8251:2))"]
#[derive(Clone, Debug)]
struct swap_w_instructionVar762 {
    Rd0811: TokenField_Rd0811,
    BO: TableBO,
}
impl swap_w_instructionVar762 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swap.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c35 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i128 {
                return None;
            }
            let Rd0811 = token_parser.TokenFieldRd0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Rd0811), pattern_len))
        };
        let ((), (Rd0811), sub_len) =
            sub_pattern_c35(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { BO, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8284:1, end:8284:2))"]
#[derive(Clone, Debug)]
struct swapmsk_w_instructionVar763 {
    Ree0811: TokenField_Ree0811,
    Reo0811: TokenField_Reo0811,
    BO: TableBO,
}
impl swapmsk_w_instructionVar763 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swapmsk.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.BO.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal(","),
            self.Ree0811.display(),
            DisplayElement::Literal("/"),
            self.Reo0811.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let mut sub_pattern_c47 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop0607().disassembly() != 1i128 {
                return None;
            }
            let Ree0811 = token_parser.TokenFieldRee0811();
            let Reo0811 = token_parser.TokenFieldReo0811();
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 2u64 as u32;
            let token_parser = <TokenParser<2usize>>::new(tokens)?;
            if token_parser.TokenFieldop2225().disassembly() != 2i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (Ree0811, Reo0811), pattern_len))
        };
        let ((), (Ree0811, Reo0811), sub_len) =
            sub_pattern_c47(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let BO = if let Some((len, table)) =
            TableBO::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                BO,
                Ree0811,
                Reo0811,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3184:1, end:3184:2))"]
#[derive(Clone, Debug)]
struct ld_a_instructionVar764 {
    Ra0811: TokenField_Ra0811,
    SLR: TableSLR,
}
impl ld_a_instructionVar764 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.a"),
            DisplayElement::Literal(" "),
            self.Ra0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 3i128 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3267:1, end:3267:2))"]
#[derive(Clone, Debug)]
struct ld_bu_instructionVar765 {
    Rd0811: TokenField_Rd0811,
    SLR: TableSLR,
}
impl ld_bu_instructionVar765 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.bu"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i128 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3438:1, end:3438:2))"]
#[derive(Clone, Debug)]
struct ld_h_instructionVar766 {
    Rd0811: TokenField_Rd0811,
    SLR: TableSLR,
}
impl ld_h_instructionVar766 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.h"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i128 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:3565:1, end:3565:2))"]
#[derive(Clone, Debug)]
struct ld_w_instructionVar767 {
    Rd0811: TokenField_Rd0811,
    SLR: TableSLR,
}
impl ld_w_instructionVar767 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("ld.w"),
            DisplayElement::Literal(" "),
            self.Rd0811.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.SLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 1i128 {
            return None;
        }
        let SLR = if let Some((len, table)) =
            TableSLR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SLR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7677:1, end:7677:2))"]
#[derive(Clone, Debug)]
struct st_a_instructionVar768 {
    Ra0811: TokenField_Ra0811,
    SSR: TableSSR,
}
impl st_a_instructionVar768 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.a"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Ra0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 3i128 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra0811 = token_parser.TokenFieldRa0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Ra0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7720:1, end:7720:2))"]
#[derive(Clone, Debug)]
struct st_b_instructionVar769 {
    Rd0811: TokenField_Rd0811,
    SSR: TableSSR,
}
impl st_b_instructionVar769 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i128 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:7898:1, end:7898:2))"]
#[derive(Clone, Debug)]
struct st_h_instructionVar770 {
    Rd0811: TokenField_Rd0811,
    SSR: TableSSR,
}
impl st_h_instructionVar770 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.h"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i128 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:8003:1, end:8003:2))"]
#[derive(Clone, Debug)]
struct st_w_instructionVar771 {
    Rd0811: TokenField_Rd0811,
    SSR: TableSSR,
}
impl st_w_instructionVar771 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SSR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), self.Rd0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 1i128 {
            return None;
        }
        let SSR = if let Some((len, table)) =
            TableSSR::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Rd0811 = token_parser.TokenFieldRd0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SSR, Rd0811 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:363:1, end:363:2))"]
#[derive(Clone, Debug)]
struct dinit_instructionVar772 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl dinit_instructionVar772 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("dinit"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("<"),
            DisplayElement::Register(Register::R0),
            DisplayElement::Literal(">,"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:373:1, end:373:2))"]
#[derive(Clone, Debug)]
struct dstep_instructionVar773 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl dstep_instructionVar773 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("dstep"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("<"),
            DisplayElement::Register(Register::R0),
            DisplayElement::Literal(">,"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:544:1, end:544:2))"]
#[derive(Clone, Debug)]
struct minit_instructionVar774 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl minit_instructionVar774 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 10usize] = [
            DisplayElement::Literal("minit"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("<"),
            DisplayElement::Register(Register::R0),
            DisplayElement::Literal(">,"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:576:1, end:576:2))"]
#[derive(Clone, Debug)]
struct mstep_l_instructionVar775 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl mstep_l_instructionVar775 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mstep.l"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:583:1, end:583:2))"]
#[derive(Clone, Debug)]
struct mstep_u_instructionVar776 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl mstep_u_instructionVar776 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("mstep.u"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0608, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:206:1, end:206:2))"]
#[derive(Clone, Debug)]
struct add_f_instructionVar777 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl add_f_instructionVar777 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("add.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:245:1, end:245:2))"]
#[derive(Clone, Debug)]
struct and_f_instructionVar778 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl and_f_instructionVar778 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("and.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:280:1, end:280:2))"]
#[derive(Clone, Debug)]
struct clr_instructionVar779 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl clr_instructionVar779 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("clr"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:319:1, end:319:2))"]
#[derive(Clone, Debug)]
struct comp_f_instructionVar780 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl comp_f_instructionVar780 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("comp.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:401:1, end:401:2))"]
#[derive(Clone, Debug)]
struct inb_i_instructionVar781 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl inb_i_instructionVar781 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("inb.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:458:1, end:458:2))"]
#[derive(Clone, Debug)]
struct ld_f_instructionVar782 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl ld_f_instructionVar782 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ld.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:635:1, end:635:2))"]
#[derive(Clone, Debug)]
struct or_f_instructionVar783 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl or_f_instructionVar783 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("or.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:675:1, end:675:2))"]
#[derive(Clone, Debug)]
struct rl_instructionVar784 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl rl_instructionVar784 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("rl"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:690:1, end:690:2))"]
#[derive(Clone, Debug)]
struct rr_instructionVar785 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl rr_instructionVar785 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("rr"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:704:1, end:704:2))"]
#[derive(Clone, Debug)]
struct set_instructionVar786 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl set_instructionVar786 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("set"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:721:1, end:721:2))"]
#[derive(Clone, Debug)]
struct shl_instructionVar787 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl shl_instructionVar787 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("shl"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:732:1, end:732:2))"]
#[derive(Clone, Debug)]
struct shr_instructionVar788 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl shr_instructionVar788 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("shr"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:742:1, end:742:2))"]
#[derive(Clone, Debug)]
struct st_f_instructionVar789 {
    SIZE1W: TableSIZE1W,
}
impl st_f_instructionVar789 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.f"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1W.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1W = if let Some((len, table)) = TableSIZE1W::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1W }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:786:1, end:786:2))"]
#[derive(Clone, Debug)]
struct sub_f_instructionVar790 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl sub_f_instructionVar790 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sub.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:815:1, end:815:2))"]
#[derive(Clone, Debug)]
struct xch_f_instructionVar791 {
    SIZE1RW: TableSIZE1RW,
}
impl xch_f_instructionVar791 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xch.f"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1RW.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1RW = if let Some((len, table)) = TableSIZE1RW::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1RW }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:846:1, end:846:2))"]
#[derive(Clone, Debug)]
struct xor_f_instructionVar792 {
    R0608: TokenField_R0608,
    SIZE1: TableSIZE1,
}
impl xor_f_instructionVar792 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("xor.f"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0202().disassembly() != 0i128 {
            return None;
        }
        let SIZE1 = if let Some((len, table)) =
            TableSIZE1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE1, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:196:1, end:196:2))"]
#[derive(Clone, Debug)]
struct add_instructionVar793 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl add_instructionVar793 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("add"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:216:1, end:216:2))"]
#[derive(Clone, Debug)]
struct add_i_instructionVar794 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl add_i_instructionVar794 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("add.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i128 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:225:1, end:225:2))"]
#[derive(Clone, Debug)]
struct add_pi_instructionVar795 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl add_pi_instructionVar795 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("add.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 0i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:235:1, end:235:2))"]
#[derive(Clone, Debug)]
struct and_instructionVar796 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl and_instructionVar796 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("and"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:255:1, end:255:2))"]
#[derive(Clone, Debug)]
struct and_pi_instructionVar797 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl and_pi_instructionVar797 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("and.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 5i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:265:1, end:265:2))"]
#[derive(Clone, Debug)]
struct bcopy_instructionVar798 {
    DST: TableDST,
    SRC: TableSRC,
    CNC: TableCNC,
    CNT02: TableCNT02,
}
impl bcopy_instructionVar798 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bcopy"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.DST.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SRC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CNC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CNT02.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0404().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i128 {
            return None;
        }
        let DST = if let Some((len, table)) =
            TableDST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SRC = if let Some((len, table)) =
            TableSRC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNC = if let Some((len, table)) =
            TableCNC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNT02 = if let Some((len, table)) =
            TableCNT02::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                DST,
                SRC,
                CNC,
                CNT02,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:272:1, end:272:2))"]
#[derive(Clone, Debug)]
struct chkb_instructionVar799 {
    R0608: TokenField_R0608,
    SETCLR: TableSETCLR,
    imm5: Tableimm5,
}
impl chkb_instructionVar799 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("chkb"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SETCLR.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 14i128 {
            return None;
        }
        let SETCLR = if let Some((len, table)) = TableSETCLR::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                SETCLR,
                imm5,
                R0608,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:310:1, end:310:2))"]
#[derive(Clone, Debug)]
struct comp_instructionVar800 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl comp_instructionVar800 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("comp"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:328:1, end:328:2))"]
#[derive(Clone, Debug)]
struct comp_i_instructionVar801 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl comp_i_instructionVar801 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("comp.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i128 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:336:1, end:336:2))"]
#[derive(Clone, Debug)]
struct comp_pi_instructionVar802 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl comp_pi_instructionVar802 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("comp.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 2i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:354:1, end:354:2))"]
#[derive(Clone, Debug)]
struct debug_instructionVar803 {
    DAC: TableDAC,
    RTA: TableRTA,
    EDA: TableEDA,
    SDB: TableSDB,
    CONDCB: TableCONDCB,
}
impl debug_instructionVar803 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("debug"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.DAC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.RTA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.EDA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SDB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0405().disassembly() != 0i128 {
            return None;
        }
        let DAC = if let Some((len, table)) =
            TableDAC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let RTA = if let Some((len, table)) =
            TableRTA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let EDA = if let Some((len, table)) =
            TableEDA::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SDB = if let Some((len, table)) =
            TableSDB::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                DAC,
                RTA,
                EDA,
                SDB,
                CONDCB,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:392:1, end:392:2))"]
#[derive(Clone, Debug)]
struct inb_instructionVar804 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl inb_instructionVar804 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("inb"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 13i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:430:1, end:430:2))"]
#[derive(Clone, Debug)]
struct jc_i_instructionVar805 {
    R0305: TokenField_R0305,
    CONDCB: TableCONDCB,
}
impl jc_i_instructionVar805 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jc.i"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i128 {
            return None;
        }
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:440:1, end:440:2))"]
#[derive(Clone, Debug)]
struct jc_ia_instructionVar806 {
    R0305: TokenField_R0305,
    CONDCB: TableCONDCB,
}
impl jc_ia_instructionVar806 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("jc.ia"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0002().disassembly() != 0i128 {
            return None;
        }
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { CONDCB, R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:468:1, end:468:2))"]
#[derive(Clone, Debug)]
struct ld_i_instructionVar807 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl ld_i_instructionVar807 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ld.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 12i128 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:488:1, end:488:2))"]
#[derive(Clone, Debug)]
struct ld_p_instructionVar808 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl ld_p_instructionVar808 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("ld.p"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:500:1, end:500:2))"]
#[derive(Clone, Debug)]
struct ld_pi_instructionVar809 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl ld_pi_instructionVar809 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("ld.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 9i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:532:1, end:532:2))"]
#[derive(Clone, Debug)]
struct mclr_pi_instructionVar810 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl mclr_pi_instructionVar810 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mclr.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:553:1, end:553:2))"]
#[derive(Clone, Debug)]
struct mov_instructionVar811 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl mov_instructionVar811 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("mov"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 12i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:564:1, end:564:2))"]
#[derive(Clone, Debug)]
struct mset_pi_instructionVar812 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl mset_pi_instructionVar812 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("mset.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 6i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:590:1, end:590:2))"]
#[derive(Clone, Debug)]
struct neg_instructionVar813 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl neg_instructionVar813 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("neg"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 3i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:613:1, end:613:2))"]
#[derive(Clone, Debug)]
struct not_instructionVar814 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl not_instructionVar814 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("not"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 4i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:624:1, end:624:2))"]
#[derive(Clone, Debug)]
struct or_instructionVar815 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl or_instructionVar815 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("or"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:645:1, end:645:2))"]
#[derive(Clone, Debug)]
struct or_pi_instructionVar816 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl or_pi_instructionVar816 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("or.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 7i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:655:1, end:655:2))"]
#[derive(Clone, Debug)]
struct pri_instructionVar817 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl pri_instructionVar817 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("pri"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 14i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:758:1, end:758:2))"]
#[derive(Clone, Debug)]
struct st_p_instructionVar818 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl st_p_instructionVar818 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("st.p"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:768:1, end:768:2))"]
#[derive(Clone, Debug)]
struct st_pi_instructionVar819 {
    offset6W: Tableoffset6W,
}
impl st_pi_instructionVar819 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.pi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6W.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 10i128 {
            return None;
        }
        let offset6W = if let Some((len, table)) = Tableoffset6W::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6W }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:776:1, end:776:2))"]
#[derive(Clone, Debug)]
struct sub_instructionVar820 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl sub_instructionVar820 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("sub"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:797:1, end:797:2))"]
#[derive(Clone, Debug)]
struct sub_i_instructionVar821 {
    R0608: TokenField_R0608,
    imm6: Tableimm6,
}
impl sub_i_instructionVar821 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sub.i"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i128 {
            return None;
        }
        let imm6 = if let Some((len, table)) =
            Tableimm6::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:806:1, end:806:2))"]
#[derive(Clone, Debug)]
struct sub_pi_instructionVar822 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl sub_pi_instructionVar822 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("sub.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 1i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:825:1, end:825:2))"]
#[derive(Clone, Debug)]
struct xch_pi_instructionVar823 {
    offset6RW: Tableoffset6RW,
}
impl xch_pi_instructionVar823 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xch.pi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6RW.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 11i128 {
            return None;
        }
        let offset6RW = if let Some((len, table)) = Tableoffset6RW::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6RW }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:835:1, end:835:2))"]
#[derive(Clone, Debug)]
struct xor_instructionVar824 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
    CONDCA: TableCONDCA,
}
impl xor_instructionVar824 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            DisplayElement::Literal("xor"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            self.R0305.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.CONDCA.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i128 {
            return None;
        }
        let CONDCA = if let Some((len, table)) = TableCONDCA::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                CONDCA,
                R0608,
                R0305,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:856:1, end:856:2))"]
#[derive(Clone, Debug)]
struct xor_pi_instructionVar825 {
    R0608: TokenField_R0608,
    offset6: Tableoffset6,
}
impl xor_pi_instructionVar825 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("xor.pi"),
            DisplayElement::Literal(" "),
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.offset6.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0912().disassembly() != 8i128 {
            return None;
        }
        let offset6 = if let Some((len, table)) = Tableoffset6::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { offset6, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:288:1, end:288:2))"]
#[derive(Clone, Debug)]
struct clr_f_instructionVar826 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
    SIZE5: TableSIZE5,
}
impl clr_f_instructionVar826 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("clr.f"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SIZE5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 4i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, SIZE5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:385:1, end:385:2))"]
#[derive(Clone, Debug)]
struct exit_instructionVar827 {
    ST: TableST,
    EC: TableEC,
    INT: TableINT,
    EP: TableEP,
    CONDCAB: TableCONDCAB,
}
impl exit_instructionVar827 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("exit"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.ST.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.EC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.INT.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.EP.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CONDCAB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0406().disassembly() != 0i128 {
            return None;
        }
        let ST = if let Some((len, table)) =
            TableST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let EC = if let Some((len, table)) =
            TableEC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let INT = if let Some((len, table)) =
            TableINT::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let EP = if let Some((len, table)) =
            TableEP::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CONDCAB = if let Some((len, table)) = TableCONDCAB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                ST,
                EC,
                INT,
                EP,
                CONDCAB,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:412:1, end:412:2))"]
#[derive(Clone, Debug)]
struct jc_instructionVar828 {
    imm6pc: Tableimm6pc,
    CONDCB: TableCONDCB,
}
impl jc_instructionVar828 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jc"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.imm6pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CONDCB.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 1i128 {
            return None;
        }
        let imm6pc = if let Some((len, table)) = Tableimm6pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CONDCB = if let Some((len, table)) = TableCONDCB::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm6pc, CONDCB }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:450:1, end:450:2))"]
#[derive(Clone, Debug)]
struct jl_instructionVar829 {
    imm10pc: Tableimm10pc,
}
impl jl_instructionVar829 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("jl"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.imm10pc.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 0i128 {
            return None;
        }
        let imm10pc = if let Some((len, table)) = Tableimm10pc::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm10pc }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:478:1, end:478:2))"]
#[derive(Clone, Debug)]
struct ld_if_instructionVar830 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
    SIZE5: TableSIZE5,
}
impl ld_if_instructionVar830 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("ld.if"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SIZE5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 5i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, SIZE5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:712:1, end:712:2))"]
#[derive(Clone, Debug)]
struct set_f_instructionVar831 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
    SIZE5: TableSIZE5,
}
impl set_f_instructionVar831 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            DisplayElement::Literal("set.f"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SIZE5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 3i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE5 = if let Some((len, table)) =
            TableSIZE5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, SIZE5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:750:1, end:750:2))"]
#[derive(Clone, Debug)]
struct st_if_instructionVar832 {
    SIZE5W: TableSIZE5W,
}
impl st_if_instructionVar832 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("st.if"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.SIZE5W.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1012().disassembly() != 6i128 {
            return None;
        }
        let SIZE5W = if let Some((len, table)) = TableSIZE5W::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { SIZE5W }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:345:1, end:345:2))"]
#[derive(Clone, Debug)]
struct copy_instructionVar833 {
    DST: TableDST,
    SRC: TableSRC,
    CNC: TableCNC,
    CNT03: TableCNT03,
    SIZE0: TableSIZE0,
}
impl copy_instructionVar833 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("copy"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.DST.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SRC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CNC.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.CNT03.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal(","), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.SIZE0.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldaddrmode().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1212().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op1111().disassembly() != 1i128 {
            return None;
        }
        let DST = if let Some((len, table)) =
            TableDST::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SRC = if let Some((len, table)) =
            TableSRC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNC = if let Some((len, table)) =
            TableCNC::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let CNT03 = if let Some((len, table)) =
            TableCNT03::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let SIZE0 = if let Some((len, table)) =
            TableSIZE0::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                DST,
                SRC,
                CNC,
                CNT03,
                SIZE0,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableinstruction {
    Var0(debug_instructionVar0),
    Var1(disable_instructionVar1),
    Var2(dsync_instructionVar2),
    Var3(enable_instructionVar3),
    Var4(fret_instructionVar4),
    Var5(isync_instructionVar5),
    Var6(ji_instructionVar6),
    Var7(nop_instructionVar7),
    Var8(ret_instructionVar8),
    Var9(rfe_instructionVar9),
    Var10(rfm_instructionVar10),
    Var11(rslcx_instructionVar11),
    Var12(rstv_instructionVar12),
    Var13(svlcx_instructionVar13),
    Var14(tlbflush_a_instructionVar14),
    Var15(tlbflush_b_instructionVar15),
    Var16(trapsv_instructionVar16),
    Var17(trapv_instructionVar17),
    Var18(wait_instructionVar18),
    Var19(abs_instructionVar19),
    Var20(abs_b_instructionVar20),
    Var21(abs_h_instructionVar21),
    Var22(abss_instructionVar22),
    Var23(abss_h_instructionVar23),
    Var24(calli_instructionVar24),
    Var25(disable_instructionVar25),
    Var26(fcalli_instructionVar26),
    Var27(ji_instructionVar27),
    Var28(jli_instructionVar28),
    Var29(restore_instructionVar29),
    Var30(tlbdemap_instructionVar30),
    Var31(tlbmap_instructionVar31),
    Var32(tlbprobe_a_instructionVar32),
    Var33(tlbprobe_i_instructionVar33),
    Var34(updfl_instructionVar34),
    Var35(bsplit_instructionVar35),
    Var36(clo_instructionVar36),
    Var37(clo_h_instructionVar37),
    Var38(cls_instructionVar38),
    Var39(cls_h_instructionVar39),
    Var40(clz_instructionVar40),
    Var41(clz_h_instructionVar41),
    Var42(eqz_a_instructionVar42),
    Var43(ftoi_instructionVar43),
    Var44(ftoiz_instructionVar44),
    Var45(ftou_instructionVar45),
    Var46(ftouz_instructionVar46),
    Var47(itof_instructionVar47),
    Var48(ld_dd_instructionVar48),
    Var49(ld_dd_instructionVar49),
    Var50(mffr_instructionVar50),
    Var51(mov_instructionVar51),
    Var52(mov_instructionVar52),
    Var53(mov_a_instructionVar53),
    Var54(mov_aa_instructionVar54),
    Var55(mov_d_instructionVar55),
    Var56(mtfr_instructionVar56),
    Var57(nez_a_instructionVar57),
    Var58(parity_instructionVar58),
    Var59(qseed_f_instructionVar59),
    Var60(sat_b_instructionVar60),
    Var61(sat_bu_instructionVar61),
    Var62(sat_h_instructionVar62),
    Var63(sat_hu_instructionVar63),
    Var64(st_dd_instructionVar64),
    Var65(st_dd_instructionVar65),
    Var66(unpack_instructionVar66),
    Var67(utof_instructionVar67),
    Var68(absdif_instructionVar68),
    Var69(absdif_b_instructionVar69),
    Var70(absdif_h_instructionVar70),
    Var71(absdifs_instructionVar71),
    Var72(absdifs_h_instructionVar72),
    Var73(add_instructionVar73),
    Var74(add_a_instructionVar74),
    Var75(add_b_instructionVar75),
    Var76(add_h_instructionVar76),
    Var77(addc_instructionVar77),
    Var78(adds_instructionVar78),
    Var79(adds_h_instructionVar79),
    Var80(adds_hu_instructionVar80),
    Var81(adds_u_instructionVar81),
    Var82(addsc_at_instructionVar82),
    Var83(addx_instructionVar83),
    Var84(and_instructionVar84),
    Var85(and_eq_instructionVar85),
    Var86(and_ge_instructionVar86),
    Var87(and_ge_u_instructionVar87),
    Var88(and_lt_instructionVar88),
    Var89(and_lt_u_instructionVar89),
    Var90(and_ne_instructionVar90),
    Var91(andn_instructionVar91),
    Var92(bmerge_instructionVar92),
    Var93(cmp_f_instructionVar93),
    Var94(crc32_instructionVar94),
    Var95(div_instructionVar95),
    Var96(div_u_instructionVar96),
    Var97(div_f_instructionVar97),
    Var98(dvinit_instructionVar98),
    Var99(dvinit_b_instructionVar99),
    Var100(dvinit_bu_instructionVar100),
    Var101(dvinit_h_instructionVar101),
    Var102(dvinit_hu_instructionVar102),
    Var103(dvinit_u_instructionVar103),
    Var104(eq_instructionVar104),
    Var105(eq_a_instructionVar105),
    Var106(eq_b_instructionVar106),
    Var107(eq_h_instructionVar107),
    Var108(eq_w_instructionVar108),
    Var109(eqany_b_instructionVar109),
    Var110(eqany_h_instructionVar110),
    Var111(ftoq31_instructionVar111),
    Var112(ftoq31z_instructionVar112),
    Var113(ge_instructionVar113),
    Var114(ge_a_instructionVar114),
    Var115(ge_u_instructionVar115),
    Var116(lt_instructionVar116),
    Var117(lt_a_instructionVar117),
    Var118(lt_b_instructionVar118),
    Var119(lt_bu_instructionVar119),
    Var120(lt_h_instructionVar120),
    Var121(lt_hu_instructionVar121),
    Var122(lt_u_instructionVar122),
    Var123(lt_w_instructionVar123),
    Var124(lt_wu_instructionVar124),
    Var125(max_instructionVar125),
    Var126(max_b_instructionVar126),
    Var127(max_bu_instructionVar127),
    Var128(max_h_instructionVar128),
    Var129(max_hu_instructionVar129),
    Var130(max_u_instructionVar130),
    Var131(min_instructionVar131),
    Var132(min_b_instructionVar132),
    Var133(min_bu_instructionVar133),
    Var134(min_h_instructionVar134),
    Var135(min_hu_instructionVar135),
    Var136(min_u_instructionVar136),
    Var137(mov_instructionVar137),
    Var138(mul_instructionVar138),
    Var139(mul_instructionVar139),
    Var140(mul_f_instructionVar140),
    Var141(mul_u_instructionVar141),
    Var142(muls_instructionVar142),
    Var143(muls_u_instructionVar143),
    Var144(nand_instructionVar144),
    Var145(ne_instructionVar145),
    Var146(ne_a_instructionVar146),
    Var147(nor_instructionVar147),
    Var148(or_instructionVar148),
    Var149(or_eq_instructionVar149),
    Var150(or_ge_instructionVar150),
    Var151(or_ge_u_instructionVar151),
    Var152(or_lt_instructionVar152),
    Var153(or_lt_u_instructionVar153),
    Var154(or_ne_instructionVar154),
    Var155(orn_instructionVar155),
    Var156(q31tof_instructionVar156),
    Var157(sh_instructionVar157),
    Var158(sh_eq_instructionVar158),
    Var159(sh_ge_instructionVar159),
    Var160(sh_ge_u_instructionVar160),
    Var161(sh_h_instructionVar161),
    Var162(sh_lt_instructionVar162),
    Var163(sh_lt_u_instructionVar163),
    Var164(sh_ne_instructionVar164),
    Var165(sha_instructionVar165),
    Var166(sha_h_instructionVar166),
    Var167(shas_instructionVar167),
    Var168(sub_instructionVar168),
    Var169(sub_a_instructionVar169),
    Var170(sub_b_instructionVar170),
    Var171(sub_h_instructionVar171),
    Var172(subc_instructionVar172),
    Var173(subs_instructionVar173),
    Var174(subs_h_instructionVar174),
    Var175(subs_hu_instructionVar175),
    Var176(subs_u_instructionVar176),
    Var177(subx_instructionVar177),
    Var178(xnor_instructionVar178),
    Var179(xor_instructionVar179),
    Var180(xor_eq_instructionVar180),
    Var181(xor_ge_instructionVar181),
    Var182(xor_ge_u_instructionVar182),
    Var183(xor_lt_instructionVar183),
    Var184(xor_lt_u_instructionVar184),
    Var185(xor_ne_instructionVar185),
    Var186(xpose_b_instructionVar186),
    Var187(xpose_h_instructionVar187),
    Var188(addsc_a_instructionVar188),
    Var189(bisr_instructionVar189),
    Var190(mul_h_instructionVar190),
    Var191(mul_h_instructionVar191),
    Var192(mul_h_instructionVar192),
    Var193(mul_h_instructionVar193),
    Var194(mul_q_instructionVar194),
    Var195(mul_q_instructionVar195),
    Var196(mul_q_instructionVar196),
    Var197(mul_q_instructionVar197),
    Var198(mul_q_instructionVar198),
    Var199(mul_q_instructionVar199),
    Var200(mul_q_instructionVar200),
    Var201(mul_q_instructionVar201),
    Var202(mulm_h_instructionVar202),
    Var203(mulm_h_instructionVar203),
    Var204(mulm_h_instructionVar204),
    Var205(mulm_h_instructionVar205),
    Var206(mulr_h_instructionVar206),
    Var207(mulr_h_instructionVar207),
    Var208(mulr_h_instructionVar208),
    Var209(mulr_h_instructionVar209),
    Var210(mulr_q_instructionVar210),
    Var211(mulr_q_instructionVar211),
    Var212(sh_instructionVar212),
    Var213(sh_instructionVar213),
    Var214(syscall_instructionVar214),
    Var215(absdif_instructionVar215),
    Var216(absdifs_instructionVar216),
    Var217(add_instructionVar217),
    Var218(add_f_instructionVar218),
    Var219(addc_instructionVar219),
    Var220(adds_instructionVar220),
    Var221(adds_u_instructionVar221),
    Var222(addx_instructionVar222),
    Var223(and_instructionVar223),
    Var224(and_eq_instructionVar224),
    Var225(and_ge_instructionVar225),
    Var226(and_ge_u_instructionVar226),
    Var227(and_lt_instructionVar227),
    Var228(and_lt_u_instructionVar228),
    Var229(and_ne_instructionVar229),
    Var230(andn_instructionVar230),
    Var231(dvadj_instructionVar231),
    Var232(dvstep_instructionVar232),
    Var233(dvstep_u_instructionVar233),
    Var234(extr_instructionVar234),
    Var235(extr_u_instructionVar235),
    Var236(ixmax_instructionVar236),
    Var237(ixmax_u_instructionVar237),
    Var238(ixmin_instructionVar238),
    Var239(ixmin_u_instructionVar239),
    Var240(pack_instructionVar240),
    Var241(sub_f_instructionVar241),
    Var242(cadd_instructionVar242),
    Var243(caddn_instructionVar243),
    Var244(csub_instructionVar244),
    Var245(csubn_instructionVar245),
    Var246(dextr_instructionVar246),
    Var247(eq_instructionVar247),
    Var248(eqany_b_instructionVar248),
    Var249(eqany_h_instructionVar249),
    Var250(extr_instructionVar250),
    Var251(extr_u_instructionVar251),
    Var252(ge_instructionVar252),
    Var253(ge_u_instructionVar253),
    Var254(imask_instructionVar254),
    Var255(imask_instructionVar255),
    Var256(insert_instructionVar256),
    Var257(insert_instructionVar257),
    Var258(lt_instructionVar258),
    Var259(lt_u_instructionVar259),
    Var260(madd_instructionVar260),
    Var261(madd_instructionVar261),
    Var262(madd_f_instructionVar262),
    Var263(madd_u_instructionVar263),
    Var264(madds_instructionVar264),
    Var265(madds_instructionVar265),
    Var266(madds_u_instructionVar266),
    Var267(madds_u_instructionVar267),
    Var268(msub_instructionVar268),
    Var269(msub_instructionVar269),
    Var270(msub_f_instructionVar270),
    Var271(msub_u_instructionVar271),
    Var272(msubs_instructionVar272),
    Var273(msubs_instructionVar273),
    Var274(msubs_u_instructionVar274),
    Var275(msubs_u_instructionVar275),
    Var276(sel_instructionVar276),
    Var277(seln_instructionVar277),
    Var278(madd_h_instructionVar278),
    Var279(madd_h_instructionVar279),
    Var280(madd_h_instructionVar280),
    Var281(madd_h_instructionVar281),
    Var282(madd_q_instructionVar282),
    Var283(madd_q_instructionVar283),
    Var284(madd_q_instructionVar284),
    Var285(madd_q_instructionVar285),
    Var286(madd_q_instructionVar286),
    Var287(madd_q_instructionVar287),
    Var288(madd_q_instructionVar288),
    Var289(madd_q_instructionVar289),
    Var290(madd_q_instructionVar290),
    Var291(madd_q_instructionVar291),
    Var292(maddm_h_instructionVar292),
    Var293(maddm_h_instructionVar293),
    Var294(maddm_h_instructionVar294),
    Var295(maddm_h_instructionVar295),
    Var296(maddms_h_instructionVar296),
    Var297(maddms_h_instructionVar297),
    Var298(maddms_h_instructionVar298),
    Var299(maddms_h_instructionVar299),
    Var300(maddr_h_instructionVar300),
    Var301(maddr_h_instructionVar301),
    Var302(maddr_h_instructionVar302),
    Var303(maddr_h_instructionVar303),
    Var304(maddr_h_instructionVar304),
    Var305(maddr_q_instructionVar305),
    Var306(maddr_q_instructionVar306),
    Var307(maddrs_h_instructionVar307),
    Var308(maddrs_h_instructionVar308),
    Var309(maddrs_h_instructionVar309),
    Var310(maddrs_h_instructionVar310),
    Var311(maddrs_h_instructionVar311),
    Var312(maddrs_q_instructionVar312),
    Var313(maddrs_q_instructionVar313),
    Var314(madds_h_instructionVar314),
    Var315(madds_h_instructionVar315),
    Var316(madds_h_instructionVar316),
    Var317(madds_h_instructionVar317),
    Var318(madds_q_instructionVar318),
    Var319(madds_q_instructionVar319),
    Var320(madds_q_instructionVar320),
    Var321(madds_q_instructionVar321),
    Var322(madds_q_instructionVar322),
    Var323(madds_q_instructionVar323),
    Var324(madds_q_instructionVar324),
    Var325(madds_q_instructionVar325),
    Var326(madds_q_instructionVar326),
    Var327(madds_q_instructionVar327),
    Var328(maddsu_h_instructionVar328),
    Var329(maddsu_h_instructionVar329),
    Var330(maddsu_h_instructionVar330),
    Var331(maddsu_h_instructionVar331),
    Var332(maddsum_h_instructionVar332),
    Var333(maddsum_h_instructionVar333),
    Var334(maddsum_h_instructionVar334),
    Var335(maddsum_h_instructionVar335),
    Var336(maddsums_h_instructionVar336),
    Var337(maddsums_h_instructionVar337),
    Var338(maddsums_h_instructionVar338),
    Var339(maddsums_h_instructionVar339),
    Var340(maddsur_h_instructionVar340),
    Var341(maddsur_h_instructionVar341),
    Var342(maddsur_h_instructionVar342),
    Var343(maddsur_h_instructionVar343),
    Var344(maddsurs_h_instructionVar344),
    Var345(maddsurs_h_instructionVar345),
    Var346(maddsurs_h_instructionVar346),
    Var347(maddsurs_h_instructionVar347),
    Var348(maddsus_h_instructionVar348),
    Var349(maddsus_h_instructionVar349),
    Var350(maddsus_h_instructionVar350),
    Var351(maddsus_h_instructionVar351),
    Var352(max_instructionVar352),
    Var353(max_u_instructionVar353),
    Var354(min_instructionVar354),
    Var355(min_u_instructionVar355),
    Var356(msub_h_instructionVar356),
    Var357(msub_h_instructionVar357),
    Var358(msub_h_instructionVar358),
    Var359(msub_h_instructionVar359),
    Var360(msub_q_instructionVar360),
    Var361(msub_q_instructionVar361),
    Var362(msub_q_instructionVar362),
    Var363(msub_q_instructionVar363),
    Var364(msub_q_instructionVar364),
    Var365(msub_q_instructionVar365),
    Var366(msub_q_instructionVar366),
    Var367(msub_q_instructionVar367),
    Var368(msub_q_instructionVar368),
    Var369(msub_q_instructionVar369),
    Var370(msubad_h_instructionVar370),
    Var371(msubad_h_instructionVar371),
    Var372(msubad_h_instructionVar372),
    Var373(msubad_h_instructionVar373),
    Var374(msubadm_h_instructionVar374),
    Var375(msubadm_h_instructionVar375),
    Var376(msubadm_h_instructionVar376),
    Var377(msubadm_h_instructionVar377),
    Var378(msubadms_h_instructionVar378),
    Var379(msubadms_h_instructionVar379),
    Var380(msubadms_h_instructionVar380),
    Var381(msubadms_h_instructionVar381),
    Var382(msubadr_h_instructionVar382),
    Var383(msubadr_h_instructionVar383),
    Var384(msubadr_h_instructionVar384),
    Var385(msubadr_h_instructionVar385),
    Var386(msubadrs_h_instructionVar386),
    Var387(msubadrs_h_instructionVar387),
    Var388(msubadrs_h_instructionVar388),
    Var389(msubadrs_h_instructionVar389),
    Var390(msubads_h_instructionVar390),
    Var391(msubads_h_instructionVar391),
    Var392(msubads_h_instructionVar392),
    Var393(msubads_h_instructionVar393),
    Var394(msubm_h_instructionVar394),
    Var395(msubm_h_instructionVar395),
    Var396(msubm_h_instructionVar396),
    Var397(msubm_h_instructionVar397),
    Var398(msubms_h_instructionVar398),
    Var399(msubms_h_instructionVar399),
    Var400(msubms_h_instructionVar400),
    Var401(msubms_h_instructionVar401),
    Var402(msubr_h_instructionVar402),
    Var403(msubr_h_instructionVar403),
    Var404(msubr_h_instructionVar404),
    Var405(msubr_h_instructionVar405),
    Var406(msubr_h_instructionVar406),
    Var407(msubr_q_instructionVar407),
    Var408(msubr_q_instructionVar408),
    Var409(msubrs_h_instructionVar409),
    Var410(msubrs_h_instructionVar410),
    Var411(msubrs_h_instructionVar411),
    Var412(msubrs_h_instructionVar412),
    Var413(msubrs_h_instructionVar413),
    Var414(msubrs_q_instructionVar414),
    Var415(msubrs_q_instructionVar415),
    Var416(msubs_h_instructionVar416),
    Var417(msubs_h_instructionVar417),
    Var418(msubs_h_instructionVar418),
    Var419(msubs_h_instructionVar419),
    Var420(msubs_q_instructionVar420),
    Var421(msubs_q_instructionVar421),
    Var422(msubs_q_instructionVar422),
    Var423(msubs_q_instructionVar423),
    Var424(msubs_q_instructionVar424),
    Var425(msubs_q_instructionVar425),
    Var426(msubs_q_instructionVar426),
    Var427(msubs_q_instructionVar427),
    Var428(msubs_q_instructionVar428),
    Var429(msubs_q_instructionVar429),
    Var430(mul_instructionVar430),
    Var431(mul_instructionVar431),
    Var432(mul_u_instructionVar432),
    Var433(muls_instructionVar433),
    Var434(muls_u_instructionVar434),
    Var435(nand_instructionVar435),
    Var436(ne_instructionVar436),
    Var437(nor_instructionVar437),
    Var438(or_instructionVar438),
    Var439(or_eq_instructionVar439),
    Var440(or_ge_instructionVar440),
    Var441(or_ge_u_instructionVar441),
    Var442(or_lt_instructionVar442),
    Var443(or_lt_u_instructionVar443),
    Var444(or_ne_instructionVar444),
    Var445(orn_instructionVar445),
    Var446(rsub_instructionVar446),
    Var447(rsubs_instructionVar447),
    Var448(rsubs_u_instructionVar448),
    Var449(sh_eq_instructionVar449),
    Var450(sh_ge_instructionVar450),
    Var451(sh_ge_u_instructionVar451),
    Var452(sh_h_instructionVar452),
    Var453(sh_lt_instructionVar453),
    Var454(sh_lt_u_instructionVar454),
    Var455(sh_ne_instructionVar455),
    Var456(sha_instructionVar456),
    Var457(sha_h_instructionVar457),
    Var458(shas_instructionVar458),
    Var459(xnor_instructionVar459),
    Var460(xor_instructionVar460),
    Var461(xor_eq_instructionVar461),
    Var462(xor_ge_instructionVar462),
    Var463(xor_ge_u_instructionVar463),
    Var464(xor_lt_instructionVar464),
    Var465(xor_lt_u_instructionVar465),
    Var466(xor_ne_instructionVar466),
    Var467(cadd_instructionVar467),
    Var468(caddn_instructionVar468),
    Var469(dextr_instructionVar469),
    Var470(extr_instructionVar470),
    Var471(extr_u_instructionVar471),
    Var472(imask_instructionVar472),
    Var473(imask_instructionVar473),
    Var474(insert_instructionVar474),
    Var475(insert_instructionVar475),
    Var476(madd_instructionVar476),
    Var477(madd_instructionVar477),
    Var478(madd_u_instructionVar478),
    Var479(madds_instructionVar479),
    Var480(madds_instructionVar480),
    Var481(madds_u_instructionVar481),
    Var482(madds_u_instructionVar482),
    Var483(msub_instructionVar483),
    Var484(msub_instructionVar484),
    Var485(msub_u_instructionVar485),
    Var486(msubs_instructionVar486),
    Var487(msubs_instructionVar487),
    Var488(msubs_u_instructionVar488),
    Var489(msubs_u_instructionVar489),
    Var490(sel_instructionVar490),
    Var491(seln_instructionVar491),
    Var492(and_and_t_instructionVar492),
    Var493(and_andn_t_instructionVar493),
    Var494(and_nor_t_instructionVar494),
    Var495(and_or_t_instructionVar495),
    Var496(and_t_instructionVar496),
    Var497(andn_t_instructionVar497),
    Var498(cachea_i_instructionVar498),
    Var499(cachea_w_instructionVar499),
    Var500(cachea_wi_instructionVar500),
    Var501(ldlcx_instructionVar501),
    Var502(lducx_instructionVar502),
    Var503(stlcx_instructionVar503),
    Var504(stucx_instructionVar504),
    Var505(cmpswap_w_instructionVar505),
    Var506(cop_instructionVar506),
    Var507(cop_instructionVar507),
    Var508(loopu_instructionVar508),
    Var509(debug_instructionVar509),
    Var510(fret_instructionVar510),
    Var511(ins_t_instructionVar511),
    Var512(insert_instructionVar512),
    Var513(insert_instructionVar513),
    Var514(insn_t_instructionVar514),
    Var515(jnz_a_instructionVar515),
    Var516(jz_a_instructionVar516),
    Var517(loop_instructionVar517),
    Var518(mtcr_instructionVar518),
    Var519(jeq_instructionVar519),
    Var520(jeq_instructionVar520),
    Var521(jeq_a_instructionVar521),
    Var522(jge_instructionVar522),
    Var523(jge_instructionVar523),
    Var524(jge_u_instructionVar524),
    Var525(jge_u_instructionVar525),
    Var526(ji_instructionVar526),
    Var527(nop_instructionVar527),
    Var528(ret_instructionVar528),
    Var529(rfe_instructionVar529),
    Var530(nop_instructionVar530),
    Var531(ji_instructionVar531),
    Var532(jlt_instructionVar532),
    Var533(jlt_instructionVar533),
    Var534(jlt_u_instructionVar534),
    Var535(jlt_u_instructionVar535),
    Var536(jne_instructionVar536),
    Var537(jne_instructionVar537),
    Var538(jne_a_instructionVar538),
    Var539(jned_instructionVar539),
    Var540(jned_instructionVar540),
    Var541(jnei_instructionVar541),
    Var542(jnei_instructionVar542),
    Var543(ld_a_instructionVar543),
    Var544(ld_b_instructionVar544),
    Var545(ld_bu_instructionVar545),
    Var546(ld_d_instructionVar546),
    Var547(ld_da_instructionVar547),
    Var548(ld_dd_instructionVar548),
    Var549(ld_dd_instructionVar549),
    Var550(ld_dd_instructionVar550),
    Var551(ld_dd_instructionVar551),
    Var552(ld_h_instructionVar552),
    Var553(ld_hu_instructionVar553),
    Var554(ld_q_instructionVar554),
    Var555(ld_w_instructionVar555),
    Var556(ldlcx_instructionVar556),
    Var557(ldmst_instructionVar557),
    Var558(lducx_instructionVar558),
    Var559(lea_instructionVar559),
    Var560(st_a_instructionVar560),
    Var561(st_b_instructionVar561),
    Var562(st_d_instructionVar562),
    Var563(st_da_instructionVar563),
    Var564(st_dd_instructionVar564),
    Var565(st_dd_instructionVar565),
    Var566(st_dd_instructionVar566),
    Var567(st_dd_instructionVar567),
    Var568(st_h_instructionVar568),
    Var569(st_q_instructionVar569),
    Var570(st_w_instructionVar570),
    Var571(stlcx_instructionVar571),
    Var572(stucx_instructionVar572),
    Var573(swap_w_instructionVar573),
    Var574(swapmsk_w_instructionVar574),
    Var575(ld_a_instructionVar575),
    Var576(ld_b_instructionVar576),
    Var577(ld_bu_instructionVar577),
    Var578(ld_d_instructionVar578),
    Var579(ld_da_instructionVar579),
    Var580(ld_h_instructionVar580),
    Var581(ld_hu_instructionVar581),
    Var582(ld_q_instructionVar582),
    Var583(ld_w_instructionVar583),
    Var584(ldmst_instructionVar584),
    Var585(lea_instructionVar585),
    Var586(mfcr_instructionVar586),
    Var587(mov_instructionVar587),
    Var588(mov_instructionVar588),
    Var589(mov_u_instructionVar589),
    Var590(movh_instructionVar590),
    Var591(movh_a_instructionVar591),
    Var592(nand_t_instructionVar592),
    Var593(not_instructionVar593),
    Var594(nor_t_instructionVar594),
    Var595(or_and_t_instructionVar595),
    Var596(or_andn_t_instructionVar596),
    Var597(or_nor_t_instructionVar597),
    Var598(or_or_t_instructionVar598),
    Var599(or_t_instructionVar599),
    Var600(orn_t_instructionVar600),
    Var601(rsub_instructionVar601),
    Var602(sat_b_instructionVar602),
    Var603(sat_bu_instructionVar603),
    Var604(sat_h_instructionVar604),
    Var605(sat_hu_instructionVar605),
    Var606(sh_instructionVar606),
    Var607(sh_instructionVar607),
    Var608(sh_and_t_instructionVar608),
    Var609(sh_andn_t_instructionVar609),
    Var610(sh_nand_t_instructionVar610),
    Var611(sh_nor_t_instructionVar611),
    Var612(sh_or_t_instructionVar612),
    Var613(sh_orn_t_instructionVar613),
    Var614(sh_xnor_t_instructionVar614),
    Var615(sh_xor_t_instructionVar615),
    Var616(st_a_instructionVar616),
    Var617(st_b_instructionVar617),
    Var618(st_d_instructionVar618),
    Var619(st_da_instructionVar619),
    Var620(st_h_instructionVar620),
    Var621(st_q_instructionVar621),
    Var622(st_t_instructionVar622),
    Var623(st_w_instructionVar623),
    Var624(swap_w_instructionVar624),
    Var625(xnor_t_instructionVar625),
    Var626(xor_t_instructionVar626),
    Var627(add_instructionVar627),
    Var628(add_instructionVar628),
    Var629(add_instructionVar629),
    Var630(add_instructionVar630),
    Var631(add_instructionVar631),
    Var632(add_instructionVar632),
    Var633(add_a_instructionVar633),
    Var634(add_a_instructionVar634),
    Var635(addi_instructionVar635),
    Var636(addih_instructionVar636),
    Var637(addih_a_instructionVar637),
    Var638(adds_instructionVar638),
    Var639(and_instructionVar639),
    Var640(and_instructionVar640),
    Var641(bisr_instructionVar641),
    Var642(cadd_instructionVar642),
    Var643(caddn_instructionVar643),
    Var644(call_instructionVar644),
    Var645(call_instructionVar645),
    Var646(calla_instructionVar646),
    Var647(cmov_instructionVar647),
    Var648(cmov_instructionVar648),
    Var649(cmovn_instructionVar649),
    Var650(cmovn_instructionVar650),
    Var651(eq_instructionVar651),
    Var652(eq_instructionVar652),
    Var653(fcall_instructionVar653),
    Var654(fcalla_instructionVar654),
    Var655(j_instructionVar655),
    Var656(j_instructionVar656),
    Var657(ja_instructionVar657),
    Var658(jeq_instructionVar658),
    Var659(jeq_instructionVar659),
    Var660(jeq_instructionVar660),
    Var661(jeq_instructionVar661),
    Var662(jgez_instructionVar662),
    Var663(jgtz_instructionVar663),
    Var664(jl_instructionVar664),
    Var665(jla_instructionVar665),
    Var666(jlez_instructionVar666),
    Var667(jltz_instructionVar667),
    Var668(jne_instructionVar668),
    Var669(jne_instructionVar669),
    Var670(jne_instructionVar670),
    Var671(jne_instructionVar671),
    Var672(jnz_instructionVar672),
    Var673(jnz_instructionVar673),
    Var674(jnz_a_instructionVar674),
    Var675(jnz_t_instructionVar675),
    Var676(jnz_t_instructionVar676),
    Var677(jz_instructionVar677),
    Var678(jz_instructionVar678),
    Var679(jz_a_instructionVar679),
    Var680(jz_t_instructionVar680),
    Var681(jz_t_instructionVar681),
    Var682(ld_a_instructionVar682),
    Var683(ld_a_instructionVar683),
    Var684(ld_a_instructionVar684),
    Var685(ld_a_instructionVar685),
    Var686(ld_b_instructionVar686),
    Var687(ld_bu_instructionVar687),
    Var688(ld_bu_instructionVar688),
    Var689(ld_bu_instructionVar689),
    Var690(ld_h_instructionVar690),
    Var691(ld_h_instructionVar691),
    Var692(ld_h_instructionVar692),
    Var693(ld_hu_instructionVar693),
    Var694(ld_w_instructionVar694),
    Var695(ld_w_instructionVar695),
    Var696(ld_w_instructionVar696),
    Var697(ld_w_instructionVar697),
    Var698(lea_instructionVar698),
    Var699(loop_instructionVar699),
    Var700(lt_instructionVar700),
    Var701(lt_instructionVar701),
    Var702(mov_instructionVar702),
    Var703(mov_instructionVar703),
    Var704(mov_instructionVar704),
    Var705(mov_instructionVar705),
    Var706(mov_a_instructionVar706),
    Var707(mov_a_instructionVar707),
    Var708(mov_aa_instructionVar708),
    Var709(mov_d_instructionVar709),
    Var710(mul_instructionVar710),
    Var711(or_instructionVar711),
    Var712(or_instructionVar712),
    Var713(sha_instructionVar713),
    Var714(st_a_instructionVar714),
    Var715(st_a_instructionVar715),
    Var716(st_a_instructionVar716),
    Var717(st_a_instructionVar717),
    Var718(st_b_instructionVar718),
    Var719(st_b_instructionVar719),
    Var720(st_b_instructionVar720),
    Var721(st_h_instructionVar721),
    Var722(st_h_instructionVar722),
    Var723(st_h_instructionVar723),
    Var724(st_w_instructionVar724),
    Var725(st_w_instructionVar725),
    Var726(st_w_instructionVar726),
    Var727(st_w_instructionVar727),
    Var728(sub_instructionVar728),
    Var729(sub_instructionVar729),
    Var730(sub_instructionVar730),
    Var731(sub_a_instructionVar731),
    Var732(subs_instructionVar732),
    Var733(xor_instructionVar733),
    Var734(ldl_il_instructionVar734),
    Var735(ldl_iu_instructionVar735),
    Var736(jc_a_instructionVar736),
    Var737(addsc_a_instructionVar737),
    Var738(cachei_i_instructionVar738),
    Var739(cachei_w_instructionVar739),
    Var740(cachei_wi_instructionVar740),
    Var741(cachea_i_instructionVar741),
    Var742(cachea_w_instructionVar742),
    Var743(cachea_wi_instructionVar743),
    Var744(cmpswap_w_instructionVar744),
    Var745(ld_a_instructionVar745),
    Var746(ld_b_instructionVar746),
    Var747(ld_bu_instructionVar747),
    Var748(ld_d_instructionVar748),
    Var749(ld_da_instructionVar749),
    Var750(ld_h_instructionVar750),
    Var751(ld_hu_instructionVar751),
    Var752(ld_q_instructionVar752),
    Var753(ld_w_instructionVar753),
    Var754(ldmst_instructionVar754),
    Var755(st_a_instructionVar755),
    Var756(st_b_instructionVar756),
    Var757(st_d_instructionVar757),
    Var758(st_da_instructionVar758),
    Var759(st_h_instructionVar759),
    Var760(st_q_instructionVar760),
    Var761(st_w_instructionVar761),
    Var762(swap_w_instructionVar762),
    Var763(swapmsk_w_instructionVar763),
    Var764(ld_a_instructionVar764),
    Var765(ld_bu_instructionVar765),
    Var766(ld_h_instructionVar766),
    Var767(ld_w_instructionVar767),
    Var768(st_a_instructionVar768),
    Var769(st_b_instructionVar769),
    Var770(st_h_instructionVar770),
    Var771(st_w_instructionVar771),
    Var772(dinit_instructionVar772),
    Var773(dstep_instructionVar773),
    Var774(minit_instructionVar774),
    Var775(mstep_l_instructionVar775),
    Var776(mstep_u_instructionVar776),
    Var777(add_f_instructionVar777),
    Var778(and_f_instructionVar778),
    Var779(clr_instructionVar779),
    Var780(comp_f_instructionVar780),
    Var781(inb_i_instructionVar781),
    Var782(ld_f_instructionVar782),
    Var783(or_f_instructionVar783),
    Var784(rl_instructionVar784),
    Var785(rr_instructionVar785),
    Var786(set_instructionVar786),
    Var787(shl_instructionVar787),
    Var788(shr_instructionVar788),
    Var789(st_f_instructionVar789),
    Var790(sub_f_instructionVar790),
    Var791(xch_f_instructionVar791),
    Var792(xor_f_instructionVar792),
    Var793(add_instructionVar793),
    Var794(add_i_instructionVar794),
    Var795(add_pi_instructionVar795),
    Var796(and_instructionVar796),
    Var797(and_pi_instructionVar797),
    Var798(bcopy_instructionVar798),
    Var799(chkb_instructionVar799),
    Var800(comp_instructionVar800),
    Var801(comp_i_instructionVar801),
    Var802(comp_pi_instructionVar802),
    Var803(debug_instructionVar803),
    Var804(inb_instructionVar804),
    Var805(jc_i_instructionVar805),
    Var806(jc_ia_instructionVar806),
    Var807(ld_i_instructionVar807),
    Var808(ld_p_instructionVar808),
    Var809(ld_pi_instructionVar809),
    Var810(mclr_pi_instructionVar810),
    Var811(mov_instructionVar811),
    Var812(mset_pi_instructionVar812),
    Var813(neg_instructionVar813),
    Var814(not_instructionVar814),
    Var815(or_instructionVar815),
    Var816(or_pi_instructionVar816),
    Var817(pri_instructionVar817),
    Var818(st_p_instructionVar818),
    Var819(st_pi_instructionVar819),
    Var820(sub_instructionVar820),
    Var821(sub_i_instructionVar821),
    Var822(sub_pi_instructionVar822),
    Var823(xch_pi_instructionVar823),
    Var824(xor_instructionVar824),
    Var825(xor_pi_instructionVar825),
    Var826(clr_f_instructionVar826),
    Var827(exit_instructionVar827),
    Var828(jc_instructionVar828),
    Var829(jl_instructionVar829),
    Var830(ld_if_instructionVar830),
    Var831(set_f_instructionVar831),
    Var832(st_if_instructionVar832),
    Var833(copy_instructionVar833),
}
impl Tableinstruction {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var14(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var15(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var16(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var17(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var18(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var19(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var20(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var21(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var22(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var23(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var24(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var25(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var26(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var27(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var28(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var29(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var30(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var31(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var32(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var33(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var34(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var35(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var36(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var37(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var38(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var39(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var40(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var41(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var42(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var43(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var44(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var45(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var46(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var47(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var48(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var49(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var50(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var51(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var52(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var53(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var54(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var55(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var56(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var57(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var58(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var59(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var60(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var61(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var62(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var63(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var64(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var65(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var66(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var67(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var68(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var69(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var70(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var71(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var72(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var73(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var74(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var75(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var76(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var77(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var78(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var79(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var80(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var81(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var82(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var83(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var84(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var85(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var86(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var87(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var88(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var89(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var90(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var91(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var92(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var93(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var94(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var95(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var96(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var97(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var98(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var99(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var100(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var101(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var102(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var103(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var104(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var105(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var106(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var107(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var108(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var109(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var110(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var111(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var112(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var113(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var114(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var115(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var116(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var117(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var118(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var119(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var120(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var121(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var122(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var123(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var124(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var125(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var126(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var127(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var128(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var129(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var130(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var131(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var132(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var133(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var134(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var135(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var136(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var137(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var138(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var139(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var140(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var141(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var142(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var143(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var144(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var145(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var146(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var147(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var148(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var149(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var150(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var151(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var152(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var153(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var154(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var155(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var156(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var157(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var158(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var159(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var160(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var161(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var162(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var163(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var164(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var165(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var166(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var167(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var168(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var169(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var170(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var171(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var172(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var173(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var174(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var175(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var176(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var177(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var178(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var179(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var180(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var181(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var182(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var183(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var184(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var185(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var186(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var187(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var188(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var189(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var190(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var191(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var192(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var193(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var194(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var195(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var196(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var197(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var198(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var199(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var200(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var201(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var202(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var203(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var204(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var205(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var206(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var207(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var208(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var209(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var210(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var211(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var212(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var213(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var214(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var215(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var216(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var217(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var218(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var219(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var220(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var221(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var222(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var223(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var224(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var225(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var226(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var227(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var228(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var229(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var230(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var231(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var232(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var233(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var234(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var235(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var236(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var237(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var238(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var239(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var240(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var241(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var242(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var243(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var244(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var245(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var246(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var247(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var248(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var249(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var250(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var251(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var252(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var253(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var254(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var255(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var256(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var257(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var258(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var259(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var260(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var261(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var262(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var263(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var264(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var265(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var266(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var267(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var268(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var269(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var270(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var271(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var272(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var273(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var274(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var275(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var276(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var277(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var278(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var279(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var280(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var281(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var282(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var283(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var284(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var285(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var286(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var287(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var288(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var289(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var290(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var291(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var292(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var293(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var294(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var295(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var296(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var297(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var298(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var299(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var300(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var301(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var302(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var303(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var304(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var305(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var306(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var307(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var308(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var309(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var310(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var311(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var312(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var313(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var314(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var315(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var316(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var317(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var318(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var319(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var320(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var321(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var322(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var323(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var324(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var325(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var326(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var327(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var328(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var329(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var330(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var331(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var332(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var333(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var334(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var335(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var336(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var337(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var338(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var339(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var340(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var341(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var342(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var343(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var344(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var345(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var346(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var347(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var348(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var349(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var350(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var351(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var352(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var353(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var354(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var355(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var356(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var357(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var358(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var359(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var360(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var361(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var362(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var363(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var364(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var365(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var366(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var367(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var368(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var369(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var370(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var371(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var372(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var373(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var374(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var375(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var376(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var377(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var378(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var379(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var380(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var381(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var382(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var383(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var384(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var385(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var386(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var387(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var388(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var389(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var390(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var391(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var392(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var393(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var394(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var395(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var396(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var397(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var398(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var399(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var400(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var401(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var402(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var403(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var404(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var405(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var406(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var407(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var408(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var409(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var410(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var411(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var412(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var413(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var414(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var415(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var416(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var417(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var418(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var419(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var420(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var421(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var422(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var423(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var424(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var425(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var426(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var427(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var428(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var429(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var430(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var431(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var432(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var433(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var434(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var435(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var436(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var437(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var438(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var439(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var440(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var441(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var442(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var443(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var444(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var445(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var446(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var447(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var448(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var449(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var450(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var451(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var452(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var453(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var454(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var455(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var456(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var457(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var458(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var459(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var460(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var461(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var462(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var463(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var464(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var465(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var466(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var467(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var468(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var469(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var470(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var471(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var472(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var473(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var474(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var475(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var476(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var477(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var478(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var479(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var480(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var481(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var482(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var483(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var484(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var485(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var486(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var487(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var488(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var489(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var490(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var491(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var492(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var493(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var494(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var495(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var496(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var497(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var498(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var499(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var500(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var501(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var502(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var503(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var504(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var505(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var506(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var507(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var508(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var509(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var510(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var511(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var512(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var513(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var514(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var515(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var516(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var517(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var518(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var519(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var520(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var521(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var522(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var523(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var524(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var525(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var526(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var527(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var528(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var529(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var530(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var531(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var532(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var533(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var534(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var535(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var536(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var537(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var538(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var539(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var540(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var541(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var542(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var543(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var544(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var545(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var546(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var547(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var548(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var549(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var550(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var551(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var552(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var553(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var554(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var555(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var556(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var557(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var558(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var559(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var560(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var561(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var562(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var563(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var564(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var565(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var566(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var567(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var568(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var569(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var570(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var571(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var572(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var573(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var574(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var575(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var576(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var577(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var578(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var579(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var580(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var581(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var582(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var583(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var584(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var585(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var586(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var587(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var588(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var589(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var590(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var591(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var592(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var593(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var594(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var595(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var596(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var597(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var598(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var599(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var600(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var601(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var602(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var603(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var604(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var605(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var606(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var607(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var608(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var609(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var610(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var611(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var612(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var613(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var614(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var615(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var616(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var617(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var618(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var619(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var620(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var621(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var622(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var623(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var624(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var625(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var626(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var627(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var628(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var629(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var630(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var631(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var632(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var633(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var634(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var635(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var636(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var637(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var638(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var639(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var640(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var641(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var642(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var643(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var644(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var645(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var646(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var647(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var648(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var649(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var650(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var651(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var652(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var653(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var654(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var655(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var656(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var657(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var658(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var659(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var660(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var661(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var662(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var663(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var664(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var665(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var666(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var667(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var668(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var669(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var670(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var671(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var672(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var673(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var674(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var675(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var676(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var677(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var678(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var679(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var680(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var681(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var682(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var683(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var684(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var685(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var686(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var687(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var688(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var689(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var690(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var691(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var692(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var693(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var694(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var695(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var696(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var697(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var698(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var699(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var700(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var701(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var702(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var703(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var704(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var705(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var706(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var707(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var708(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var709(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var710(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var711(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var712(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var713(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var714(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var715(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var716(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var717(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var718(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var719(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var720(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var721(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var722(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var723(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var724(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var725(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var726(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var727(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var728(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var729(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var730(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var731(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var732(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var733(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var734(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var735(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var736(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var737(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var738(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var739(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var740(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var741(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var742(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var743(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var744(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var745(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var746(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var747(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var748(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var749(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var750(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var751(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var752(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var753(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var754(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var755(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var756(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var757(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var758(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var759(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var760(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var761(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var762(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var763(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var764(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var765(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var766(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var767(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var768(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var769(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var770(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var771(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var772(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var773(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var774(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var775(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var776(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var777(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var778(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var779(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var780(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var781(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var782(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var783(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var784(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var785(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var786(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var787(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var788(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var789(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var790(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var791(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var792(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var793(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var794(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var795(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var796(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var797(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var798(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var799(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var800(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var801(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var802(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var803(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var804(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var805(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var806(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var807(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var808(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var809(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var810(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var811(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var812(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var813(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var814(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var815(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var816(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var817(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var818(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var819(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var820(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var821(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var822(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var823(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var824(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var825(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var826(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var827(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var828(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var829(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var830(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var831(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var832(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var833(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = debug_instructionVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) = disable_instructionVar1::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) = dsync_instructionVar2::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) = enable_instructionVar3::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) = fret_instructionVar4::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) = isync_instructionVar5::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) = ji_instructionVar6::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) = nop_instructionVar7::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) = ret_instructionVar8::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) = rfe_instructionVar9::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) = rfm_instructionVar10::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) = rslcx_instructionVar11::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) = rstv_instructionVar12::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) = svlcx_instructionVar13::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        if let Some((inst_len, parsed)) = tlbflush_a_instructionVar14::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var14(parsed)));
        }
        if let Some((inst_len, parsed)) = tlbflush_b_instructionVar15::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var15(parsed)));
        }
        if let Some((inst_len, parsed)) = trapsv_instructionVar16::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var16(parsed)));
        }
        if let Some((inst_len, parsed)) = trapv_instructionVar17::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var17(parsed)));
        }
        if let Some((inst_len, parsed)) = wait_instructionVar18::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var18(parsed)));
        }
        if let Some((inst_len, parsed)) = abs_instructionVar19::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var19(parsed)));
        }
        if let Some((inst_len, parsed)) = abs_b_instructionVar20::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var20(parsed)));
        }
        if let Some((inst_len, parsed)) = abs_h_instructionVar21::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var21(parsed)));
        }
        if let Some((inst_len, parsed)) = abss_instructionVar22::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var22(parsed)));
        }
        if let Some((inst_len, parsed)) = abss_h_instructionVar23::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var23(parsed)));
        }
        if let Some((inst_len, parsed)) = calli_instructionVar24::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var24(parsed)));
        }
        if let Some((inst_len, parsed)) = disable_instructionVar25::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var25(parsed)));
        }
        if let Some((inst_len, parsed)) = fcalli_instructionVar26::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var26(parsed)));
        }
        if let Some((inst_len, parsed)) = ji_instructionVar27::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var27(parsed)));
        }
        if let Some((inst_len, parsed)) = jli_instructionVar28::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var28(parsed)));
        }
        if let Some((inst_len, parsed)) = restore_instructionVar29::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var29(parsed)));
        }
        if let Some((inst_len, parsed)) = tlbdemap_instructionVar30::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var30(parsed)));
        }
        if let Some((inst_len, parsed)) = tlbmap_instructionVar31::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var31(parsed)));
        }
        if let Some((inst_len, parsed)) = tlbprobe_a_instructionVar32::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var32(parsed)));
        }
        if let Some((inst_len, parsed)) = tlbprobe_i_instructionVar33::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var33(parsed)));
        }
        if let Some((inst_len, parsed)) = updfl_instructionVar34::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var34(parsed)));
        }
        if let Some((inst_len, parsed)) = bsplit_instructionVar35::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var35(parsed)));
        }
        if let Some((inst_len, parsed)) = clo_instructionVar36::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var36(parsed)));
        }
        if let Some((inst_len, parsed)) = clo_h_instructionVar37::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var37(parsed)));
        }
        if let Some((inst_len, parsed)) = cls_instructionVar38::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var38(parsed)));
        }
        if let Some((inst_len, parsed)) = cls_h_instructionVar39::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var39(parsed)));
        }
        if let Some((inst_len, parsed)) = clz_instructionVar40::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var40(parsed)));
        }
        if let Some((inst_len, parsed)) = clz_h_instructionVar41::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var41(parsed)));
        }
        if let Some((inst_len, parsed)) = eqz_a_instructionVar42::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var42(parsed)));
        }
        if let Some((inst_len, parsed)) = ftoi_instructionVar43::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var43(parsed)));
        }
        if let Some((inst_len, parsed)) = ftoiz_instructionVar44::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var44(parsed)));
        }
        if let Some((inst_len, parsed)) = ftou_instructionVar45::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var45(parsed)));
        }
        if let Some((inst_len, parsed)) = ftouz_instructionVar46::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var46(parsed)));
        }
        if let Some((inst_len, parsed)) = itof_instructionVar47::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var47(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_dd_instructionVar48::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var48(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_dd_instructionVar49::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var49(parsed)));
        }
        if let Some((inst_len, parsed)) = mffr_instructionVar50::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var50(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar51::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var51(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar52::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var52(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_a_instructionVar53::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var53(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_aa_instructionVar54::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var54(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_d_instructionVar55::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var55(parsed)));
        }
        if let Some((inst_len, parsed)) = mtfr_instructionVar56::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var56(parsed)));
        }
        if let Some((inst_len, parsed)) = nez_a_instructionVar57::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var57(parsed)));
        }
        if let Some((inst_len, parsed)) = parity_instructionVar58::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var58(parsed)));
        }
        if let Some((inst_len, parsed)) = qseed_f_instructionVar59::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var59(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_b_instructionVar60::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var60(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_bu_instructionVar61::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var61(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_h_instructionVar62::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var62(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_hu_instructionVar63::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var63(parsed)));
        }
        if let Some((inst_len, parsed)) = st_dd_instructionVar64::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var64(parsed)));
        }
        if let Some((inst_len, parsed)) = st_dd_instructionVar65::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var65(parsed)));
        }
        if let Some((inst_len, parsed)) = unpack_instructionVar66::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var66(parsed)));
        }
        if let Some((inst_len, parsed)) = utof_instructionVar67::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var67(parsed)));
        }
        if let Some((inst_len, parsed)) = absdif_instructionVar68::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var68(parsed)));
        }
        if let Some((inst_len, parsed)) = absdif_b_instructionVar69::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var69(parsed)));
        }
        if let Some((inst_len, parsed)) = absdif_h_instructionVar70::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var70(parsed)));
        }
        if let Some((inst_len, parsed)) = absdifs_instructionVar71::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var71(parsed)));
        }
        if let Some((inst_len, parsed)) = absdifs_h_instructionVar72::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var72(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar73::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var73(parsed)));
        }
        if let Some((inst_len, parsed)) = add_a_instructionVar74::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var74(parsed)));
        }
        if let Some((inst_len, parsed)) = add_b_instructionVar75::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var75(parsed)));
        }
        if let Some((inst_len, parsed)) = add_h_instructionVar76::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var76(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_instructionVar77::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var77(parsed)));
        }
        if let Some((inst_len, parsed)) = adds_instructionVar78::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var78(parsed)));
        }
        if let Some((inst_len, parsed)) = adds_h_instructionVar79::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var79(parsed)));
        }
        if let Some((inst_len, parsed)) = adds_hu_instructionVar80::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var80(parsed)));
        }
        if let Some((inst_len, parsed)) = adds_u_instructionVar81::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var81(parsed)));
        }
        if let Some((inst_len, parsed)) = addsc_at_instructionVar82::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var82(parsed)));
        }
        if let Some((inst_len, parsed)) = addx_instructionVar83::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var83(parsed)));
        }
        if let Some((inst_len, parsed)) = and_instructionVar84::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var84(parsed)));
        }
        if let Some((inst_len, parsed)) = and_eq_instructionVar85::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var85(parsed)));
        }
        if let Some((inst_len, parsed)) = and_ge_instructionVar86::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var86(parsed)));
        }
        if let Some((inst_len, parsed)) = and_ge_u_instructionVar87::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var87(parsed)));
        }
        if let Some((inst_len, parsed)) = and_lt_instructionVar88::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var88(parsed)));
        }
        if let Some((inst_len, parsed)) = and_lt_u_instructionVar89::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var89(parsed)));
        }
        if let Some((inst_len, parsed)) = and_ne_instructionVar90::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var90(parsed)));
        }
        if let Some((inst_len, parsed)) = andn_instructionVar91::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var91(parsed)));
        }
        if let Some((inst_len, parsed)) = bmerge_instructionVar92::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var92(parsed)));
        }
        if let Some((inst_len, parsed)) = cmp_f_instructionVar93::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var93(parsed)));
        }
        if let Some((inst_len, parsed)) = crc32_instructionVar94::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var94(parsed)));
        }
        if let Some((inst_len, parsed)) = div_instructionVar95::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var95(parsed)));
        }
        if let Some((inst_len, parsed)) = div_u_instructionVar96::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var96(parsed)));
        }
        if let Some((inst_len, parsed)) = div_f_instructionVar97::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var97(parsed)));
        }
        if let Some((inst_len, parsed)) = dvinit_instructionVar98::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var98(parsed)));
        }
        if let Some((inst_len, parsed)) = dvinit_b_instructionVar99::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var99(parsed)));
        }
        if let Some((inst_len, parsed)) = dvinit_bu_instructionVar100::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var100(parsed)));
        }
        if let Some((inst_len, parsed)) = dvinit_h_instructionVar101::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var101(parsed)));
        }
        if let Some((inst_len, parsed)) = dvinit_hu_instructionVar102::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var102(parsed)));
        }
        if let Some((inst_len, parsed)) = dvinit_u_instructionVar103::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var103(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_instructionVar104::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var104(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_a_instructionVar105::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var105(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_b_instructionVar106::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var106(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_h_instructionVar107::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var107(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_w_instructionVar108::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var108(parsed)));
        }
        if let Some((inst_len, parsed)) = eqany_b_instructionVar109::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var109(parsed)));
        }
        if let Some((inst_len, parsed)) = eqany_h_instructionVar110::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var110(parsed)));
        }
        if let Some((inst_len, parsed)) = ftoq31_instructionVar111::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var111(parsed)));
        }
        if let Some((inst_len, parsed)) = ftoq31z_instructionVar112::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var112(parsed)));
        }
        if let Some((inst_len, parsed)) = ge_instructionVar113::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var113(parsed)));
        }
        if let Some((inst_len, parsed)) = ge_a_instructionVar114::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var114(parsed)));
        }
        if let Some((inst_len, parsed)) = ge_u_instructionVar115::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var115(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_instructionVar116::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var116(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_a_instructionVar117::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var117(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_b_instructionVar118::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var118(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_bu_instructionVar119::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var119(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_h_instructionVar120::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var120(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_hu_instructionVar121::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var121(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_u_instructionVar122::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var122(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_w_instructionVar123::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var123(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_wu_instructionVar124::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var124(parsed)));
        }
        if let Some((inst_len, parsed)) = max_instructionVar125::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var125(parsed)));
        }
        if let Some((inst_len, parsed)) = max_b_instructionVar126::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var126(parsed)));
        }
        if let Some((inst_len, parsed)) = max_bu_instructionVar127::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var127(parsed)));
        }
        if let Some((inst_len, parsed)) = max_h_instructionVar128::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var128(parsed)));
        }
        if let Some((inst_len, parsed)) = max_hu_instructionVar129::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var129(parsed)));
        }
        if let Some((inst_len, parsed)) = max_u_instructionVar130::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var130(parsed)));
        }
        if let Some((inst_len, parsed)) = min_instructionVar131::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var131(parsed)));
        }
        if let Some((inst_len, parsed)) = min_b_instructionVar132::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var132(parsed)));
        }
        if let Some((inst_len, parsed)) = min_bu_instructionVar133::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var133(parsed)));
        }
        if let Some((inst_len, parsed)) = min_h_instructionVar134::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var134(parsed)));
        }
        if let Some((inst_len, parsed)) = min_hu_instructionVar135::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var135(parsed)));
        }
        if let Some((inst_len, parsed)) = min_u_instructionVar136::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var136(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar137::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var137(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_instructionVar138::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var138(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_instructionVar139::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var139(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_f_instructionVar140::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var140(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_u_instructionVar141::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var141(parsed)));
        }
        if let Some((inst_len, parsed)) = muls_instructionVar142::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var142(parsed)));
        }
        if let Some((inst_len, parsed)) = muls_u_instructionVar143::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var143(parsed)));
        }
        if let Some((inst_len, parsed)) = nand_instructionVar144::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var144(parsed)));
        }
        if let Some((inst_len, parsed)) = ne_instructionVar145::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var145(parsed)));
        }
        if let Some((inst_len, parsed)) = ne_a_instructionVar146::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var146(parsed)));
        }
        if let Some((inst_len, parsed)) = nor_instructionVar147::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var147(parsed)));
        }
        if let Some((inst_len, parsed)) = or_instructionVar148::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var148(parsed)));
        }
        if let Some((inst_len, parsed)) = or_eq_instructionVar149::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var149(parsed)));
        }
        if let Some((inst_len, parsed)) = or_ge_instructionVar150::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var150(parsed)));
        }
        if let Some((inst_len, parsed)) = or_ge_u_instructionVar151::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var151(parsed)));
        }
        if let Some((inst_len, parsed)) = or_lt_instructionVar152::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var152(parsed)));
        }
        if let Some((inst_len, parsed)) = or_lt_u_instructionVar153::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var153(parsed)));
        }
        if let Some((inst_len, parsed)) = or_ne_instructionVar154::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var154(parsed)));
        }
        if let Some((inst_len, parsed)) = orn_instructionVar155::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var155(parsed)));
        }
        if let Some((inst_len, parsed)) = q31tof_instructionVar156::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var156(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_instructionVar157::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var157(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_eq_instructionVar158::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var158(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_ge_instructionVar159::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var159(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_ge_u_instructionVar160::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var160(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_h_instructionVar161::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var161(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_lt_instructionVar162::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var162(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_lt_u_instructionVar163::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var163(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_ne_instructionVar164::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var164(parsed)));
        }
        if let Some((inst_len, parsed)) = sha_instructionVar165::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var165(parsed)));
        }
        if let Some((inst_len, parsed)) = sha_h_instructionVar166::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var166(parsed)));
        }
        if let Some((inst_len, parsed)) = shas_instructionVar167::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var167(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_instructionVar168::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var168(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_a_instructionVar169::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var169(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_b_instructionVar170::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var170(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_h_instructionVar171::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var171(parsed)));
        }
        if let Some((inst_len, parsed)) = subc_instructionVar172::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var172(parsed)));
        }
        if let Some((inst_len, parsed)) = subs_instructionVar173::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var173(parsed)));
        }
        if let Some((inst_len, parsed)) = subs_h_instructionVar174::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var174(parsed)));
        }
        if let Some((inst_len, parsed)) = subs_hu_instructionVar175::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var175(parsed)));
        }
        if let Some((inst_len, parsed)) = subs_u_instructionVar176::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var176(parsed)));
        }
        if let Some((inst_len, parsed)) = subx_instructionVar177::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var177(parsed)));
        }
        if let Some((inst_len, parsed)) = xnor_instructionVar178::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var178(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_instructionVar179::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var179(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_eq_instructionVar180::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var180(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_ge_instructionVar181::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var181(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_ge_u_instructionVar182::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var182(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_lt_instructionVar183::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var183(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_lt_u_instructionVar184::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var184(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_ne_instructionVar185::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var185(parsed)));
        }
        if let Some((inst_len, parsed)) = xpose_b_instructionVar186::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var186(parsed)));
        }
        if let Some((inst_len, parsed)) = xpose_h_instructionVar187::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var187(parsed)));
        }
        if let Some((inst_len, parsed)) = addsc_a_instructionVar188::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var188(parsed)));
        }
        if let Some((inst_len, parsed)) = bisr_instructionVar189::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var189(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_h_instructionVar190::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var190(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_h_instructionVar191::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var191(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_h_instructionVar192::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var192(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_h_instructionVar193::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var193(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar194::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var194(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar195::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var195(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar196::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var196(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar197::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var197(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar198::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var198(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar199::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var199(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar200::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var200(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_q_instructionVar201::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var201(parsed)));
        }
        if let Some((inst_len, parsed)) = mulm_h_instructionVar202::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var202(parsed)));
        }
        if let Some((inst_len, parsed)) = mulm_h_instructionVar203::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var203(parsed)));
        }
        if let Some((inst_len, parsed)) = mulm_h_instructionVar204::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var204(parsed)));
        }
        if let Some((inst_len, parsed)) = mulm_h_instructionVar205::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var205(parsed)));
        }
        if let Some((inst_len, parsed)) = mulr_h_instructionVar206::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var206(parsed)));
        }
        if let Some((inst_len, parsed)) = mulr_h_instructionVar207::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var207(parsed)));
        }
        if let Some((inst_len, parsed)) = mulr_h_instructionVar208::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var208(parsed)));
        }
        if let Some((inst_len, parsed)) = mulr_h_instructionVar209::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var209(parsed)));
        }
        if let Some((inst_len, parsed)) = mulr_q_instructionVar210::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var210(parsed)));
        }
        if let Some((inst_len, parsed)) = mulr_q_instructionVar211::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var211(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_instructionVar212::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var212(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_instructionVar213::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var213(parsed)));
        }
        if let Some((inst_len, parsed)) = syscall_instructionVar214::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var214(parsed)));
        }
        if let Some((inst_len, parsed)) = absdif_instructionVar215::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var215(parsed)));
        }
        if let Some((inst_len, parsed)) = absdifs_instructionVar216::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var216(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar217::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var217(parsed)));
        }
        if let Some((inst_len, parsed)) = add_f_instructionVar218::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var218(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_instructionVar219::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var219(parsed)));
        }
        if let Some((inst_len, parsed)) = adds_instructionVar220::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var220(parsed)));
        }
        if let Some((inst_len, parsed)) = adds_u_instructionVar221::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var221(parsed)));
        }
        if let Some((inst_len, parsed)) = addx_instructionVar222::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var222(parsed)));
        }
        if let Some((inst_len, parsed)) = and_instructionVar223::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var223(parsed)));
        }
        if let Some((inst_len, parsed)) = and_eq_instructionVar224::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var224(parsed)));
        }
        if let Some((inst_len, parsed)) = and_ge_instructionVar225::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var225(parsed)));
        }
        if let Some((inst_len, parsed)) = and_ge_u_instructionVar226::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var226(parsed)));
        }
        if let Some((inst_len, parsed)) = and_lt_instructionVar227::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var227(parsed)));
        }
        if let Some((inst_len, parsed)) = and_lt_u_instructionVar228::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var228(parsed)));
        }
        if let Some((inst_len, parsed)) = and_ne_instructionVar229::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var229(parsed)));
        }
        if let Some((inst_len, parsed)) = andn_instructionVar230::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var230(parsed)));
        }
        if let Some((inst_len, parsed)) = dvadj_instructionVar231::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var231(parsed)));
        }
        if let Some((inst_len, parsed)) = dvstep_instructionVar232::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var232(parsed)));
        }
        if let Some((inst_len, parsed)) = dvstep_u_instructionVar233::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var233(parsed)));
        }
        if let Some((inst_len, parsed)) = extr_instructionVar234::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var234(parsed)));
        }
        if let Some((inst_len, parsed)) = extr_u_instructionVar235::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var235(parsed)));
        }
        if let Some((inst_len, parsed)) = ixmax_instructionVar236::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var236(parsed)));
        }
        if let Some((inst_len, parsed)) = ixmax_u_instructionVar237::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var237(parsed)));
        }
        if let Some((inst_len, parsed)) = ixmin_instructionVar238::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var238(parsed)));
        }
        if let Some((inst_len, parsed)) = ixmin_u_instructionVar239::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var239(parsed)));
        }
        if let Some((inst_len, parsed)) = pack_instructionVar240::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var240(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_f_instructionVar241::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var241(parsed)));
        }
        if let Some((inst_len, parsed)) = cadd_instructionVar242::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var242(parsed)));
        }
        if let Some((inst_len, parsed)) = caddn_instructionVar243::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var243(parsed)));
        }
        if let Some((inst_len, parsed)) = csub_instructionVar244::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var244(parsed)));
        }
        if let Some((inst_len, parsed)) = csubn_instructionVar245::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var245(parsed)));
        }
        if let Some((inst_len, parsed)) = dextr_instructionVar246::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var246(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_instructionVar247::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var247(parsed)));
        }
        if let Some((inst_len, parsed)) = eqany_b_instructionVar248::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var248(parsed)));
        }
        if let Some((inst_len, parsed)) = eqany_h_instructionVar249::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var249(parsed)));
        }
        if let Some((inst_len, parsed)) = extr_instructionVar250::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var250(parsed)));
        }
        if let Some((inst_len, parsed)) = extr_u_instructionVar251::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var251(parsed)));
        }
        if let Some((inst_len, parsed)) = ge_instructionVar252::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var252(parsed)));
        }
        if let Some((inst_len, parsed)) = ge_u_instructionVar253::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var253(parsed)));
        }
        if let Some((inst_len, parsed)) = imask_instructionVar254::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var254(parsed)));
        }
        if let Some((inst_len, parsed)) = imask_instructionVar255::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var255(parsed)));
        }
        if let Some((inst_len, parsed)) = insert_instructionVar256::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var256(parsed)));
        }
        if let Some((inst_len, parsed)) = insert_instructionVar257::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var257(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_instructionVar258::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var258(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_u_instructionVar259::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var259(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_instructionVar260::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var260(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_instructionVar261::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var261(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_f_instructionVar262::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var262(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_u_instructionVar263::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var263(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_instructionVar264::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var264(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_instructionVar265::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var265(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_u_instructionVar266::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var266(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_u_instructionVar267::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var267(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_instructionVar268::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var268(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_instructionVar269::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var269(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_f_instructionVar270::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var270(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_u_instructionVar271::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var271(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_instructionVar272::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var272(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_instructionVar273::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var273(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_u_instructionVar274::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var274(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_u_instructionVar275::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var275(parsed)));
        }
        if let Some((inst_len, parsed)) = sel_instructionVar276::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var276(parsed)));
        }
        if let Some((inst_len, parsed)) = seln_instructionVar277::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var277(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_h_instructionVar278::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var278(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_h_instructionVar279::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var279(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_h_instructionVar280::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var280(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_h_instructionVar281::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var281(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar282::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var282(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar283::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var283(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar284::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var284(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar285::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var285(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar286::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var286(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar287::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var287(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar288::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var288(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar289::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var289(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar290::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var290(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_q_instructionVar291::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var291(parsed)));
        }
        if let Some((inst_len, parsed)) = maddm_h_instructionVar292::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var292(parsed)));
        }
        if let Some((inst_len, parsed)) = maddm_h_instructionVar293::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var293(parsed)));
        }
        if let Some((inst_len, parsed)) = maddm_h_instructionVar294::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var294(parsed)));
        }
        if let Some((inst_len, parsed)) = maddm_h_instructionVar295::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var295(parsed)));
        }
        if let Some((inst_len, parsed)) = maddms_h_instructionVar296::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var296(parsed)));
        }
        if let Some((inst_len, parsed)) = maddms_h_instructionVar297::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var297(parsed)));
        }
        if let Some((inst_len, parsed)) = maddms_h_instructionVar298::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var298(parsed)));
        }
        if let Some((inst_len, parsed)) = maddms_h_instructionVar299::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var299(parsed)));
        }
        if let Some((inst_len, parsed)) = maddr_h_instructionVar300::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var300(parsed)));
        }
        if let Some((inst_len, parsed)) = maddr_h_instructionVar301::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var301(parsed)));
        }
        if let Some((inst_len, parsed)) = maddr_h_instructionVar302::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var302(parsed)));
        }
        if let Some((inst_len, parsed)) = maddr_h_instructionVar303::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var303(parsed)));
        }
        if let Some((inst_len, parsed)) = maddr_h_instructionVar304::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var304(parsed)));
        }
        if let Some((inst_len, parsed)) = maddr_q_instructionVar305::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var305(parsed)));
        }
        if let Some((inst_len, parsed)) = maddr_q_instructionVar306::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var306(parsed)));
        }
        if let Some((inst_len, parsed)) = maddrs_h_instructionVar307::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var307(parsed)));
        }
        if let Some((inst_len, parsed)) = maddrs_h_instructionVar308::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var308(parsed)));
        }
        if let Some((inst_len, parsed)) = maddrs_h_instructionVar309::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var309(parsed)));
        }
        if let Some((inst_len, parsed)) = maddrs_h_instructionVar310::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var310(parsed)));
        }
        if let Some((inst_len, parsed)) = maddrs_h_instructionVar311::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var311(parsed)));
        }
        if let Some((inst_len, parsed)) = maddrs_q_instructionVar312::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var312(parsed)));
        }
        if let Some((inst_len, parsed)) = maddrs_q_instructionVar313::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var313(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_h_instructionVar314::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var314(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_h_instructionVar315::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var315(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_h_instructionVar316::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var316(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_h_instructionVar317::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var317(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar318::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var318(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar319::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var319(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar320::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var320(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar321::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var321(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar322::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var322(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar323::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var323(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar324::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var324(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar325::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var325(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar326::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var326(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_q_instructionVar327::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var327(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsu_h_instructionVar328::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var328(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsu_h_instructionVar329::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var329(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsu_h_instructionVar330::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var330(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsu_h_instructionVar331::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var331(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsum_h_instructionVar332::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var332(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsum_h_instructionVar333::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var333(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsum_h_instructionVar334::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var334(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsum_h_instructionVar335::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var335(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsums_h_instructionVar336::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var336(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsums_h_instructionVar337::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var337(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsums_h_instructionVar338::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var338(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsums_h_instructionVar339::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var339(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsur_h_instructionVar340::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var340(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsur_h_instructionVar341::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var341(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsur_h_instructionVar342::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var342(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsur_h_instructionVar343::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var343(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsurs_h_instructionVar344::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var344(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsurs_h_instructionVar345::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var345(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsurs_h_instructionVar346::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var346(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsurs_h_instructionVar347::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var347(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsus_h_instructionVar348::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var348(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsus_h_instructionVar349::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var349(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsus_h_instructionVar350::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var350(parsed)));
        }
        if let Some((inst_len, parsed)) = maddsus_h_instructionVar351::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var351(parsed)));
        }
        if let Some((inst_len, parsed)) = max_instructionVar352::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var352(parsed)));
        }
        if let Some((inst_len, parsed)) = max_u_instructionVar353::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var353(parsed)));
        }
        if let Some((inst_len, parsed)) = min_instructionVar354::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var354(parsed)));
        }
        if let Some((inst_len, parsed)) = min_u_instructionVar355::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var355(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_h_instructionVar356::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var356(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_h_instructionVar357::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var357(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_h_instructionVar358::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var358(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_h_instructionVar359::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var359(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar360::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var360(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar361::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var361(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar362::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var362(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar363::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var363(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar364::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var364(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar365::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var365(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar366::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var366(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar367::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var367(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar368::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var368(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_q_instructionVar369::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var369(parsed)));
        }
        if let Some((inst_len, parsed)) = msubad_h_instructionVar370::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var370(parsed)));
        }
        if let Some((inst_len, parsed)) = msubad_h_instructionVar371::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var371(parsed)));
        }
        if let Some((inst_len, parsed)) = msubad_h_instructionVar372::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var372(parsed)));
        }
        if let Some((inst_len, parsed)) = msubad_h_instructionVar373::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var373(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadm_h_instructionVar374::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var374(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadm_h_instructionVar375::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var375(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadm_h_instructionVar376::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var376(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadm_h_instructionVar377::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var377(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadms_h_instructionVar378::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var378(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadms_h_instructionVar379::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var379(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadms_h_instructionVar380::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var380(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadms_h_instructionVar381::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var381(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadr_h_instructionVar382::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var382(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadr_h_instructionVar383::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var383(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadr_h_instructionVar384::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var384(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadr_h_instructionVar385::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var385(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadrs_h_instructionVar386::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var386(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadrs_h_instructionVar387::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var387(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadrs_h_instructionVar388::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var388(parsed)));
        }
        if let Some((inst_len, parsed)) = msubadrs_h_instructionVar389::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var389(parsed)));
        }
        if let Some((inst_len, parsed)) = msubads_h_instructionVar390::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var390(parsed)));
        }
        if let Some((inst_len, parsed)) = msubads_h_instructionVar391::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var391(parsed)));
        }
        if let Some((inst_len, parsed)) = msubads_h_instructionVar392::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var392(parsed)));
        }
        if let Some((inst_len, parsed)) = msubads_h_instructionVar393::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var393(parsed)));
        }
        if let Some((inst_len, parsed)) = msubm_h_instructionVar394::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var394(parsed)));
        }
        if let Some((inst_len, parsed)) = msubm_h_instructionVar395::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var395(parsed)));
        }
        if let Some((inst_len, parsed)) = msubm_h_instructionVar396::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var396(parsed)));
        }
        if let Some((inst_len, parsed)) = msubm_h_instructionVar397::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var397(parsed)));
        }
        if let Some((inst_len, parsed)) = msubms_h_instructionVar398::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var398(parsed)));
        }
        if let Some((inst_len, parsed)) = msubms_h_instructionVar399::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var399(parsed)));
        }
        if let Some((inst_len, parsed)) = msubms_h_instructionVar400::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var400(parsed)));
        }
        if let Some((inst_len, parsed)) = msubms_h_instructionVar401::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var401(parsed)));
        }
        if let Some((inst_len, parsed)) = msubr_h_instructionVar402::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var402(parsed)));
        }
        if let Some((inst_len, parsed)) = msubr_h_instructionVar403::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var403(parsed)));
        }
        if let Some((inst_len, parsed)) = msubr_h_instructionVar404::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var404(parsed)));
        }
        if let Some((inst_len, parsed)) = msubr_h_instructionVar405::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var405(parsed)));
        }
        if let Some((inst_len, parsed)) = msubr_h_instructionVar406::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var406(parsed)));
        }
        if let Some((inst_len, parsed)) = msubr_q_instructionVar407::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var407(parsed)));
        }
        if let Some((inst_len, parsed)) = msubr_q_instructionVar408::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var408(parsed)));
        }
        if let Some((inst_len, parsed)) = msubrs_h_instructionVar409::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var409(parsed)));
        }
        if let Some((inst_len, parsed)) = msubrs_h_instructionVar410::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var410(parsed)));
        }
        if let Some((inst_len, parsed)) = msubrs_h_instructionVar411::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var411(parsed)));
        }
        if let Some((inst_len, parsed)) = msubrs_h_instructionVar412::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var412(parsed)));
        }
        if let Some((inst_len, parsed)) = msubrs_h_instructionVar413::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var413(parsed)));
        }
        if let Some((inst_len, parsed)) = msubrs_q_instructionVar414::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var414(parsed)));
        }
        if let Some((inst_len, parsed)) = msubrs_q_instructionVar415::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var415(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_h_instructionVar416::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var416(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_h_instructionVar417::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var417(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_h_instructionVar418::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var418(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_h_instructionVar419::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var419(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar420::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var420(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar421::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var421(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar422::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var422(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar423::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var423(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar424::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var424(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar425::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var425(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar426::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var426(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar427::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var427(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar428::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var428(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_q_instructionVar429::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var429(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_instructionVar430::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var430(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_instructionVar431::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var431(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_u_instructionVar432::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var432(parsed)));
        }
        if let Some((inst_len, parsed)) = muls_instructionVar433::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var433(parsed)));
        }
        if let Some((inst_len, parsed)) = muls_u_instructionVar434::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var434(parsed)));
        }
        if let Some((inst_len, parsed)) = nand_instructionVar435::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var435(parsed)));
        }
        if let Some((inst_len, parsed)) = ne_instructionVar436::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var436(parsed)));
        }
        if let Some((inst_len, parsed)) = nor_instructionVar437::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var437(parsed)));
        }
        if let Some((inst_len, parsed)) = or_instructionVar438::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var438(parsed)));
        }
        if let Some((inst_len, parsed)) = or_eq_instructionVar439::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var439(parsed)));
        }
        if let Some((inst_len, parsed)) = or_ge_instructionVar440::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var440(parsed)));
        }
        if let Some((inst_len, parsed)) = or_ge_u_instructionVar441::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var441(parsed)));
        }
        if let Some((inst_len, parsed)) = or_lt_instructionVar442::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var442(parsed)));
        }
        if let Some((inst_len, parsed)) = or_lt_u_instructionVar443::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var443(parsed)));
        }
        if let Some((inst_len, parsed)) = or_ne_instructionVar444::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var444(parsed)));
        }
        if let Some((inst_len, parsed)) = orn_instructionVar445::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var445(parsed)));
        }
        if let Some((inst_len, parsed)) = rsub_instructionVar446::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var446(parsed)));
        }
        if let Some((inst_len, parsed)) = rsubs_instructionVar447::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var447(parsed)));
        }
        if let Some((inst_len, parsed)) = rsubs_u_instructionVar448::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var448(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_eq_instructionVar449::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var449(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_ge_instructionVar450::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var450(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_ge_u_instructionVar451::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var451(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_h_instructionVar452::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var452(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_lt_instructionVar453::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var453(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_lt_u_instructionVar454::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var454(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_ne_instructionVar455::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var455(parsed)));
        }
        if let Some((inst_len, parsed)) = sha_instructionVar456::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var456(parsed)));
        }
        if let Some((inst_len, parsed)) = sha_h_instructionVar457::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var457(parsed)));
        }
        if let Some((inst_len, parsed)) = shas_instructionVar458::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var458(parsed)));
        }
        if let Some((inst_len, parsed)) = xnor_instructionVar459::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var459(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_instructionVar460::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var460(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_eq_instructionVar461::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var461(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_ge_instructionVar462::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var462(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_ge_u_instructionVar463::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var463(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_lt_instructionVar464::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var464(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_lt_u_instructionVar465::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var465(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_ne_instructionVar466::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var466(parsed)));
        }
        if let Some((inst_len, parsed)) = cadd_instructionVar467::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var467(parsed)));
        }
        if let Some((inst_len, parsed)) = caddn_instructionVar468::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var468(parsed)));
        }
        if let Some((inst_len, parsed)) = dextr_instructionVar469::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var469(parsed)));
        }
        if let Some((inst_len, parsed)) = extr_instructionVar470::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var470(parsed)));
        }
        if let Some((inst_len, parsed)) = extr_u_instructionVar471::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var471(parsed)));
        }
        if let Some((inst_len, parsed)) = imask_instructionVar472::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var472(parsed)));
        }
        if let Some((inst_len, parsed)) = imask_instructionVar473::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var473(parsed)));
        }
        if let Some((inst_len, parsed)) = insert_instructionVar474::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var474(parsed)));
        }
        if let Some((inst_len, parsed)) = insert_instructionVar475::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var475(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_instructionVar476::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var476(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_instructionVar477::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var477(parsed)));
        }
        if let Some((inst_len, parsed)) = madd_u_instructionVar478::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var478(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_instructionVar479::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var479(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_instructionVar480::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var480(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_u_instructionVar481::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var481(parsed)));
        }
        if let Some((inst_len, parsed)) = madds_u_instructionVar482::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var482(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_instructionVar483::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var483(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_instructionVar484::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var484(parsed)));
        }
        if let Some((inst_len, parsed)) = msub_u_instructionVar485::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var485(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_instructionVar486::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var486(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_instructionVar487::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var487(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_u_instructionVar488::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var488(parsed)));
        }
        if let Some((inst_len, parsed)) = msubs_u_instructionVar489::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var489(parsed)));
        }
        if let Some((inst_len, parsed)) = sel_instructionVar490::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var490(parsed)));
        }
        if let Some((inst_len, parsed)) = seln_instructionVar491::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var491(parsed)));
        }
        if let Some((inst_len, parsed)) = and_and_t_instructionVar492::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var492(parsed)));
        }
        if let Some((inst_len, parsed)) = and_andn_t_instructionVar493::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var493(parsed)));
        }
        if let Some((inst_len, parsed)) = and_nor_t_instructionVar494::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var494(parsed)));
        }
        if let Some((inst_len, parsed)) = and_or_t_instructionVar495::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var495(parsed)));
        }
        if let Some((inst_len, parsed)) = and_t_instructionVar496::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var496(parsed)));
        }
        if let Some((inst_len, parsed)) = andn_t_instructionVar497::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var497(parsed)));
        }
        if let Some((inst_len, parsed)) = cachea_i_instructionVar498::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var498(parsed)));
        }
        if let Some((inst_len, parsed)) = cachea_w_instructionVar499::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var499(parsed)));
        }
        if let Some((inst_len, parsed)) = cachea_wi_instructionVar500::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var500(parsed)));
        }
        if let Some((inst_len, parsed)) = ldlcx_instructionVar501::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var501(parsed)));
        }
        if let Some((inst_len, parsed)) = lducx_instructionVar502::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var502(parsed)));
        }
        if let Some((inst_len, parsed)) = stlcx_instructionVar503::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var503(parsed)));
        }
        if let Some((inst_len, parsed)) = stucx_instructionVar504::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var504(parsed)));
        }
        if let Some((inst_len, parsed)) = cmpswap_w_instructionVar505::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var505(parsed)));
        }
        if let Some((inst_len, parsed)) = cop_instructionVar506::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var506(parsed)));
        }
        if let Some((inst_len, parsed)) = cop_instructionVar507::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var507(parsed)));
        }
        if let Some((inst_len, parsed)) = loopu_instructionVar508::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var508(parsed)));
        }
        if let Some((inst_len, parsed)) = debug_instructionVar509::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var509(parsed)));
        }
        if let Some((inst_len, parsed)) = fret_instructionVar510::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var510(parsed)));
        }
        if let Some((inst_len, parsed)) = ins_t_instructionVar511::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var511(parsed)));
        }
        if let Some((inst_len, parsed)) = insert_instructionVar512::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var512(parsed)));
        }
        if let Some((inst_len, parsed)) = insert_instructionVar513::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var513(parsed)));
        }
        if let Some((inst_len, parsed)) = insn_t_instructionVar514::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var514(parsed)));
        }
        if let Some((inst_len, parsed)) = jnz_a_instructionVar515::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var515(parsed)));
        }
        if let Some((inst_len, parsed)) = jz_a_instructionVar516::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var516(parsed)));
        }
        if let Some((inst_len, parsed)) = loop_instructionVar517::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var517(parsed)));
        }
        if let Some((inst_len, parsed)) = mtcr_instructionVar518::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var518(parsed)));
        }
        if let Some((inst_len, parsed)) = jeq_instructionVar519::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var519(parsed)));
        }
        if let Some((inst_len, parsed)) = jeq_instructionVar520::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var520(parsed)));
        }
        if let Some((inst_len, parsed)) = jeq_a_instructionVar521::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var521(parsed)));
        }
        if let Some((inst_len, parsed)) = jge_instructionVar522::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var522(parsed)));
        }
        if let Some((inst_len, parsed)) = jge_instructionVar523::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var523(parsed)));
        }
        if let Some((inst_len, parsed)) = jge_u_instructionVar524::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var524(parsed)));
        }
        if let Some((inst_len, parsed)) = jge_u_instructionVar525::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var525(parsed)));
        }
        if let Some((inst_len, parsed)) = ji_instructionVar526::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var526(parsed)));
        }
        if let Some((inst_len, parsed)) = nop_instructionVar527::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var527(parsed)));
        }
        if let Some((inst_len, parsed)) = ret_instructionVar528::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var528(parsed)));
        }
        if let Some((inst_len, parsed)) = rfe_instructionVar529::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var529(parsed)));
        }
        if let Some((inst_len, parsed)) = nop_instructionVar530::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var530(parsed)));
        }
        if let Some((inst_len, parsed)) = ji_instructionVar531::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var531(parsed)));
        }
        if let Some((inst_len, parsed)) = jlt_instructionVar532::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var532(parsed)));
        }
        if let Some((inst_len, parsed)) = jlt_instructionVar533::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var533(parsed)));
        }
        if let Some((inst_len, parsed)) = jlt_u_instructionVar534::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var534(parsed)));
        }
        if let Some((inst_len, parsed)) = jlt_u_instructionVar535::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var535(parsed)));
        }
        if let Some((inst_len, parsed)) = jne_instructionVar536::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var536(parsed)));
        }
        if let Some((inst_len, parsed)) = jne_instructionVar537::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var537(parsed)));
        }
        if let Some((inst_len, parsed)) = jne_a_instructionVar538::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var538(parsed)));
        }
        if let Some((inst_len, parsed)) = jned_instructionVar539::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var539(parsed)));
        }
        if let Some((inst_len, parsed)) = jned_instructionVar540::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var540(parsed)));
        }
        if let Some((inst_len, parsed)) = jnei_instructionVar541::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var541(parsed)));
        }
        if let Some((inst_len, parsed)) = jnei_instructionVar542::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var542(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar543::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var543(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_b_instructionVar544::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var544(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_bu_instructionVar545::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var545(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_d_instructionVar546::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var546(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_da_instructionVar547::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var547(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_dd_instructionVar548::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var548(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_dd_instructionVar549::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var549(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_dd_instructionVar550::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var550(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_dd_instructionVar551::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var551(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_h_instructionVar552::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var552(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_hu_instructionVar553::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var553(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_q_instructionVar554::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var554(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar555::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var555(parsed)));
        }
        if let Some((inst_len, parsed)) = ldlcx_instructionVar556::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var556(parsed)));
        }
        if let Some((inst_len, parsed)) = ldmst_instructionVar557::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var557(parsed)));
        }
        if let Some((inst_len, parsed)) = lducx_instructionVar558::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var558(parsed)));
        }
        if let Some((inst_len, parsed)) = lea_instructionVar559::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var559(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar560::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var560(parsed)));
        }
        if let Some((inst_len, parsed)) = st_b_instructionVar561::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var561(parsed)));
        }
        if let Some((inst_len, parsed)) = st_d_instructionVar562::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var562(parsed)));
        }
        if let Some((inst_len, parsed)) = st_da_instructionVar563::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var563(parsed)));
        }
        if let Some((inst_len, parsed)) = st_dd_instructionVar564::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var564(parsed)));
        }
        if let Some((inst_len, parsed)) = st_dd_instructionVar565::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var565(parsed)));
        }
        if let Some((inst_len, parsed)) = st_dd_instructionVar566::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var566(parsed)));
        }
        if let Some((inst_len, parsed)) = st_dd_instructionVar567::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var567(parsed)));
        }
        if let Some((inst_len, parsed)) = st_h_instructionVar568::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var568(parsed)));
        }
        if let Some((inst_len, parsed)) = st_q_instructionVar569::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var569(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar570::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var570(parsed)));
        }
        if let Some((inst_len, parsed)) = stlcx_instructionVar571::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var571(parsed)));
        }
        if let Some((inst_len, parsed)) = stucx_instructionVar572::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var572(parsed)));
        }
        if let Some((inst_len, parsed)) = swap_w_instructionVar573::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var573(parsed)));
        }
        if let Some((inst_len, parsed)) = swapmsk_w_instructionVar574::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var574(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar575::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var575(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_b_instructionVar576::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var576(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_bu_instructionVar577::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var577(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_d_instructionVar578::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var578(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_da_instructionVar579::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var579(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_h_instructionVar580::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var580(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_hu_instructionVar581::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var581(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_q_instructionVar582::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var582(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar583::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var583(parsed)));
        }
        if let Some((inst_len, parsed)) = ldmst_instructionVar584::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var584(parsed)));
        }
        if let Some((inst_len, parsed)) = lea_instructionVar585::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var585(parsed)));
        }
        if let Some((inst_len, parsed)) = mfcr_instructionVar586::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var586(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar587::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var587(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar588::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var588(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_u_instructionVar589::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var589(parsed)));
        }
        if let Some((inst_len, parsed)) = movh_instructionVar590::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var590(parsed)));
        }
        if let Some((inst_len, parsed)) = movh_a_instructionVar591::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var591(parsed)));
        }
        if let Some((inst_len, parsed)) = nand_t_instructionVar592::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var592(parsed)));
        }
        if let Some((inst_len, parsed)) = not_instructionVar593::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var593(parsed)));
        }
        if let Some((inst_len, parsed)) = nor_t_instructionVar594::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var594(parsed)));
        }
        if let Some((inst_len, parsed)) = or_and_t_instructionVar595::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var595(parsed)));
        }
        if let Some((inst_len, parsed)) = or_andn_t_instructionVar596::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var596(parsed)));
        }
        if let Some((inst_len, parsed)) = or_nor_t_instructionVar597::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var597(parsed)));
        }
        if let Some((inst_len, parsed)) = or_or_t_instructionVar598::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var598(parsed)));
        }
        if let Some((inst_len, parsed)) = or_t_instructionVar599::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var599(parsed)));
        }
        if let Some((inst_len, parsed)) = orn_t_instructionVar600::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var600(parsed)));
        }
        if let Some((inst_len, parsed)) = rsub_instructionVar601::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var601(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_b_instructionVar602::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var602(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_bu_instructionVar603::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var603(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_h_instructionVar604::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var604(parsed)));
        }
        if let Some((inst_len, parsed)) = sat_hu_instructionVar605::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var605(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_instructionVar606::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var606(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_instructionVar607::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var607(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_and_t_instructionVar608::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var608(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_andn_t_instructionVar609::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var609(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_nand_t_instructionVar610::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var610(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_nor_t_instructionVar611::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var611(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_or_t_instructionVar612::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var612(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_orn_t_instructionVar613::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var613(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_xnor_t_instructionVar614::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var614(parsed)));
        }
        if let Some((inst_len, parsed)) = sh_xor_t_instructionVar615::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var615(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar616::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var616(parsed)));
        }
        if let Some((inst_len, parsed)) = st_b_instructionVar617::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var617(parsed)));
        }
        if let Some((inst_len, parsed)) = st_d_instructionVar618::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var618(parsed)));
        }
        if let Some((inst_len, parsed)) = st_da_instructionVar619::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var619(parsed)));
        }
        if let Some((inst_len, parsed)) = st_h_instructionVar620::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var620(parsed)));
        }
        if let Some((inst_len, parsed)) = st_q_instructionVar621::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var621(parsed)));
        }
        if let Some((inst_len, parsed)) = st_t_instructionVar622::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var622(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar623::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var623(parsed)));
        }
        if let Some((inst_len, parsed)) = swap_w_instructionVar624::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var624(parsed)));
        }
        if let Some((inst_len, parsed)) = xnor_t_instructionVar625::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var625(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_t_instructionVar626::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var626(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar627::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var627(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar628::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var628(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar629::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var629(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar630::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var630(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar631::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var631(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar632::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var632(parsed)));
        }
        if let Some((inst_len, parsed)) = add_a_instructionVar633::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var633(parsed)));
        }
        if let Some((inst_len, parsed)) = add_a_instructionVar634::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var634(parsed)));
        }
        if let Some((inst_len, parsed)) = addi_instructionVar635::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var635(parsed)));
        }
        if let Some((inst_len, parsed)) = addih_instructionVar636::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var636(parsed)));
        }
        if let Some((inst_len, parsed)) = addih_a_instructionVar637::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var637(parsed)));
        }
        if let Some((inst_len, parsed)) = adds_instructionVar638::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var638(parsed)));
        }
        if let Some((inst_len, parsed)) = and_instructionVar639::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var639(parsed)));
        }
        if let Some((inst_len, parsed)) = and_instructionVar640::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var640(parsed)));
        }
        if let Some((inst_len, parsed)) = bisr_instructionVar641::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var641(parsed)));
        }
        if let Some((inst_len, parsed)) = cadd_instructionVar642::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var642(parsed)));
        }
        if let Some((inst_len, parsed)) = caddn_instructionVar643::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var643(parsed)));
        }
        if let Some((inst_len, parsed)) = call_instructionVar644::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var644(parsed)));
        }
        if let Some((inst_len, parsed)) = call_instructionVar645::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var645(parsed)));
        }
        if let Some((inst_len, parsed)) = calla_instructionVar646::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var646(parsed)));
        }
        if let Some((inst_len, parsed)) = cmov_instructionVar647::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var647(parsed)));
        }
        if let Some((inst_len, parsed)) = cmov_instructionVar648::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var648(parsed)));
        }
        if let Some((inst_len, parsed)) = cmovn_instructionVar649::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var649(parsed)));
        }
        if let Some((inst_len, parsed)) = cmovn_instructionVar650::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var650(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_instructionVar651::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var651(parsed)));
        }
        if let Some((inst_len, parsed)) = eq_instructionVar652::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var652(parsed)));
        }
        if let Some((inst_len, parsed)) = fcall_instructionVar653::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var653(parsed)));
        }
        if let Some((inst_len, parsed)) = fcalla_instructionVar654::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var654(parsed)));
        }
        if let Some((inst_len, parsed)) = j_instructionVar655::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var655(parsed)));
        }
        if let Some((inst_len, parsed)) = j_instructionVar656::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var656(parsed)));
        }
        if let Some((inst_len, parsed)) = ja_instructionVar657::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var657(parsed)));
        }
        if let Some((inst_len, parsed)) = jeq_instructionVar658::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var658(parsed)));
        }
        if let Some((inst_len, parsed)) = jeq_instructionVar659::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var659(parsed)));
        }
        if let Some((inst_len, parsed)) = jeq_instructionVar660::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var660(parsed)));
        }
        if let Some((inst_len, parsed)) = jeq_instructionVar661::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var661(parsed)));
        }
        if let Some((inst_len, parsed)) = jgez_instructionVar662::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var662(parsed)));
        }
        if let Some((inst_len, parsed)) = jgtz_instructionVar663::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var663(parsed)));
        }
        if let Some((inst_len, parsed)) = jl_instructionVar664::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var664(parsed)));
        }
        if let Some((inst_len, parsed)) = jla_instructionVar665::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var665(parsed)));
        }
        if let Some((inst_len, parsed)) = jlez_instructionVar666::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var666(parsed)));
        }
        if let Some((inst_len, parsed)) = jltz_instructionVar667::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var667(parsed)));
        }
        if let Some((inst_len, parsed)) = jne_instructionVar668::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var668(parsed)));
        }
        if let Some((inst_len, parsed)) = jne_instructionVar669::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var669(parsed)));
        }
        if let Some((inst_len, parsed)) = jne_instructionVar670::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var670(parsed)));
        }
        if let Some((inst_len, parsed)) = jne_instructionVar671::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var671(parsed)));
        }
        if let Some((inst_len, parsed)) = jnz_instructionVar672::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var672(parsed)));
        }
        if let Some((inst_len, parsed)) = jnz_instructionVar673::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var673(parsed)));
        }
        if let Some((inst_len, parsed)) = jnz_a_instructionVar674::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var674(parsed)));
        }
        if let Some((inst_len, parsed)) = jnz_t_instructionVar675::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var675(parsed)));
        }
        if let Some((inst_len, parsed)) = jnz_t_instructionVar676::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var676(parsed)));
        }
        if let Some((inst_len, parsed)) = jz_instructionVar677::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var677(parsed)));
        }
        if let Some((inst_len, parsed)) = jz_instructionVar678::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var678(parsed)));
        }
        if let Some((inst_len, parsed)) = jz_a_instructionVar679::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var679(parsed)));
        }
        if let Some((inst_len, parsed)) = jz_t_instructionVar680::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var680(parsed)));
        }
        if let Some((inst_len, parsed)) = jz_t_instructionVar681::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var681(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar682::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var682(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar683::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var683(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar684::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var684(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar685::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var685(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_b_instructionVar686::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var686(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_bu_instructionVar687::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var687(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_bu_instructionVar688::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var688(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_bu_instructionVar689::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var689(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_h_instructionVar690::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var690(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_h_instructionVar691::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var691(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_h_instructionVar692::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var692(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_hu_instructionVar693::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var693(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar694::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var694(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar695::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var695(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar696::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var696(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar697::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var697(parsed)));
        }
        if let Some((inst_len, parsed)) = lea_instructionVar698::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var698(parsed)));
        }
        if let Some((inst_len, parsed)) = loop_instructionVar699::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var699(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_instructionVar700::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var700(parsed)));
        }
        if let Some((inst_len, parsed)) = lt_instructionVar701::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var701(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar702::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var702(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar703::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var703(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar704::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var704(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar705::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var705(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_a_instructionVar706::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var706(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_a_instructionVar707::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var707(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_aa_instructionVar708::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var708(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_d_instructionVar709::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var709(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_instructionVar710::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var710(parsed)));
        }
        if let Some((inst_len, parsed)) = or_instructionVar711::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var711(parsed)));
        }
        if let Some((inst_len, parsed)) = or_instructionVar712::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var712(parsed)));
        }
        if let Some((inst_len, parsed)) = sha_instructionVar713::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var713(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar714::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var714(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar715::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var715(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar716::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var716(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar717::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var717(parsed)));
        }
        if let Some((inst_len, parsed)) = st_b_instructionVar718::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var718(parsed)));
        }
        if let Some((inst_len, parsed)) = st_b_instructionVar719::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var719(parsed)));
        }
        if let Some((inst_len, parsed)) = st_b_instructionVar720::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var720(parsed)));
        }
        if let Some((inst_len, parsed)) = st_h_instructionVar721::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var721(parsed)));
        }
        if let Some((inst_len, parsed)) = st_h_instructionVar722::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var722(parsed)));
        }
        if let Some((inst_len, parsed)) = st_h_instructionVar723::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var723(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar724::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var724(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar725::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var725(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar726::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var726(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar727::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var727(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_instructionVar728::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var728(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_instructionVar729::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var729(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_instructionVar730::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var730(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_a_instructionVar731::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var731(parsed)));
        }
        if let Some((inst_len, parsed)) = subs_instructionVar732::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var732(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_instructionVar733::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var733(parsed)));
        }
        if let Some((inst_len, parsed)) = ldl_il_instructionVar734::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var734(parsed)));
        }
        if let Some((inst_len, parsed)) = ldl_iu_instructionVar735::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var735(parsed)));
        }
        if let Some((inst_len, parsed)) = jc_a_instructionVar736::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var736(parsed)));
        }
        if let Some((inst_len, parsed)) = addsc_a_instructionVar737::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var737(parsed)));
        }
        if let Some((inst_len, parsed)) = cachei_i_instructionVar738::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var738(parsed)));
        }
        if let Some((inst_len, parsed)) = cachei_w_instructionVar739::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var739(parsed)));
        }
        if let Some((inst_len, parsed)) = cachei_wi_instructionVar740::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var740(parsed)));
        }
        if let Some((inst_len, parsed)) = cachea_i_instructionVar741::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var741(parsed)));
        }
        if let Some((inst_len, parsed)) = cachea_w_instructionVar742::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var742(parsed)));
        }
        if let Some((inst_len, parsed)) = cachea_wi_instructionVar743::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var743(parsed)));
        }
        if let Some((inst_len, parsed)) = cmpswap_w_instructionVar744::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var744(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar745::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var745(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_b_instructionVar746::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var746(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_bu_instructionVar747::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var747(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_d_instructionVar748::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var748(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_da_instructionVar749::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var749(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_h_instructionVar750::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var750(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_hu_instructionVar751::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var751(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_q_instructionVar752::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var752(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar753::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var753(parsed)));
        }
        if let Some((inst_len, parsed)) = ldmst_instructionVar754::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var754(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar755::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var755(parsed)));
        }
        if let Some((inst_len, parsed)) = st_b_instructionVar756::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var756(parsed)));
        }
        if let Some((inst_len, parsed)) = st_d_instructionVar757::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var757(parsed)));
        }
        if let Some((inst_len, parsed)) = st_da_instructionVar758::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var758(parsed)));
        }
        if let Some((inst_len, parsed)) = st_h_instructionVar759::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var759(parsed)));
        }
        if let Some((inst_len, parsed)) = st_q_instructionVar760::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var760(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar761::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var761(parsed)));
        }
        if let Some((inst_len, parsed)) = swap_w_instructionVar762::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var762(parsed)));
        }
        if let Some((inst_len, parsed)) = swapmsk_w_instructionVar763::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var763(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_a_instructionVar764::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var764(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_bu_instructionVar765::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var765(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_h_instructionVar766::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var766(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_w_instructionVar767::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var767(parsed)));
        }
        if let Some((inst_len, parsed)) = st_a_instructionVar768::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var768(parsed)));
        }
        if let Some((inst_len, parsed)) = st_b_instructionVar769::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var769(parsed)));
        }
        if let Some((inst_len, parsed)) = st_h_instructionVar770::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var770(parsed)));
        }
        if let Some((inst_len, parsed)) = st_w_instructionVar771::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var771(parsed)));
        }
        if let Some((inst_len, parsed)) = dinit_instructionVar772::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var772(parsed)));
        }
        if let Some((inst_len, parsed)) = dstep_instructionVar773::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var773(parsed)));
        }
        if let Some((inst_len, parsed)) = minit_instructionVar774::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var774(parsed)));
        }
        if let Some((inst_len, parsed)) = mstep_l_instructionVar775::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var775(parsed)));
        }
        if let Some((inst_len, parsed)) = mstep_u_instructionVar776::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var776(parsed)));
        }
        if let Some((inst_len, parsed)) = add_f_instructionVar777::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var777(parsed)));
        }
        if let Some((inst_len, parsed)) = and_f_instructionVar778::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var778(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_instructionVar779::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var779(parsed)));
        }
        if let Some((inst_len, parsed)) = comp_f_instructionVar780::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var780(parsed)));
        }
        if let Some((inst_len, parsed)) = inb_i_instructionVar781::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var781(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_f_instructionVar782::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var782(parsed)));
        }
        if let Some((inst_len, parsed)) = or_f_instructionVar783::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var783(parsed)));
        }
        if let Some((inst_len, parsed)) = rl_instructionVar784::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var784(parsed)));
        }
        if let Some((inst_len, parsed)) = rr_instructionVar785::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var785(parsed)));
        }
        if let Some((inst_len, parsed)) = set_instructionVar786::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var786(parsed)));
        }
        if let Some((inst_len, parsed)) = shl_instructionVar787::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var787(parsed)));
        }
        if let Some((inst_len, parsed)) = shr_instructionVar788::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var788(parsed)));
        }
        if let Some((inst_len, parsed)) = st_f_instructionVar789::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var789(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_f_instructionVar790::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var790(parsed)));
        }
        if let Some((inst_len, parsed)) = xch_f_instructionVar791::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var791(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_f_instructionVar792::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var792(parsed)));
        }
        if let Some((inst_len, parsed)) = add_instructionVar793::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var793(parsed)));
        }
        if let Some((inst_len, parsed)) = add_i_instructionVar794::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var794(parsed)));
        }
        if let Some((inst_len, parsed)) = add_pi_instructionVar795::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var795(parsed)));
        }
        if let Some((inst_len, parsed)) = and_instructionVar796::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var796(parsed)));
        }
        if let Some((inst_len, parsed)) = and_pi_instructionVar797::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var797(parsed)));
        }
        if let Some((inst_len, parsed)) = bcopy_instructionVar798::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var798(parsed)));
        }
        if let Some((inst_len, parsed)) = chkb_instructionVar799::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var799(parsed)));
        }
        if let Some((inst_len, parsed)) = comp_instructionVar800::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var800(parsed)));
        }
        if let Some((inst_len, parsed)) = comp_i_instructionVar801::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var801(parsed)));
        }
        if let Some((inst_len, parsed)) = comp_pi_instructionVar802::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var802(parsed)));
        }
        if let Some((inst_len, parsed)) = debug_instructionVar803::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var803(parsed)));
        }
        if let Some((inst_len, parsed)) = inb_instructionVar804::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var804(parsed)));
        }
        if let Some((inst_len, parsed)) = jc_i_instructionVar805::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var805(parsed)));
        }
        if let Some((inst_len, parsed)) = jc_ia_instructionVar806::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var806(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_i_instructionVar807::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var807(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_p_instructionVar808::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var808(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_pi_instructionVar809::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var809(parsed)));
        }
        if let Some((inst_len, parsed)) = mclr_pi_instructionVar810::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var810(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_instructionVar811::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var811(parsed)));
        }
        if let Some((inst_len, parsed)) = mset_pi_instructionVar812::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var812(parsed)));
        }
        if let Some((inst_len, parsed)) = neg_instructionVar813::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var813(parsed)));
        }
        if let Some((inst_len, parsed)) = not_instructionVar814::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var814(parsed)));
        }
        if let Some((inst_len, parsed)) = or_instructionVar815::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var815(parsed)));
        }
        if let Some((inst_len, parsed)) = or_pi_instructionVar816::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var816(parsed)));
        }
        if let Some((inst_len, parsed)) = pri_instructionVar817::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var817(parsed)));
        }
        if let Some((inst_len, parsed)) = st_p_instructionVar818::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var818(parsed)));
        }
        if let Some((inst_len, parsed)) = st_pi_instructionVar819::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var819(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_instructionVar820::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var820(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_i_instructionVar821::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var821(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_pi_instructionVar822::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var822(parsed)));
        }
        if let Some((inst_len, parsed)) = xch_pi_instructionVar823::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var823(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_instructionVar824::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var824(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_pi_instructionVar825::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var825(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_f_instructionVar826::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var826(parsed)));
        }
        if let Some((inst_len, parsed)) = exit_instructionVar827::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var827(parsed)));
        }
        if let Some((inst_len, parsed)) = jc_instructionVar828::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var828(parsed)));
        }
        if let Some((inst_len, parsed)) = jl_instructionVar829::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var829(parsed)));
        }
        if let Some((inst_len, parsed)) = ld_if_instructionVar830::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var830(parsed)));
        }
        if let Some((inst_len, parsed)) = set_f_instructionVar831::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var831(parsed)));
        }
        if let Some((inst_len, parsed)) = st_if_instructionVar832::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var832(parsed)));
        }
        if let Some((inst_len, parsed)) = copy_instructionVar833::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var833(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:794:1, end:794:6))"]
#[derive(Clone, Debug)]
struct off10Var0 {
    op1621: TokenField_op1621,
    sop2831: TokenField_sop2831,
}
impl off10Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (self.op1621.disassembly()
            | u32::try_from(6i128)
                .ok()
                .map(|shl| self.sop2831.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = (token_parser.TokenFieldop1621().disassembly()
            | u32::try_from(6i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldsop2831()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0));
        let op1621 = token_parser.TokenFieldop1621();
        let sop2831 = token_parser.TokenFieldsop2831();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1621, sop2831 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff10 {
    Var0(off10Var0),
}
impl Tableoff10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off10Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:796:1, end:796:6))"]
#[derive(Clone, Debug)]
struct off16Var0 {
    op1621: TokenField_op1621,
    op2831: TokenField_op2831,
    sop2227: TokenField_sop2227,
}
impl off16Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = ((self.op1621.disassembly()
            | u32::try_from(6i128)
                .ok()
                .map(|shl| self.op2831.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0))
            | u32::try_from(10i128)
                .ok()
                .map(|shl| self.sop2227.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = ((token_parser.TokenFieldop1621().disassembly()
            | u32::try_from(6i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldop2831()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0))
            | u32::try_from(10i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldsop2227()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0));
        let op1621 = token_parser.TokenFieldop1621();
        let sop2227 = token_parser.TokenFieldsop2227();
        let op2831 = token_parser.TokenFieldop2831();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op1621,
                sop2227,
                op2831,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff16 {
    Var0(off16Var0),
}
impl Tableoff16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off16Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:798:1, end:798:6))"]
#[derive(Clone, Debug)]
struct off18Var0 {
    op1215: TokenField_op1215,
    op2225: TokenField_op2225,
    op2831: TokenField_op2831,
    op1621: TokenField_op1621,
}
impl off18Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (((u32::try_from(28i128)
            .ok()
            .map(|shl| self.op1215.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | u32::try_from(10i128)
                .ok()
                .map(|shl| self.op2225.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0))
            | u32::try_from(6i128)
                .ok()
                .map(|shl| self.op2831.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0))
            | self.op1621.disassembly());
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (((u32::try_from(28i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop1215()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | u32::try_from(10i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldop2225()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0))
            | u32::try_from(6i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldop2831()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0))
            | token_parser.TokenFieldop1621().disassembly());
        let op1621 = token_parser.TokenFieldop1621();
        let op2225 = token_parser.TokenFieldop2225();
        let op2831 = token_parser.TokenFieldop2831();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op1215,
                op1621,
                op2225,
                op2831,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff18 {
    Var0(off18Var0),
}
impl Tableoff18 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off18Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:800:1, end:800:8))"]
#[derive(Clone, Debug)]
struct off24pcVar0 {
    op1631: TokenField_op1631,
    sop0815: TokenField_sop0815,
}
impl off24pcVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (self.op1631.disassembly()
                | u32::try_from(16i128)
                    .ok()
                    .map(|shl| self.sop0815.disassembly().checked_shl(shl))
                    .flatten()
                    .unwrap_or(0))
            .wrapping_mul(2i128),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let sop0815 = token_parser.TokenFieldsop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (token_parser.TokenFieldop1631().disassembly()
                | u32::try_from(16i128)
                    .ok()
                    .map(|shl| {
                        token_parser
                            .TokenFieldsop0815()
                            .disassembly()
                            .checked_shl(shl)
                    })
                    .flatten()
                    .unwrap_or(0))
            .wrapping_mul(2i128),
        );
        let op1631 = token_parser.TokenFieldop1631();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop0815, op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff24pc {
    Var0(off24pcVar0),
}
impl Tableoff24pc {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off24pcVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:802:1, end:802:9))"]
#[derive(Clone, Debug)]
struct off24absVar0 {
    op1631: TokenField_op1631,
    op0811: TokenField_op0811,
    op1215: TokenField_op1215,
}
impl off24absVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = ((u32::try_from(1i128)
            .ok()
            .map(|shl| self.op1631.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | u32::try_from(17i128)
                .ok()
                .map(|shl| self.op0811.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0))
            | u32::try_from(28i128)
                .ok()
                .map(|shl| self.op1215.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op0811 = token_parser.TokenFieldop0811();
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = ((u32::try_from(1i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop1631()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | u32::try_from(17i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldop0811()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0))
            | u32::try_from(28i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldop1215()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0));
        let op1631 = token_parser.TokenFieldop1631();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                op0811,
                op1215,
                op1631,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum Tableoff24abs {
    Var0(off24absVar0),
}
impl Tableoff24abs {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            off24absVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:804:1, end:804:12))"]
#[derive(Clone, Debug)]
struct off0811pc4oVar0 {
    op0811: TokenField_op0811,
}
impl off0811pc4oVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (4294967264i128
                | u32::try_from(1i128)
                    .ok()
                    .map(|shl| self.op0811.disassembly().checked_shl(shl))
                    .flatten()
                    .unwrap_or(0)),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            (4294967264i128
                | u32::try_from(1i128)
                    .ok()
                    .map(|shl| {
                        token_parser
                            .TokenFieldop0811()
                            .disassembly()
                            .checked_shl(shl)
                    })
                    .flatten()
                    .unwrap_or(0)),
        );
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4o {
    Var0(off0811pc4oVar0),
}
impl Tableoff0811pc4o {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0811pc4oVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:806:1, end:806:12))"]
#[derive(Clone, Debug)]
struct off0811pc4zVar0 {
    op0811: TokenField_op0811,
}
impl off0811pc4zVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.op0811.disassembly().wrapping_mul(2i128));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldop0811()
                .disassembly()
                .wrapping_mul(2i128),
        );
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4z {
    Var0(off0811pc4zVar0),
}
impl Tableoff0811pc4z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0811pc4zVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:808:1, end:808:12))"]
#[derive(Clone, Debug)]
struct off0815pc8sVar0 {
    sop0815: TokenField_sop0815,
}
impl off0815pc8sVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.sop0815.disassembly().wrapping_mul(2i128));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldsop0815()
                .disassembly()
                .wrapping_mul(2i128),
        );
        let sop0815 = token_parser.TokenFieldsop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0815pc8s {
    Var0(off0815pc8sVar0),
}
impl Tableoff0815pc8s {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0815pc8sVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:810:1, end:810:13))"]
#[derive(Clone, Debug)]
struct off1630pc15sVar0 {
    sop1630: TokenField_sop1630,
}
impl off1630pc15sVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.sop1630.disassembly().wrapping_mul(2i128));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldsop1630()
                .disassembly()
                .wrapping_mul(2i128),
        );
        let sop1630 = token_parser.TokenFieldsop1630();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1630 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff1630pc15s {
    Var0(off1630pc15sVar0),
}
impl Tableoff1630pc15s {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off1630pc15sVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:813:1, end:813:14))"]
#[derive(Clone, Debug)]
struct off0811pc4z16Var0 {
    op0811: TokenField_op0811,
}
impl off0811pc4z16Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            self.op0811
                .disassembly()
                .wrapping_add(16i128)
                .wrapping_mul(2i128),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = i128::try_from(inst_start).unwrap().wrapping_add(
            token_parser
                .TokenFieldop0811()
                .disassembly()
                .wrapping_add(16i128)
                .wrapping_mul(2i128),
        );
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoff0811pc4z16 {
    Var0(off0811pc4z16Var0),
}
impl Tableoff0811pc4z16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = off0811pc4z16Var0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:816:1, end:816:11))"]
#[derive(Clone, Debug)]
struct const0607ZVar0 {
    op0607: TokenField_op0607,
}
impl const0607ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0607.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op0607 = token_parser.TokenFieldop0607();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0607 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0607Z {
    Var0(const0607ZVar0),
}
impl Tableconst0607Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0607ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:818:1, end:818:11))"]
#[derive(Clone, Debug)]
struct const0810ZVar0 {
    op0810: TokenField_op0810,
}
impl const0810ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0810.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op0810 = token_parser.TokenFieldop0810();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0810 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0810Z {
    Var0(const0810ZVar0),
}
impl Tableconst0810Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0810ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:820:1, end:820:14))"]
#[derive(Clone, Debug)]
struct const0811Z6zzVar0 {
    op0811: TokenField_op0811,
}
impl const0811Z6zzVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .map(|shl| self.op0811.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = u32::try_from(2i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop0811()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z6zz {
    Var0(const0811Z6zzVar0),
}
impl Tableconst0811Z6zz {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0811Z6zzVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:822:1, end:822:11))"]
#[derive(Clone, Debug)]
struct const0811ZVar0 {
    op0811: TokenField_op0811,
}
impl const0811ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0811.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z {
    Var0(const0811ZVar0),
}
impl Tableconst0811Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0811ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:824:1, end:824:13))"]
#[derive(Clone, Debug)]
struct const0811Z5zVar0 {
    op0811: TokenField_op0811,
}
impl const0811Z5zVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(1i128)
            .ok()
            .map(|shl| self.op0811.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop0811()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let op0811 = token_parser.TokenFieldop0811();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0811 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0811Z5z {
    Var0(const0811Z5zVar0),
}
impl Tableconst0811Z5z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0811Z5zVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:826:1, end:826:11))"]
#[derive(Clone, Debug)]
struct const0815ZVar0 {
    op0815: TokenField_op0815,
}
impl const0815ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op0815.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op0815 = token_parser.TokenFieldop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0815Z {
    Var0(const0815ZVar0),
}
impl Tableconst0815Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0815ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:828:1, end:828:15))"]
#[derive(Clone, Debug)]
struct const0815Z10zzVar0 {
    op0815: TokenField_op0815,
}
impl const0815Z10zzVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .map(|shl| self.op0815.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = u32::try_from(2i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop0815()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let op0815 = token_parser.TokenFieldop0815();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0815 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst0815Z10zz {
    Var0(const0815Z10zzVar0),
}
impl Tableconst0815Z10zz {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const0815Z10zzVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:830:1, end:830:11))"]
#[derive(Clone, Debug)]
struct const1111ZVar0 {
    op1111: TokenField_op1111,
}
impl const1111ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1111.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1111 = token_parser.TokenFieldop1111();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1111 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1111Z {
    Var0(const1111ZVar0),
}
impl Tableconst1111Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1111ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:832:1, end:832:11))"]
#[derive(Clone, Debug)]
struct const1215SVar0 {
    sop1215: TokenField_sop1215,
}
impl const1215SVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.sop1215.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let sop1215 = token_parser.TokenFieldsop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { sop1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215S {
    Var0(const1215SVar0),
}
impl Tableconst1215S {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215SVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:834:1, end:834:11))"]
#[derive(Clone, Debug)]
struct const1215ZVar0 {
    op1215: TokenField_op1215,
}
impl const1215ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1215.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z {
    Var0(const1215ZVar0),
}
impl Tableconst1215Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:836:1, end:836:14))"]
#[derive(Clone, Debug)]
struct const1215Z6zzVar0 {
    op1215: TokenField_op1215,
}
impl const1215Z6zzVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(2i128)
            .ok()
            .map(|shl| self.op1215.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = u32::try_from(2i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop1215()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z6zz {
    Var0(const1215Z6zzVar0),
}
impl Tableconst1215Z6zz {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215Z6zzVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:838:1, end:838:13))"]
#[derive(Clone, Debug)]
struct const1215Z5zVar0 {
    op1215: TokenField_op1215,
}
impl const1215Z5zVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = u32::try_from(1i128)
            .ok()
            .map(|shl| self.op1215.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop1215()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1215Z5z {
    Var0(const1215Z5zVar0),
}
impl Tableconst1215Z5z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1215Z5zVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:840:1, end:840:11))"]
#[derive(Clone, Debug)]
struct const1220SVar0 {
    sop1620: TokenField_sop1620,
    op1215: TokenField_op1215,
}
impl const1220SVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| self.sop1620.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldsop1620()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let sop1620 = token_parser.TokenFieldsop1620();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, sop1620 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1220S {
    Var0(const1220SVar0),
}
impl Tableconst1220S {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1220SVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:842:1, end:842:11))"]
#[derive(Clone, Debug)]
struct const1220ZVar0 {
    op1620: TokenField_op1620,
    op1215: TokenField_op1215,
}
impl const1220ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| self.op1620.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop1620()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let op1620 = token_parser.TokenFieldop1620();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, op1620 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1220Z {
    Var0(const1220ZVar0),
}
impl Tableconst1220Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1220ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:844:1, end:844:11))"]
#[derive(Clone, Debug)]
struct const1227SVar0 {
    sop1627: TokenField_sop1627,
    op1215: TokenField_op1215,
}
impl const1227SVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| self.sop1627.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldsop1627()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let sop1627 = token_parser.TokenFieldsop1627();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, sop1627 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1227S {
    Var0(const1227SVar0),
}
impl Tableconst1227S {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1227SVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:846:1, end:846:11))"]
#[derive(Clone, Debug)]
struct const1227ZVar0 {
    op1627: TokenField_op1627,
    op1215: TokenField_op1215,
}
impl const1227ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| self.op1627.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop1627()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let op1627 = token_parser.TokenFieldop1627();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1215, op1627 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1227Z {
    Var0(const1227ZVar0),
}
impl Tableconst1227Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1227ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:848:1, end:848:11))"]
#[derive(Clone, Debug)]
struct const1617ZVar0 {
    op1617: TokenField_op1617,
}
impl const1617ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1617.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1617 = token_parser.TokenFieldop1617();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1617 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1617Z {
    Var0(const1617ZVar0),
}
impl Tableconst1617Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1617ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:850:1, end:850:11))"]
#[derive(Clone, Debug)]
struct const1620ZVar0 {
    op1620: TokenField_op1620,
}
impl const1620ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op1620.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op1620 = token_parser.TokenFieldop1620();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op1620 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst1620Z {
    Var0(const1620ZVar0),
}
impl Tableconst1620Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const1620ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:852:1, end:852:11))"]
#[derive(Clone, Debug)]
struct const2327ZVar0 {
    op2327: TokenField_op2327,
}
impl const2327ZVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.op2327.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let op2327 = token_parser.TokenFieldop2327();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op2327 }))
    }
}
#[derive(Clone, Debug)]
enum Tableconst2327Z {
    Var0(const2327ZVar0),
}
impl Tableconst2327Z {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = const2327ZVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:854:1, end:854:5))"]
#[derive(Clone, Debug)]
struct NbitVar0 {
    op0707: TokenField_op0707,
    op1215: TokenField_op1215,
}
impl NbitVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| self.op0707.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | self.op1215.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_reloc),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        calc_reloc = (u32::try_from(4i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldop0707()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | token_parser.TokenFieldop1215().disassembly());
        let op0707 = token_parser.TokenFieldop0707();
        let op1215 = token_parser.TokenFieldop1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { op0707, op1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableNbit {
    Var0(NbitVar0),
}
impl TableNbit {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            NbitVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:862:1, end:862:3))"]
#[derive(Clone, Debug)]
struct BOVar0 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
}
impl BOVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+r]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop2627().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rpe1215, Rpo1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:864:1, end:864:3))"]
#[derive(Clone, Debug)]
struct BOVar1 {
    Rpe1215: TokenField_Rpe1215,
    Rpo1215: TokenField_Rpo1215,
}
impl BOVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.Rpe1215.display(),
            DisplayElement::Literal("/"),
            self.Rpo1215.display(),
            DisplayElement::Literal("+i]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        let Rpe1215 = token_parser.TokenFieldRpe1215();
        let Rpo1215 = token_parser.TokenFieldRpo1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop1621().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop2627().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldop2831().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Rpe1215, Rpo1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:866:1, end:866:3))"]
#[derive(Clone, Debug)]
struct BOVar2 {
    Ra1215: TokenField_Ra1215,
    off10: Tableoff10,
}
impl BOVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2627().disassembly() != 2i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:868:1, end:868:3))"]
#[derive(Clone, Debug)]
struct BOVar3 {
    Ra1215: TokenField_Ra1215,
    off10: Tableoff10,
}
impl BOVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2627().disassembly() != 0i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:870:1, end:870:3))"]
#[derive(Clone, Debug)]
struct BOVar4 {
    Ra1215: TokenField_Ra1215,
    off10: Tableoff10,
}
impl BOVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[+"),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off10.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if token_parser.TokenFieldop2627().disassembly() != 1i128 {
            return None;
        }
        let off10 = if let Some((len, table)) =
            Tableoff10::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off10, Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableBO {
    Var0(BOVar0),
    Var1(BOVar1),
    Var2(BOVar2),
    Var3(BOVar3),
    Var4(BOVar4),
}
impl TableBO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            BOVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            BOVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:873:1, end:873:4))"]
#[derive(Clone, Debug)]
struct BOLVar0 {
    Ra1215: TokenField_Ra1215,
    off16: Tableoff16,
}
impl BOLVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.off16.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 0u64 as u32;
        let off16 = if let Some((len, table)) =
            Tableoff16::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_1_len = block_1_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { off16, Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableBOL {
    Var0(BOLVar0),
}
impl TableBOL {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            BOLVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:880:1, end:880:4))"]
#[derive(Clone, Debug)]
struct SSRVar0 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 1i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:882:1, end:882:4))"]
#[derive(Clone, Debug)]
struct SSRVar1 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:878:1, end:878:4))"]
#[derive(Clone, Debug)]
struct SSRVar2 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:876:1, end:876:4))"]
#[derive(Clone, Debug)]
struct SSRVar3 {
    Ra1215: TokenField_Ra1215,
}
impl SSRVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 3i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableSSR {
    Var0(SSRVar0),
    Var1(SSRVar1),
    Var2(SSRVar2),
    Var3(SSRVar3),
}
impl TableSSR {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SSRVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSRVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSRVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSRVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:889:1, end:889:4))"]
#[derive(Clone, Debug)]
struct SLRVar0 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 1i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:891:1, end:891:4))"]
#[derive(Clone, Debug)]
struct SLRVar1 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0707().disassembly() != 0i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:887:1, end:887:4))"]
#[derive(Clone, Debug)]
struct SLRVar2 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("+]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:885:1, end:885:4))"]
#[derive(Clone, Debug)]
struct SLRVar3 {
    Ra1215: TokenField_Ra1215,
}
impl SLRVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 1i128 {
            return None;
        }
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Ra1215 }))
    }
}
#[derive(Clone, Debug)]
enum TableSLR {
    Var0(SLRVar0),
    Var1(SLRVar1),
    Var2(SLRVar2),
    Var3(SLRVar3),
}
impl TableSLR {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SLRVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLRVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLRVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLRVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:894:1, end:894:4))"]
#[derive(Clone, Debug)]
struct SROVar0 {
    Ra1215: TokenField_Ra1215,
    const0811Z: Tableconst0811Z,
}
impl SROVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i128 {
            return None;
        }
        let const0811Z = if let Some((len, table)) = Tableconst0811Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0811Z, Ra1215 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:896:1, end:896:4))"]
#[derive(Clone, Debug)]
struct SROVar1 {
    Ra1215: TokenField_Ra1215,
    const0811Z5z: Tableconst0811Z5z,
}
impl SROVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z5z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i128 {
            return None;
        }
        let const0811Z5z = if let Some((len, table)) = Tableconst0811Z5z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0811Z5z,
                Ra1215,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:898:1, end:898:4))"]
#[derive(Clone, Debug)]
struct SROVar2 {
    Ra1215: TokenField_Ra1215,
    const0811Z6zz: Tableconst0811Z6zz,
}
impl SROVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.Ra1215.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0811Z6zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i128 {
            return None;
        }
        let const0811Z6zz = if let Some((len, table)) =
            Tableconst0811Z6zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Ra1215 = token_parser.TokenFieldRa1215();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                const0811Z6zz,
                Ra1215,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TableSRO {
    Var0(SROVar0),
    Var1(SROVar1),
    Var2(SROVar2),
}
impl TableSRO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SROVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SROVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SROVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:901:1, end:901:5))"]
#[derive(Clone, Debug)]
struct SLROVar0 {
    const1215Z: Tableconst1215Z,
}
impl SLROVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:903:1, end:903:5))"]
#[derive(Clone, Debug)]
struct SLROVar1 {
    const1215Z5z: Tableconst1215Z5z,
}
impl SLROVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z5z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i128 {
            return None;
        }
        let const1215Z5z = if let Some((len, table)) = Tableconst1215Z5z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z5z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:905:1, end:905:5))"]
#[derive(Clone, Debug)]
struct SLROVar2 {
    const1215Z6zz: Tableconst1215Z6zz,
}
impl SLROVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z6zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i128 {
            return None;
        }
        let const1215Z6zz = if let Some((len, table)) =
            Tableconst1215Z6zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z6zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSLRO {
    Var0(SLROVar0),
    Var1(SLROVar1),
    Var2(SLROVar2),
}
impl TableSLRO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SLROVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLROVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SLROVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:908:1, end:908:5))"]
#[derive(Clone, Debug)]
struct SSROVar0 {
    const1215Z: Tableconst1215Z,
}
impl SSROVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 0i128 {
            return None;
        }
        let const1215Z = if let Some((len, table)) = Tableconst1215Z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:910:1, end:910:5))"]
#[derive(Clone, Debug)]
struct SSROVar1 {
    const1215Z5z: Tableconst1215Z5z,
}
impl SSROVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z5z.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldop0607().disassembly() != 2i128 {
            return None;
        }
        let const1215Z5z = if let Some((len, table)) = Tableconst1215Z5z::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z5z }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:912:1, end:912:5))"]
#[derive(Clone, Debug)]
struct SSROVar2 {
    const1215Z6zz: Tableconst1215Z6zz,
}
impl SSROVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a15),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const1215Z6zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldop0405().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i128 {
            return None;
        }
        let const1215Z6zz = if let Some((len, table)) =
            Tableconst1215Z6zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const1215Z6zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSSRO {
    Var0(SSROVar0),
    Var1(SSROVar1),
    Var2(SSROVar2),
}
impl TableSSRO {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SSROVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSROVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SSROVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.sinc, start:915:1, end:915:3))"]
#[derive(Clone, Debug)]
struct SCVar0 {
    const0815Z10zz: Tableconst0815Z10zz,
}
impl SCVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            DisplayElement::Register(Register::a10),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
        self.const0815Z10zz.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        if token_parser.TokenFieldop0003().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldop0404().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldop0606().disassembly() != 1i128 {
            return None;
        }
        let const0815Z10zz = if let Some((len, table)) =
            Tableconst0815Z10zz::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { const0815Z10zz }))
    }
}
#[derive(Clone, Debug)]
enum TableSC {
    Var0(SCVar0),
}
impl TableSC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SCVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:69:1, end:69:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar0 {}
impl CONDCAVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:70:1, end:70:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar1 {}
impl CONDCAVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:71:1, end:71:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar2 {}
impl CONDCAVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 2i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:72:1, end:72:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar3 {}
impl CONDCAVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 3i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:73:1, end:73:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar4 {}
impl CONDCAVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 4i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:74:1, end:74:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar5 {}
impl CONDCAVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 5i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:75:1, end:75:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar6 {}
impl CONDCAVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 6i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:76:1, end:76:7))"]
#[derive(Clone, Debug)]
struct CONDCAVar7 {}
impl CONDCAVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccA().disassembly() != 7i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCA {
    Var0(CONDCAVar0),
    Var1(CONDCAVar1),
    Var2(CONDCAVar2),
    Var3(CONDCAVar3),
    Var4(CONDCAVar4),
    Var5(CONDCAVar5),
    Var6(CONDCAVar6),
    Var7(CONDCAVar7),
}
impl TableCONDCA {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CONDCAVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCAVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:78:1, end:78:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar0 {}
impl CONDCBVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:79:1, end:79:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar1 {}
impl CONDCBVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:80:1, end:80:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar2 {}
impl CONDCBVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 2i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:81:1, end:81:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar3 {}
impl CONDCBVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 3i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:82:1, end:82:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar4 {}
impl CONDCBVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 4i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:83:1, end:83:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar5 {}
impl CONDCBVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 5i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:84:1, end:84:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar6 {}
impl CONDCBVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 6i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:85:1, end:85:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar7 {}
impl CONDCBVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 7i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:86:1, end:86:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar8 {}
impl CONDCBVar8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_N")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 8i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:87:1, end:87:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar9 {}
impl CONDCBVar9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 9i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:88:1, end:88:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar10 {}
impl CONDCBVar10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NV")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 10i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:89:1, end:89:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar11 {}
impl CONDCBVar11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 11i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:90:1, end:90:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar12 {}
impl CONDCBVar12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 12i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:91:1, end:91:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar13 {}
impl CONDCBVar13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 13i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:92:1, end:92:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar14 {}
impl CONDCBVar14 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 14i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:93:1, end:93:7))"]
#[derive(Clone, Debug)]
struct CONDCBVar15 {}
impl CONDCBVar15 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccB().disassembly() != 15i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCB {
    Var0(CONDCBVar0),
    Var1(CONDCBVar1),
    Var2(CONDCBVar2),
    Var3(CONDCBVar3),
    Var4(CONDCBVar4),
    Var5(CONDCBVar5),
    Var6(CONDCBVar6),
    Var7(CONDCBVar7),
    Var8(CONDCBVar8),
    Var9(CONDCBVar9),
    Var10(CONDCBVar10),
    Var11(CONDCBVar11),
    Var12(CONDCBVar12),
    Var13(CONDCBVar13),
    Var14(CONDCBVar14),
    Var15(CONDCBVar15),
}
impl TableCONDCB {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var14(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var15(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CONDCBVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar8::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar9::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar10::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar11::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar12::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar13::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar14::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var14(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCBVar15::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var15(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:96:1, end:96:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar0 {}
impl CONDCABVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UC")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:97:1, end:97:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar1 {}
impl CONDCABVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_Z")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:98:1, end:98:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar2 {}
impl CONDCABVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 2i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:99:1, end:99:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar3 {}
impl CONDCABVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_V")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 3i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:100:1, end:100:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar4 {}
impl CONDCABVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_ULT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 4i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:101:1, end:101:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar5 {}
impl CONDCABVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 5i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:102:1, end:102:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar6 {}
impl CONDCABVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 6i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:103:1, end:103:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar7 {}
impl CONDCABVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGT")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 7i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:104:1, end:104:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar8 {}
impl CONDCABVar8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_N")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 8i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:105:1, end:105:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar9 {}
impl CONDCABVar9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 9i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:106:1, end:106:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar10 {}
impl CONDCABVar10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_NV")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 10i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:107:1, end:107:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar11 {}
impl CONDCABVar11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_UGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 11i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:108:1, end:108:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar12 {}
impl CONDCABVar12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SGE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 12i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:109:1, end:109:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar13 {}
impl CONDCABVar13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_SLE")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 13i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:110:1, end:110:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar14 {}
impl CONDCABVar14 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNZ")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 14i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:111:1, end:111:8))"]
#[derive(Clone, Debug)]
struct CONDCABVar15 {}
impl CONDCABVar15 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("cc_CNN")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldccAB().disassembly() != 15i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableCONDCAB {
    Var0(CONDCABVar0),
    Var1(CONDCABVar1),
    Var2(CONDCABVar2),
    Var3(CONDCABVar3),
    Var4(CONDCABVar4),
    Var5(CONDCABVar5),
    Var6(CONDCABVar6),
    Var7(CONDCABVar7),
    Var8(CONDCABVar8),
    Var9(CONDCABVar9),
    Var10(CONDCABVar10),
    Var11(CONDCABVar11),
    Var12(CONDCABVar12),
    Var13(CONDCABVar13),
    Var14(CONDCABVar14),
    Var15(CONDCABVar15),
}
impl TableCONDCAB {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var14(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var15(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CONDCABVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar8::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar9::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar10::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar11::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar12::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar13::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar14::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var14(parsed)));
        }
        if let Some((inst_len, parsed)) =
            CONDCABVar15::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var15(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:113:1, end:113:5))"]
#[derive(Clone, Debug)]
struct imm5Var0 {
    pcp_op0004: TokenField_pcp_op0004,
}
impl imm5Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.pcp_op0004.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0004 = token_parser.TokenFieldpcp_op0004();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0004 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm5 {
    Var0(imm5Var0),
}
impl Tableimm5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm5Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:114:1, end:114:5))"]
#[derive(Clone, Debug)]
struct imm6Var0 {
    pcp_op0005: TokenField_pcp_op0005,
}
impl imm6Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.pcp_op0005.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm6 {
    Var0(imm6Var0),
}
impl Tableimm6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm6Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:116:1, end:116:6))"]
#[derive(Clone, Debug)]
struct imm16Var0 {
    pcp_op1631: TokenField_pcp_op1631,
}
impl imm16Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.pcp_op1631.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op1631 = token_parser.TokenFieldpcp_op1631();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm16 {
    Var0(imm16Var0),
}
impl Tableimm16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm16Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:117:1, end:117:8))"]
#[derive(Clone, Debug)]
struct offset6Var0 {
    pcp_op0005: TokenField_pcp_op0005,
}
impl offset6Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[#"),
            self.pcp_op0005.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6 {
    Var0(offset6Var0),
}
impl Tableoffset6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            offset6Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:119:1, end:119:9))"]
#[derive(Clone, Debug)]
struct offset6WVar0 {
    R0608: TokenField_R0608,
    pcp_op0005: TokenField_pcp_op0005,
}
impl offset6WVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("[#"),
            self.pcp_op0005.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6W {
    Var0(offset6WVar0),
}
impl Tableoffset6W {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            offset6WVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:120:1, end:120:10))"]
#[derive(Clone, Debug)]
struct offset6RWVar0 {
    R0608: TokenField_R0608,
    pcp_op0005: TokenField_pcp_op0005,
}
impl offset6RWVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 6usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("[#"),
            self.pcp_op0005.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum Tableoffset6RW {
    Var0(offset6RWVar0),
}
impl Tableoffset6RW {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            offset6RWVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:122:1, end:122:4))"]
#[derive(Clone, Debug)]
struct SRCVar0 {}
impl SRCVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Register(Register::R4)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0708().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:123:1, end:123:4))"]
#[derive(Clone, Debug)]
struct SRCVar1 {}
impl SRCVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R4),
            DisplayElement::Literal("+"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0708().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:124:1, end:124:4))"]
#[derive(Clone, Debug)]
struct SRCVar2 {}
impl SRCVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R4),
            DisplayElement::Literal("-"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0708().disassembly() != 2i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSRC {
    Var0(SRCVar0),
    Var1(SRCVar1),
    Var2(SRCVar2),
}
impl TableSRC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SRCVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SRCVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SRCVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:126:1, end:126:4))"]
#[derive(Clone, Debug)]
struct DSTVar0 {}
impl DSTVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Register(Register::R5)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0910().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:127:1, end:127:4))"]
#[derive(Clone, Debug)]
struct DSTVar1 {}
impl DSTVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R5),
            DisplayElement::Literal("+"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0910().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:128:1, end:128:4))"]
#[derive(Clone, Debug)]
struct DSTVar2 {}
impl DSTVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Register(Register::R5),
            DisplayElement::Literal("-"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0910().disassembly() != 2i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableDST {
    Var0(DSTVar0),
    Var1(DSTVar1),
    Var2(DSTVar2),
}
impl TableDST {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            DSTVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            DSTVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            DSTVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:130:1, end:130:6))"]
#[derive(Clone, Debug)]
struct SIZE0Var0 {}
impl SIZE0Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("8")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:131:1, end:131:6))"]
#[derive(Clone, Debug)]
struct SIZE0Var1 {}
impl SIZE0Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("16")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:132:1, end:132:6))"]
#[derive(Clone, Debug)]
struct SIZE0Var2 {}
impl SIZE0Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("32")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE0 {
    Var0(SIZE0Var0),
    Var1(SIZE0Var1),
    Var2(SIZE0Var2),
}
impl TableSIZE0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE0Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE0Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE0Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:134:1, end:134:6))"]
#[derive(Clone, Debug)]
struct SIZE1Var0 {
    R0305: TokenField_R0305,
}
impl SIZE1Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:135:1, end:135:6))"]
#[derive(Clone, Debug)]
struct SIZE1Var1 {
    R0305: TokenField_R0305,
}
impl SIZE1Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:136:1, end:136:6))"]
#[derive(Clone, Debug)]
struct SIZE1Var2 {
    R0305: TokenField_R0305,
}
impl SIZE1Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1 {
    Var0(SIZE1Var0),
    Var1(SIZE1Var1),
    Var2(SIZE1Var2),
}
impl TableSIZE1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE1Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:138:1, end:138:7))"]
#[derive(Clone, Debug)]
struct SIZE1WVar0 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1WVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:139:1, end:139:7))"]
#[derive(Clone, Debug)]
struct SIZE1WVar1 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1WVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:140:1, end:140:7))"]
#[derive(Clone, Debug)]
struct SIZE1WVar2 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1WVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1W {
    Var0(SIZE1WVar0),
    Var1(SIZE1WVar1),
    Var2(SIZE1WVar2),
}
impl TableSIZE1W {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE1WVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1WVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1WVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:142:1, end:142:8))"]
#[derive(Clone, Debug)]
struct SIZE1RWVar0 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1RWVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 0i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:143:1, end:143:8))"]
#[derive(Clone, Debug)]
struct SIZE1RWVar1 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1RWVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 1i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:144:1, end:144:8))"]
#[derive(Clone, Debug)]
struct SIZE1RWVar2 {
    R0608: TokenField_R0608,
    R0305: TokenField_R0305,
}
impl SIZE1RWVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 8usize] = [
            self.R0608.display(),
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("["),
            self.R0305.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0001().disassembly() != 2i128 {
            return None;
        }
        let R0305 = token_parser.TokenFieldR0305();
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { R0305, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE1RW {
    Var0(SIZE1RWVar0),
    Var1(SIZE1RWVar1),
    Var2(SIZE1RWVar2),
}
impl TableSIZE1RW {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE1RWVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1RWVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE1RWVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:146:1, end:146:6))"]
#[derive(Clone, Debug)]
struct SIZE5Var0 {}
impl SIZE5Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("8")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:147:1, end:147:6))"]
#[derive(Clone, Debug)]
struct SIZE5Var1 {}
impl SIZE5Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("16")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:148:1, end:148:6))"]
#[derive(Clone, Debug)]
struct SIZE5Var2 {}
impl SIZE5Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("32")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 1i128 {
            return None;
        }
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE5 {
    Var0(SIZE5Var0),
    Var1(SIZE5Var1),
    Var2(SIZE5Var2),
}
impl TableSIZE5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE5Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:150:1, end:150:7))"]
#[derive(Clone, Debug)]
struct SIZE5WVar0 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl SIZE5WVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("8"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:151:1, end:151:7))"]
#[derive(Clone, Debug)]
struct SIZE5WVar1 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl SIZE5WVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("16"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 0i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:152:1, end:152:7))"]
#[derive(Clone, Debug)]
struct SIZE5WVar2 {
    R0608: TokenField_R0608,
    imm5: Tableimm5,
}
impl SIZE5WVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("["),
            self.R0608.display(),
            DisplayElement::Literal("],"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.imm5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal(","),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("32"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldpcp_op0909().disassembly() != 1i128 {
            return None;
        }
        let imm5 = if let Some((len, table)) =
            Tableimm5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let R0608 = token_parser.TokenFieldR0608();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { imm5, R0608 }))
    }
}
#[derive(Clone, Debug)]
enum TableSIZE5W {
    Var0(SIZE5WVar0),
    Var1(SIZE5WVar1),
    Var2(SIZE5WVar2),
}
impl TableSIZE5W {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SIZE5WVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5WVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SIZE5WVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:158:1, end:158:4))"]
#[derive(Clone, Debug)]
struct CNCVar0 {
    pcp_op0506: TokenField_pcp_op0506,
}
impl CNCVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0506.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0506 = token_parser.TokenFieldpcp_op0506();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0506 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNC {
    Var0(CNCVar0),
}
impl TableCNC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CNCVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:162:1, end:162:6))"]
#[derive(Clone, Debug)]
struct CNT03Var0 {
    pcp_op0204: TokenField_pcp_op0204,
}
impl CNT03Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0204.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0204 = token_parser.TokenFieldpcp_op0204();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0204 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNT03 {
    Var0(CNT03Var0),
}
impl TableCNT03 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CNT03Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:168:1, end:168:6))"]
#[derive(Clone, Debug)]
struct CNT02Var0 {
    pcp_op0203: TokenField_pcp_op0203,
}
impl CNT02Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0203.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0203 = token_parser.TokenFieldpcp_op0203();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0203 }))
    }
}
#[derive(Clone, Debug)]
enum TableCNT02 {
    Var0(CNT02Var0),
}
impl TableCNT02 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            CNT02Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:170:1, end:170:3))"]
#[derive(Clone, Debug)]
struct ECVar0 {
    pcp_op0707: TokenField_pcp_op0707,
}
impl ECVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0707.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0707 = token_parser.TokenFieldpcp_op0707();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0707 }))
    }
}
#[derive(Clone, Debug)]
enum TableEC {
    Var0(ECVar0),
}
impl TableEC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            ECVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:171:1, end:171:3))"]
#[derive(Clone, Debug)]
struct EPVar0 {
    pcp_op0808: TokenField_pcp_op0808,
}
impl EPVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0808.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0808 = token_parser.TokenFieldpcp_op0808();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0808 }))
    }
}
#[derive(Clone, Debug)]
enum TableEP {
    Var0(EPVar0),
}
impl TableEP {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            EPVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:172:1, end:172:4))"]
#[derive(Clone, Debug)]
struct INTVar0 {
    pcp_op0909: TokenField_pcp_op0909,
}
impl INTVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0909.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0909 = token_parser.TokenFieldpcp_op0909();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0909 }))
    }
}
#[derive(Clone, Debug)]
enum TableINT {
    Var0(INTVar0),
}
impl TableINT {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            INTVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:173:1, end:173:3))"]
#[derive(Clone, Debug)]
struct STVar0 {
    pcp_op1010: TokenField_pcp_op1010,
}
impl STVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op1010.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op1010 = token_parser.TokenFieldpcp_op1010();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1010 }))
    }
}
#[derive(Clone, Debug)]
enum TableST {
    Var0(STVar0),
}
impl TableST {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            STVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:175:1, end:175:7))"]
#[derive(Clone, Debug)]
struct SETCLRVar0 {}
impl SETCLRVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("SET")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:176:1, end:176:7))"]
#[derive(Clone, Debug)]
struct SETCLRVar1 {}
impl SETCLRVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("CLR")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if token_parser.TokenFieldpcp_op0505().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableSETCLR {
    Var0(SETCLRVar0),
    Var1(SETCLRVar1),
}
impl TableSETCLR {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SETCLRVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            SETCLRVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:178:1, end:178:4))"]
#[derive(Clone, Debug)]
struct SDBVar0 {
    pcp_op0000: TokenField_pcp_op0000,
}
impl SDBVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0000.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0000 = token_parser.TokenFieldpcp_op0000();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0000 }))
    }
}
#[derive(Clone, Debug)]
enum TableSDB {
    Var0(SDBVar0),
}
impl TableSDB {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            SDBVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:179:1, end:179:4))"]
#[derive(Clone, Debug)]
struct EDAVar0 {
    pcp_op0101: TokenField_pcp_op0101,
}
impl EDAVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0101.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0101 = token_parser.TokenFieldpcp_op0101();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0101 }))
    }
}
#[derive(Clone, Debug)]
enum TableEDA {
    Var0(EDAVar0),
}
impl TableEDA {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            EDAVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:180:1, end:180:4))"]
#[derive(Clone, Debug)]
struct RTAVar0 {
    pcp_op0202: TokenField_pcp_op0202,
}
impl RTAVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0202.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0202 = token_parser.TokenFieldpcp_op0202();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0202 }))
    }
}
#[derive(Clone, Debug)]
enum TableRTA {
    Var0(RTAVar0),
}
impl TableRTA {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            RTAVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:181:1, end:181:4))"]
#[derive(Clone, Debug)]
struct DACVar0 {
    pcp_op0303: TokenField_pcp_op0303,
}
impl DACVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op0303.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op0303 = token_parser.TokenFieldpcp_op0303();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0303 }))
    }
}
#[derive(Clone, Debug)]
enum TableDAC {
    Var0(DACVar0),
}
impl TableDAC {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            DACVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:406:1, end:406:7))"]
#[derive(Clone, Debug)]
struct imm6pcVar0 {
    pcp_op0005: TokenField_pcp_op0005,
}
impl imm6pcVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.pcp_op0005.disassembly());
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(token_parser.TokenFieldpcp_op0005().disassembly());
        let pcp_op0005 = token_parser.TokenFieldpcp_op0005();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0005 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm6pc {
    Var0(imm6pcVar0),
}
impl Tableimm6pc {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm6pcVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:407:1, end:407:8))"]
#[derive(Clone, Debug)]
struct imm10pcVar0 {
    pcp_op0009: TokenField_pcp_op0009,
}
impl imm10pcVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_reloc: i128 = 0;
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(self.pcp_op0009.disassembly());
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_reloc)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_reloc: i128 = 0;
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        calc_reloc = i128::try_from(inst_start)
            .unwrap()
            .wrapping_add(token_parser.TokenFieldpcp_op0009().disassembly());
        let pcp_op0009 = token_parser.TokenFieldpcp_op0009();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op0009 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm10pc {
    Var0(imm10pcVar0),
}
impl Tableimm10pc {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm10pcVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/tricore/data/languages/tricore.pcp.sinc, start:408:1, end:408:9))"]
#[derive(Clone, Debug)]
struct imm16absVar0 {
    pcp_op1631: TokenField_pcp_op1631,
}
impl imm16absVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.pcp_op1631.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 2u64 as u32;
        let token_parser = <TokenParser<2usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_PCPMode_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let pcp_op1631 = token_parser.TokenFieldpcp_op1631();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { pcp_op1631 }))
    }
}
#[derive(Clone, Debug)]
enum Tableimm16abs {
    Var0(imm16absVar0),
}
impl Tableimm16abs {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            imm16absVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
pub fn parse_instruction<T>(
    tokens: &[u8],
    context: &mut T,
    inst_start: u32,
    global_set: &mut impl GlobalSetTrait,
) -> Option<(u32, Vec<DisplayElement>)>
where
    T: ContextTrait + Clone,
{
    let (inst_len, instruction) =
        Tableinstruction::parse(tokens, context, inst_start)?;
    let inst_next = inst_start + inst_len;
    let mut display = vec![];
    instruction.display_extend(
        &mut display,
        context,
        inst_start,
        inst_next,
        global_set,
    );
    Some((inst_next, display))
}
