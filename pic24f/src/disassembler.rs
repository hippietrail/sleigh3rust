use sleigh4rust::*;
pub type AddrType = u32;
pub trait GlobalSetTrait {
    fn set_blockEnd(&mut self, address: Option<u32>, value: i128);
    fn set_phase(&mut self, address: Option<u32>, value: i128);
    fn set_repeatInstr(&mut self, address: Option<u32>, value: i128);
    fn set_skipInstr(&mut self, address: Option<u32>, value: i128);
}
#[derive(Default)]
pub struct GlobalSetDefault<C: ContextTrait>(
    pub std::collections::HashMap<AddrType, C>,
);
impl<C: ContextTrait> GlobalSetTrait for GlobalSetDefault<C> {
    fn set_blockEnd(&mut self, inst_start: Option<AddrType>, value: i128) {
        let Some (inst_start) = inst_start else { return } ;
        self.0.entry(inst_start).or_insert_with(|| {
            let mut context = C::default();
            context
                .register_mut()
                .write_blockEnd_disassembly(value)
                .unwrap();
            context
        });
    }
    fn set_phase(&mut self, inst_start: Option<AddrType>, value: i128) {
        let Some (inst_start) = inst_start else { return } ;
        self.0.entry(inst_start).or_insert_with(|| {
            let mut context = C::default();
            context
                .register_mut()
                .write_phase_disassembly(value)
                .unwrap();
            context
        });
    }
    fn set_repeatInstr(&mut self, inst_start: Option<AddrType>, value: i128) {
        let Some (inst_start) = inst_start else { return } ;
        self.0.entry(inst_start).or_insert_with(|| {
            let mut context = C::default();
            context
                .register_mut()
                .write_repeatInstr_disassembly(value)
                .unwrap();
            context
        });
    }
    fn set_skipInstr(&mut self, inst_start: Option<AddrType>, value: i128) {
        let Some (inst_start) = inst_start else { return } ;
        self.0.entry(inst_start).or_insert_with(|| {
            let mut context = C::default();
            context
                .register_mut()
                .write_skipInstr_disassembly(value)
                .unwrap();
            context
        });
    }
}
pub trait ContextregisterTrait:
    MemoryRead<AddressType = u16> + MemoryWrite
{
    fn read_blockEnd_raw(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        let work_value = self.read_u8::<false>(0, 0, 1)?;
        Ok(u8::try_from(work_value).unwrap())
    }
    fn write_blockEnd_raw(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_u8::<false>(u8::from(param), 0, 0, 1)
    }
    fn read_blockEnd_disassembly(
        &self,
    ) -> Result<i128, MemoryReadError<Self::AddressType>> {
        let raw_value = self.read_blockEnd_raw()?;
        Ok(i128::try_from(raw_value).unwrap())
    }
    fn write_blockEnd_disassembly(
        &mut self,
        param: i128,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_blockEnd_raw(param as u8)
    }
    fn read_blockEnd_execution(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        self.read_blockEnd_raw()
    }
    fn write_blockEnd_execution(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_blockEnd_raw(param)
    }
    fn blockEnd_display(
        &self,
    ) -> Result<DisplayElement, MemoryReadError<Self::AddressType>> {
        Ok(meaning_number(true, self.read_blockEnd_raw()?))
    }
    fn read_phase_raw(&self) -> Result<u8, MemoryReadError<Self::AddressType>> {
        let work_value = self.read_u8::<false>(0, 2, 2)?;
        Ok(u8::try_from(work_value).unwrap())
    }
    fn write_phase_raw(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_u8::<false>(u8::from(param), 0, 2, 2)
    }
    fn read_phase_disassembly(
        &self,
    ) -> Result<i128, MemoryReadError<Self::AddressType>> {
        let raw_value = self.read_phase_raw()?;
        Ok(i128::try_from(raw_value).unwrap())
    }
    fn write_phase_disassembly(
        &mut self,
        param: i128,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_phase_raw(param as u8)
    }
    fn read_phase_execution(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        self.read_phase_raw()
    }
    fn write_phase_execution(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_phase_raw(param)
    }
    fn phase_display(
        &self,
    ) -> Result<DisplayElement, MemoryReadError<Self::AddressType>> {
        Ok(meaning_number(true, self.read_phase_raw()?))
    }
    fn read_repeatInstr_raw(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        let work_value = self.read_u8::<false>(0, 4, 1)?;
        Ok(u8::try_from(work_value).unwrap())
    }
    fn write_repeatInstr_raw(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_u8::<false>(u8::from(param), 0, 4, 1)
    }
    fn read_repeatInstr_disassembly(
        &self,
    ) -> Result<i128, MemoryReadError<Self::AddressType>> {
        let raw_value = self.read_repeatInstr_raw()?;
        Ok(i128::try_from(raw_value).unwrap())
    }
    fn write_repeatInstr_disassembly(
        &mut self,
        param: i128,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_repeatInstr_raw(param as u8)
    }
    fn read_repeatInstr_execution(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        self.read_repeatInstr_raw()
    }
    fn write_repeatInstr_execution(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_repeatInstr_raw(param)
    }
    fn repeatInstr_display(
        &self,
    ) -> Result<DisplayElement, MemoryReadError<Self::AddressType>> {
        Ok(meaning_number(true, self.read_repeatInstr_raw()?))
    }
    fn read_skipInstr_raw(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        let work_value = self.read_u8::<false>(0, 5, 1)?;
        Ok(u8::try_from(work_value).unwrap())
    }
    fn write_skipInstr_raw(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_u8::<false>(u8::from(param), 0, 5, 1)
    }
    fn read_skipInstr_disassembly(
        &self,
    ) -> Result<i128, MemoryReadError<Self::AddressType>> {
        let raw_value = self.read_skipInstr_raw()?;
        Ok(i128::try_from(raw_value).unwrap())
    }
    fn write_skipInstr_disassembly(
        &mut self,
        param: i128,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_skipInstr_raw(param as u8)
    }
    fn read_skipInstr_execution(
        &self,
    ) -> Result<u8, MemoryReadError<Self::AddressType>> {
        self.read_skipInstr_raw()
    }
    fn write_skipInstr_execution(
        &mut self,
        param: u8,
    ) -> Result<(), MemoryWriteError<Self::AddressType>> {
        self.write_skipInstr_raw(param)
    }
    fn skipInstr_display(
        &self,
    ) -> Result<DisplayElement, MemoryReadError<Self::AddressType>> {
        Ok(meaning_number(true, self.read_skipInstr_raw()?))
    }
}
pub trait ContextTrait: Default {
    type Typeregister: ContextregisterTrait;
    fn register(&self) -> &Self::Typeregister;
    fn register_mut(&mut self) -> &mut Self::Typeregister;
}
#[derive(Debug, Clone, Copy)]
pub struct ContextregisterStructDebug {
    pub chunk_0x0: [Option<bool>; 32],
}
impl Default for ContextregisterStructDebug {
    fn default() -> Self {
        Self {
            chunk_0x0: [None; 32],
        }
    }
}
impl ContextregisterStructDebug {
    fn read_bits(
        &self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &mut [u8],
        mask: &[u8],
    ) -> Result<(), MemoryReadError<<Self as MemoryRead>::AddressType>> {
        assert_eq!(buf.len(), mask.len());
        let buf_len =
            <<Self as MemoryRead>::AddressType>::try_from(buf.len()).unwrap();
        let addr_end = addr + ((buf_len + 7) / 8);
        match (addr, addr_end) {
            (0..=3, 0..=4) => {
                let byte_offset = usize::try_from(addr - 0).unwrap();
                for ((buf_byte, mask_byte), byte) in
                    buf.iter_mut().zip(mask.iter()).zip(byte_offset..)
                {
                    for bit in (0..8)
                        .into_iter()
                        .filter(|bit| ((*mask_byte >> bit) & 1) != 0)
                    {
                        *buf_byte |= (self.chunk_0x0[(byte * 8) + bit].unwrap()
                            as u8)
                            << bit;
                    }
                }
            }
            (addr_start, addr_end) => {
                return Err(MemoryReadError::UnableToReadMemory(
                    addr_start, addr_end,
                ))
            }
        }
        Ok(())
    }
    fn write_bits(
        &mut self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &[u8],
        mask: &[u8],
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        assert_eq!(buf.len(), mask.len());
        let buf_len =
            <<Self as MemoryRead>::AddressType>::try_from(buf.len()).unwrap();
        let addr_end = addr + ((buf_len + 7) / 8);
        match (addr, addr_end) {
            (0..=3, 0..=4) => {
                let byte_offset = usize::try_from(addr - 0).unwrap();
                for ((buf_byte, mask_byte), byte) in
                    buf.iter().zip(mask.iter()).zip(byte_offset..)
                {
                    for bit in (0..8)
                        .into_iter()
                        .filter(|bit| ((*mask_byte >> bit) & 1) != 0)
                    {
                        self.chunk_0x0[(byte * 8) + bit] =
                            Some(*buf_byte & (1 << bit) != 0);
                    }
                }
            }
            (addr_start, addr_end) => {
                return Err(MemoryWriteError::UnableToWriteMemory(
                    addr_start, addr_end,
                ))
            }
        }
        Ok(())
    }
}
impl ContextregisterTrait for ContextregisterStructDebug {}
impl MemoryRead for ContextregisterStructDebug {
    type AddressType = u16;
    fn read(
        &self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &mut [u8],
    ) -> Result<(), MemoryReadError<<Self as MemoryRead>::AddressType>> {
        let mut inner_buf = vec![0xFF; buf.len()];
        self.read_bits(addr, buf, &mut inner_buf)
    }
    fn read_u8<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u8, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u8>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u8>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u8>::from_be_bytes(data)
        } else {
            <u8>::from_le_bytes(data)
        };
        let value_mask = <u8>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u16<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u16, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u16>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u16>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u16>::from_be_bytes(data)
        } else {
            <u16>::from_le_bytes(data)
        };
        let value_mask = <u16>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u32<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u32, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u32>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u32>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u32>::from_be_bytes(data)
        } else {
            <u32>::from_le_bytes(data)
        };
        let value_mask = <u32>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u64<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u64, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u64>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u64>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u64>::from_be_bytes(data)
        } else {
            <u64>::from_le_bytes(data)
        };
        let value_mask = <u64>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
    fn read_u128<const BIG_ENDIAN: bool>(
        &self,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<u128, MemoryReadError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u128>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let mut data = [0u8; TYPE_BYTES];
        let mask = (<u128>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        self.read_bits(
            data_addr,
            &mut data[data_start..data_end],
            &mask[data_start..data_end],
        )?;
        let data = if BIG_ENDIAN {
            <u128>::from_be_bytes(data)
        } else {
            <u128>::from_le_bytes(data)
        };
        let value_mask = <u128>::MAX >> (TYPE_BITS - data_bits);
        Ok((data >> data_lsb) & value_mask)
    }
}
impl MemoryWrite for ContextregisterStructDebug {
    fn write(
        &mut self,
        addr: <Self as MemoryRead>::AddressType,
        buf: &[u8],
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        let mut inner_buf = vec![0xFF; buf.len()];
        self.write_bits(addr, buf, &inner_buf)
    }
    fn write_u8<const BIG_ENDIAN: bool>(
        &mut self,
        value: u8,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u8>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u8>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u16<const BIG_ENDIAN: bool>(
        &mut self,
        value: u16,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u16>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u16>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u32<const BIG_ENDIAN: bool>(
        &mut self,
        value: u32,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u32>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u32>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u64<const BIG_ENDIAN: bool>(
        &mut self,
        value: u64,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u64>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u64>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
    fn write_u128<const BIG_ENDIAN: bool>(
        &mut self,
        value: u128,
        data_addr: <Self as MemoryRead>::AddressType,
        varnode_lsb: usize,
        data_bits: usize,
    ) -> Result<(), MemoryWriteError<<Self as MemoryRead>::AddressType>> {
        const TYPE_BITS: usize = <u128>::BITS as usize;
        const TYPE_BYTES: usize = TYPE_BITS / 8;
        assert!(data_bits > 0);
        let data_lsb = varnode_lsb % 8;
        let read_bytes = (data_bits + data_lsb + 7) / 8;
        assert!(read_bytes <= TYPE_BYTES);
        let mask = (<u128>::MAX >> (TYPE_BITS - data_bits)) << data_lsb;
        let mask_raw = if BIG_ENDIAN {
            mask.to_be_bytes()
        } else {
            mask.to_le_bytes()
        };
        let data_start = if BIG_ENDIAN {
            TYPE_BYTES - read_bytes
        } else {
            0
        };
        let data_end = data_start + read_bytes;
        let value = (value << data_lsb) & mask;
        let final_mem = if BIG_ENDIAN {
            value.to_be_bytes()
        } else {
            value.to_le_bytes()
        };
        self.write_bits(
            data_addr,
            &final_mem[data_start..data_end],
            &mask_raw[data_start..data_end],
        )
    }
}
#[derive(Debug, Clone, Copy, Default)]
pub struct SpacesStruct {
    pub register: ContextregisterStructDebug,
}
impl ContextTrait for SpacesStruct {
    type Typeregister = ContextregisterStructDebug;
    fn register(&self) -> &Self::Typeregister {
        &self.register
    }
    fn register_mut(&mut self) -> &mut Self::Typeregister {
        &mut self.register
    }
}
fn meaning_number<T>(hex: bool, num: T) -> DisplayElement
where
    i128: TryFrom<T>,
    <i128 as TryFrom<T>>::Error: core::fmt::Debug,
{
    DisplayElement::Number(hex, i128::try_from(num).unwrap())
}
fn meaning_0_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_0_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_0_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::W0,
        1 => Register::W1,
        2 => Register::W2,
        3 => Register::W3,
        4 => Register::W4,
        5 => Register::W5,
        6 => Register::W6,
        7 => Register::W7,
        8 => Register::W8,
        9 => Register::W9,
        10 => Register::W10,
        11 => Register::W11,
        12 => Register::W12,
        13 => Register::W13,
        14 => Register::W14,
        15 => Register::W15,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_1_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_1_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_1_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::W0byte,
        1 => Register::W1byte,
        2 => Register::W2byte,
        3 => Register::W3byte,
        4 => Register::W4byte,
        5 => Register::W5byte,
        6 => Register::W6byte,
        7 => Register::W7byte,
        8 => Register::W8byte,
        9 => Register::W9byte,
        10 => Register::W10byte,
        11 => Register::W11byte,
        12 => Register::W12byte,
        13 => Register::W13byte,
        14 => Register::W14byte,
        15 => Register::W15byte,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_2_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_2_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_2_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::W1W0,
        1 => Register::W3W2,
        2 => Register::W5W4,
        3 => Register::W7W6,
        4 => Register::W9W8,
        5 => Register::W11W10,
        6 => Register::W13W12,
        7 => Register::W15W14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_3_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_3_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_3_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::W0,
        1 => Register::W2,
        2 => Register::W4,
        3 => Register::W6,
        4 => Register::W8,
        5 => Register::W10,
        6 => Register::W12,
        7 => Register::W14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_4_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_4_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_4_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        0 => Register::W0,
        1 => Register::W1,
        2 => Register::W2,
        3 => Register::W3,
        4 => Register::W4,
        5 => Register::W5,
        6 => Register::W6,
        7 => Register::W7,
        8 => Register::W8,
        9 => Register::W9,
        10 => Register::W10,
        11 => Register::W11,
        12 => Register::W12,
        13 => Register::W13,
        14 => Register::W14,
        15 => Register::W0,
        _ => unreachable!("Invalid Attach Value"),
    }
}
fn meaning_5_display<T>(num: T) -> DisplayElement
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    let value = meaning_5_value(num.try_into().unwrap());
    DisplayElement::Register(value)
}
fn meaning_5_value<T>(num: T) -> Register
where
    u8: TryFrom<T>,
    <u8 as TryFrom<T>>::Error: core::fmt::Debug,
{
    match u8::try_from(num).unwrap() {
        1 => Register::W0,
        2 => Register::W1,
        3 => Register::W2,
        4 => Register::W3,
        5 => Register::W4,
        6 => Register::W5,
        7 => Register::W6,
        8 => Register::W7,
        9 => Register::W8,
        10 => Register::W9,
        11 => Register::W10,
        12 => Register::W11,
        13 => Register::W12,
        14 => Register::W13,
        15 => Register::W14,
        _ => unreachable!("Invalid Attach Value"),
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_padding(u8);
impl TokenField_padding {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_31_0(u32);
impl TokenField_OP_31_0 {
    fn execution(&self) -> u32 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_31_4(u32);
impl TokenField_OP_31_4 {
    fn execution(&self) -> u32 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_0(u32);
impl TokenField_OP_23_0 {
    fn execution(&self) -> u32 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_1(u32);
impl TokenField_OP_23_1 {
    fn execution(&self) -> u32 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_4(u32);
impl TokenField_OP_23_4 {
    fn execution(&self) -> u32 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_11(u16);
impl TokenField_OP_23_11 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_12(u16);
impl TokenField_OP_23_12 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_14(u16);
impl TokenField_OP_23_14 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_15(u16);
impl TokenField_OP_23_15 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_16(u8);
impl TokenField_OP_23_16 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_18(u8);
impl TokenField_OP_23_18 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_19(u8);
impl TokenField_OP_23_19 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_23_20(u8);
impl TokenField_OP_23_20 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_21_20(u8);
impl TokenField_OP_21_20 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_19_16(u8);
impl TokenField_OP_19_16 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_19_17(u8);
impl TokenField_OP_19_17 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_19_18(u8);
impl TokenField_OP_19_18 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_15_8(u8);
impl TokenField_OP_15_8 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_15_12(u8);
impl TokenField_OP_15_12 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_15_14(u8);
impl TokenField_OP_15_14 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_14_0(u16);
impl TokenField_OP_14_0 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_14_4(u16);
impl TokenField_OP_14_4 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_14_6(u16);
impl TokenField_OP_14_6 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_14_7(u8);
impl TokenField_OP_14_7 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_14_11(u8);
impl TokenField_OP_14_11 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_14_12(u8);
impl TokenField_OP_14_12 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_13_4(u16);
impl TokenField_OP_13_4 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_11_7(u8);
impl TokenField_OP_11_7 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_11_8(u8);
impl TokenField_OP_11_8 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_11_10(u8);
impl TokenField_OP_11_10 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_10_8(u8);
impl TokenField_OP_10_8 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_10_7(u8);
impl TokenField_OP_10_7 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_10_4(u8);
impl TokenField_OP_10_4 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_9_4(u8);
impl TokenField_OP_9_4 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_9_8(u8);
impl TokenField_OP_9_8 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_7_0(u8);
impl TokenField_OP_7_0 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_7_4(u8);
impl TokenField_OP_7_4 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_7_5(u8);
impl TokenField_OP_7_5 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_7_6(u8);
impl TokenField_OP_7_6 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_6_0(u8);
impl TokenField_OP_6_0 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_6_4(u8);
impl TokenField_OP_6_4 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_6_5(u8);
impl TokenField_OP_6_5 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_5_4(u8);
impl TokenField_OP_5_4 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_3_0(u8);
impl TokenField_OP_3_0 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_1_0(u8);
impl TokenField_OP_1_0 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_19(u8);
impl TokenField_OP_19 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_15(u8);
impl TokenField_OP_15 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_14(u8);
impl TokenField_OP_14 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_13(u8);
impl TokenField_OP_13 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_12(u8);
impl TokenField_OP_12 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_11(u8);
impl TokenField_OP_11 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_7(u8);
impl TokenField_OP_7 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_6(u8);
impl TokenField_OP_6 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_5(u8);
impl TokenField_OP_5 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_3(u8);
impl TokenField_OP_3 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_OP_0(u8);
impl TokenField_OP_0 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_n(u8);
impl TokenField_TOK_n {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_A(u8);
impl TokenField_TOK_A {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_B(u8);
impl TokenField_TOK_B {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_Bb(u8);
impl TokenField_TOK_Bb {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_CCCC(u8);
impl TokenField_TOK_CCCC {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_D(u8);
impl TokenField_TOK_D {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_W(u8);
impl TokenField_TOK_W {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_Z(u8);
impl TokenField_TOK_Z {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_Zb(u8);
impl TokenField_TOK_Zb {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_f12(u16);
impl TokenField_TOK_f12 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_f13(u16);
impl TokenField_TOK_f13 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_f15(u16);
impl TokenField_TOK_f15 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_f15b(u16);
impl TokenField_TOK_f15b {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k3(u8);
impl TokenField_TOK_k3 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k4(u8);
impl TokenField_TOK_k4 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k5(u8);
impl TokenField_TOK_k5 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k6(i8);
impl TokenField_TOK_k6 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k8a(u8);
impl TokenField_TOK_k8a {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k4b(u8);
impl TokenField_TOK_k4b {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k8b(u8);
impl TokenField_TOK_k8b {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k8c(u8);
impl TokenField_TOK_k8c {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k10(u16);
impl TokenField_TOK_k10 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k14(u16);
impl TokenField_TOK_k14 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k15(u16);
impl TokenField_TOK_k15 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k16(u16);
impl TokenField_TOK_k16 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_k16t(u16);
impl TokenField_TOK_k16t {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_r4(i8);
impl TokenField_TOK_r4 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_bit4word(u8);
impl TokenField_TOK_bit4word {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_b3(u8);
impl TokenField_TOK_b3 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_b1(u8);
impl TokenField_TOK_b1 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_b4(u8);
impl TokenField_TOK_b4 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_n6(i8);
impl TokenField_TOK_n6 {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_n7(u8);
impl TokenField_TOK_n7 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_n15(u16);
impl TokenField_TOK_n15 {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_n16(i16);
impl TokenField_TOK_n16 {
    fn execution(&self) -> i16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_0(u8);
impl TokenField_TOK_0 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_7(u8);
impl TokenField_TOK_7 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_13(u8);
impl TokenField_TOK_13 {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_3_0_Wreg(u8);
impl TokenField_TOK_3_0_Wreg {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_3_0_Breg(u8);
impl TokenField_TOK_3_0_Breg {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_3_1_Dreg(u8);
impl TokenField_TOK_3_1_Dreg {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_3_1_Dregn(u8);
impl TokenField_TOK_3_1_Dregn {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_4_0_U(u8);
impl TokenField_TOK_4_0_U {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_6_4_U(u8);
impl TokenField_TOK_6_4_U {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_9_0_U(u16);
impl TokenField_TOK_9_0_U {
    fn execution(&self) -> u16 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_10_7_Wreg(u8);
impl TokenField_TOK_10_7_Wreg {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_10_7_Breg(u8);
impl TokenField_TOK_10_7_Breg {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_10_7_Wregp(u8);
impl TokenField_TOK_10_7_Wregp {
    fn execution(&self) -> Register {
        meaning_4_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_4_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_10_8_Dreg(u8);
impl TokenField_TOK_10_8_Dreg {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_10_8_Dregn(u8);
impl TokenField_TOK_10_8_Dregn {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_11_8_Wreg(u8);
impl TokenField_TOK_11_8_Wreg {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_13_11_U(u8);
impl TokenField_TOK_13_11_U {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_14_12_Dreg(u8);
impl TokenField_TOK_14_12_Dreg {
    fn execution(&self) -> Register {
        meaning_2_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_2_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_14_12_Dregn(u8);
impl TokenField_TOK_14_12_Dregn {
    fn execution(&self) -> Register {
        meaning_3_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_3_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_14_11_Wreg(u8);
impl TokenField_TOK_14_11_Wreg {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_14_11_Wregn(u8);
impl TokenField_TOK_14_11_Wregn {
    fn execution(&self) -> Register {
        meaning_5_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_5_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_14_11_Breg(u8);
impl TokenField_TOK_14_11_Breg {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_18_15_Wreg(u8);
impl TokenField_TOK_18_15_Wreg {
    fn execution(&self) -> Register {
        meaning_0_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_0_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_18_15_Breg(u8);
impl TokenField_TOK_18_15_Breg {
    fn execution(&self) -> Register {
        meaning_1_value(self.0)
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_1_display(self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_18_15_S(i8);
impl TokenField_TOK_18_15_S {
    fn execution(&self) -> i8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_17_16_mm(u8);
impl TokenField_TOK_17_16_mm {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_18_16_mmm(u8);
impl TokenField_TOK_18_16_mmm {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_13_12_xx(u8);
impl TokenField_TOK_13_12_xx {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_13_12_kk(u8);
impl TokenField_TOK_13_12_kk {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_11_10_yy(u8);
impl TokenField_TOK_11_10_yy {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_11_10_PP(u8);
impl TokenField_TOK_11_10_PP {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_9_6_iiii(u8);
impl TokenField_TOK_9_6_iiii {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_5_2_jjjj(u8);
impl TokenField_TOK_5_2_jjjj {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
#[derive(Clone, Copy, Debug)]
struct TokenField_TOK_1_0_aa(u8);
impl TokenField_TOK_1_0_aa {
    fn execution(&self) -> u8 {
        self.0
    }
    fn disassembly(&self) -> i128 {
        i128::try_from(self.0).unwrap()
    }
    fn display(&self) -> DisplayElement {
        meaning_number(true, self.0)
    }
}
struct TokenParser<const LEN: usize>([u8; LEN]);
impl<const LEN: usize> MemoryRead for TokenParser<LEN> {
    type AddressType = usize;
    fn read(
        &self,
        addr: Self::AddressType,
        buf: &mut [u8],
    ) -> Result<(), MemoryReadError<Self::AddressType>> {
        let end = addr + buf.len();
        self.0
            .get(addr..end)
            .map(|src| buf.copy_from_slice(src))
            .ok_or(MemoryReadError::UnableToReadMemory(addr, end))
    }
}
impl<const LEN: usize> TokenParser<LEN> {
    fn new(data: &[u8]) -> Option<Self> {
        let token_slice: &[u8] = data.get(..LEN)?;
        let token_data = <[u8; LEN]>::try_from(token_slice).unwrap();
        Some(Self(token_data))
    }
    fn TokenFieldpadding(&self) -> TokenField_padding {
        let inner_value = self.read_u8::<false>(3, 0, 8).unwrap();
        TokenField_padding(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_31_0(&self) -> TokenField_OP_31_0 {
        let inner_value = self.read_u32::<false>(0, 0, 32).unwrap();
        TokenField_OP_31_0(u32::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_31_4(&self) -> TokenField_OP_31_4 {
        let inner_value = self.read_u32::<false>(0, 4, 28).unwrap();
        TokenField_OP_31_4(u32::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_0(&self) -> TokenField_OP_23_0 {
        let inner_value = self.read_u32::<false>(0, 0, 24).unwrap();
        TokenField_OP_23_0(u32::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_1(&self) -> TokenField_OP_23_1 {
        let inner_value = self.read_u32::<false>(0, 1, 23).unwrap();
        TokenField_OP_23_1(u32::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_4(&self) -> TokenField_OP_23_4 {
        let inner_value = self.read_u32::<false>(0, 4, 20).unwrap();
        TokenField_OP_23_4(u32::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_11(&self) -> TokenField_OP_23_11 {
        let inner_value = self.read_u16::<false>(1, 3, 13).unwrap();
        TokenField_OP_23_11(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_12(&self) -> TokenField_OP_23_12 {
        let inner_value = self.read_u16::<false>(1, 4, 12).unwrap();
        TokenField_OP_23_12(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_14(&self) -> TokenField_OP_23_14 {
        let inner_value = self.read_u16::<false>(1, 6, 10).unwrap();
        TokenField_OP_23_14(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_15(&self) -> TokenField_OP_23_15 {
        let inner_value = self.read_u16::<false>(1, 7, 9).unwrap();
        TokenField_OP_23_15(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_16(&self) -> TokenField_OP_23_16 {
        let inner_value = self.read_u8::<false>(2, 0, 8).unwrap();
        TokenField_OP_23_16(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_18(&self) -> TokenField_OP_23_18 {
        let inner_value = self.read_u8::<false>(2, 2, 6).unwrap();
        TokenField_OP_23_18(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_19(&self) -> TokenField_OP_23_19 {
        let inner_value = self.read_u8::<false>(2, 3, 5).unwrap();
        TokenField_OP_23_19(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_23_20(&self) -> TokenField_OP_23_20 {
        let inner_value = self.read_u8::<false>(2, 4, 4).unwrap();
        TokenField_OP_23_20(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_21_20(&self) -> TokenField_OP_21_20 {
        let inner_value = self.read_u8::<false>(2, 4, 2).unwrap();
        TokenField_OP_21_20(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_19_16(&self) -> TokenField_OP_19_16 {
        let inner_value = self.read_u8::<false>(2, 0, 4).unwrap();
        TokenField_OP_19_16(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_19_17(&self) -> TokenField_OP_19_17 {
        let inner_value = self.read_u8::<false>(2, 1, 3).unwrap();
        TokenField_OP_19_17(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_19_18(&self) -> TokenField_OP_19_18 {
        let inner_value = self.read_u8::<false>(2, 2, 2).unwrap();
        TokenField_OP_19_18(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_15_8(&self) -> TokenField_OP_15_8 {
        let inner_value = self.read_u8::<false>(1, 0, 8).unwrap();
        TokenField_OP_15_8(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_15_12(&self) -> TokenField_OP_15_12 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_OP_15_12(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_15_14(&self) -> TokenField_OP_15_14 {
        let inner_value = self.read_u8::<false>(1, 6, 2).unwrap();
        TokenField_OP_15_14(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_14_0(&self) -> TokenField_OP_14_0 {
        let inner_value = self.read_u16::<false>(0, 0, 15).unwrap();
        TokenField_OP_14_0(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_14_4(&self) -> TokenField_OP_14_4 {
        let inner_value = self.read_u16::<false>(0, 4, 11).unwrap();
        TokenField_OP_14_4(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_14_6(&self) -> TokenField_OP_14_6 {
        let inner_value = self.read_u16::<false>(0, 6, 9).unwrap();
        TokenField_OP_14_6(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_14_7(&self) -> TokenField_OP_14_7 {
        let inner_value = self.read_u16::<false>(0, 7, 8).unwrap();
        TokenField_OP_14_7(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_14_11(&self) -> TokenField_OP_14_11 {
        let inner_value = self.read_u8::<false>(1, 3, 4).unwrap();
        TokenField_OP_14_11(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_14_12(&self) -> TokenField_OP_14_12 {
        let inner_value = self.read_u8::<false>(1, 4, 3).unwrap();
        TokenField_OP_14_12(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_13_4(&self) -> TokenField_OP_13_4 {
        let inner_value = self.read_u16::<false>(0, 4, 10).unwrap();
        TokenField_OP_13_4(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_11_7(&self) -> TokenField_OP_11_7 {
        let inner_value = self.read_u16::<false>(0, 7, 5).unwrap();
        TokenField_OP_11_7(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_11_8(&self) -> TokenField_OP_11_8 {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_OP_11_8(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_11_10(&self) -> TokenField_OP_11_10 {
        let inner_value = self.read_u8::<false>(1, 2, 2).unwrap();
        TokenField_OP_11_10(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_10_8(&self) -> TokenField_OP_10_8 {
        let inner_value = self.read_u8::<false>(1, 0, 3).unwrap();
        TokenField_OP_10_8(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_10_7(&self) -> TokenField_OP_10_7 {
        let inner_value = self.read_u16::<false>(0, 7, 4).unwrap();
        TokenField_OP_10_7(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_10_4(&self) -> TokenField_OP_10_4 {
        let inner_value = self.read_u16::<false>(0, 4, 7).unwrap();
        TokenField_OP_10_4(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_9_4(&self) -> TokenField_OP_9_4 {
        let inner_value = self.read_u16::<false>(0, 4, 6).unwrap();
        TokenField_OP_9_4(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_9_8(&self) -> TokenField_OP_9_8 {
        let inner_value = self.read_u8::<false>(1, 0, 2).unwrap();
        TokenField_OP_9_8(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_7_0(&self) -> TokenField_OP_7_0 {
        let inner_value = self.read_u8::<false>(0, 0, 8).unwrap();
        TokenField_OP_7_0(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_7_4(&self) -> TokenField_OP_7_4 {
        let inner_value = self.read_u8::<false>(0, 4, 4).unwrap();
        TokenField_OP_7_4(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_7_5(&self) -> TokenField_OP_7_5 {
        let inner_value = self.read_u8::<false>(0, 5, 3).unwrap();
        TokenField_OP_7_5(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_7_6(&self) -> TokenField_OP_7_6 {
        let inner_value = self.read_u8::<false>(0, 6, 2).unwrap();
        TokenField_OP_7_6(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_6_0(&self) -> TokenField_OP_6_0 {
        let inner_value = self.read_u8::<false>(0, 0, 7).unwrap();
        TokenField_OP_6_0(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_6_4(&self) -> TokenField_OP_6_4 {
        let inner_value = self.read_u8::<false>(0, 4, 3).unwrap();
        TokenField_OP_6_4(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_6_5(&self) -> TokenField_OP_6_5 {
        let inner_value = self.read_u8::<false>(0, 5, 2).unwrap();
        TokenField_OP_6_5(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_5_4(&self) -> TokenField_OP_5_4 {
        let inner_value = self.read_u8::<false>(0, 4, 2).unwrap();
        TokenField_OP_5_4(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_3_0(&self) -> TokenField_OP_3_0 {
        let inner_value = self.read_u8::<false>(0, 0, 4).unwrap();
        TokenField_OP_3_0(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_1_0(&self) -> TokenField_OP_1_0 {
        let inner_value = self.read_u8::<false>(0, 0, 2).unwrap();
        TokenField_OP_1_0(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_19(&self) -> TokenField_OP_19 {
        let inner_value = self.read_u8::<false>(2, 3, 1).unwrap();
        TokenField_OP_19(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_15(&self) -> TokenField_OP_15 {
        let inner_value = self.read_u8::<false>(1, 7, 1).unwrap();
        TokenField_OP_15(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_14(&self) -> TokenField_OP_14 {
        let inner_value = self.read_u8::<false>(1, 6, 1).unwrap();
        TokenField_OP_14(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_13(&self) -> TokenField_OP_13 {
        let inner_value = self.read_u8::<false>(1, 5, 1).unwrap();
        TokenField_OP_13(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_12(&self) -> TokenField_OP_12 {
        let inner_value = self.read_u8::<false>(1, 4, 1).unwrap();
        TokenField_OP_12(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_11(&self) -> TokenField_OP_11 {
        let inner_value = self.read_u8::<false>(1, 3, 1).unwrap();
        TokenField_OP_11(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_7(&self) -> TokenField_OP_7 {
        let inner_value = self.read_u8::<false>(0, 7, 1).unwrap();
        TokenField_OP_7(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_6(&self) -> TokenField_OP_6 {
        let inner_value = self.read_u8::<false>(0, 6, 1).unwrap();
        TokenField_OP_6(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_5(&self) -> TokenField_OP_5 {
        let inner_value = self.read_u8::<false>(0, 5, 1).unwrap();
        TokenField_OP_5(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_3(&self) -> TokenField_OP_3 {
        let inner_value = self.read_u8::<false>(0, 3, 1).unwrap();
        TokenField_OP_3(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldOP_0(&self) -> TokenField_OP_0 {
        let inner_value = self.read_u8::<false>(0, 0, 1).unwrap();
        TokenField_OP_0(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_n(&self) -> TokenField_TOK_n {
        let inner_value = self.read_u8::<false>(2, 0, 1).unwrap();
        TokenField_TOK_n(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_A(&self) -> TokenField_TOK_A {
        let inner_value = self.read_u8::<false>(1, 7, 1).unwrap();
        TokenField_TOK_A(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_B(&self) -> TokenField_TOK_B {
        let inner_value = self.read_u8::<false>(1, 6, 1).unwrap();
        TokenField_TOK_B(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_Bb(&self) -> TokenField_TOK_Bb {
        let inner_value = self.read_u8::<false>(1, 2, 1).unwrap();
        TokenField_TOK_Bb(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_CCCC(&self) -> TokenField_TOK_CCCC {
        let inner_value = self.read_u8::<false>(2, 0, 4).unwrap();
        TokenField_TOK_CCCC(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_D(&self) -> TokenField_TOK_D {
        let inner_value = self.read_u8::<false>(1, 5, 1).unwrap();
        TokenField_TOK_D(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_W(&self) -> TokenField_TOK_W {
        let inner_value = self.read_u8::<false>(0, 6, 1).unwrap();
        TokenField_TOK_W(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_Z(&self) -> TokenField_TOK_Z {
        let inner_value = self.read_u8::<false>(1, 7, 1).unwrap();
        TokenField_TOK_Z(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_Zb(&self) -> TokenField_TOK_Zb {
        let inner_value = self.read_u8::<false>(1, 3, 1).unwrap();
        TokenField_TOK_Zb(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_f12(&self) -> TokenField_TOK_f12 {
        let inner_value = self.read_u16::<false>(0, 1, 12).unwrap();
        TokenField_TOK_f12(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_f13(&self) -> TokenField_TOK_f13 {
        let inner_value = self.read_u16::<false>(0, 0, 13).unwrap();
        TokenField_TOK_f13(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_f15(&self) -> TokenField_TOK_f15 {
        let inner_value = self.read_u16::<false>(0, 1, 15).unwrap();
        TokenField_TOK_f15(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_f15b(&self) -> TokenField_TOK_f15b {
        let inner_value = self.read_u32::<false>(0, 4, 15).unwrap();
        TokenField_TOK_f15b(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k3(&self) -> TokenField_TOK_k3 {
        let inner_value = self.read_u8::<false>(0, 0, 3).unwrap();
        TokenField_TOK_k3(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k4(&self) -> TokenField_TOK_k4 {
        let inner_value = self.read_u8::<false>(0, 0, 4).unwrap();
        TokenField_TOK_k4(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k5(&self) -> TokenField_TOK_k5 {
        let inner_value = self.read_u8::<false>(0, 0, 5).unwrap();
        TokenField_TOK_k5(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k6(&self) -> TokenField_TOK_k6 {
        let inner_value = self.read_i8::<false>(0, 0, 6).unwrap();
        TokenField_TOK_k6(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k8a(&self) -> TokenField_TOK_k8a {
        let inner_value = self.read_u8::<false>(0, 0, 5).unwrap();
        TokenField_TOK_k8a(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k4b(&self) -> TokenField_TOK_k4b {
        let inner_value = self.read_u8::<false>(0, 4, 4).unwrap();
        TokenField_TOK_k4b(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k8b(&self) -> TokenField_TOK_k8b {
        let inner_value = self.read_u16::<false>(0, 7, 3).unwrap();
        TokenField_TOK_k8b(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k8c(&self) -> TokenField_TOK_k8c {
        let inner_value = self.read_u16::<false>(0, 4, 8).unwrap();
        TokenField_TOK_k8c(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k10(&self) -> TokenField_TOK_k10 {
        let inner_value = self.read_u16::<false>(0, 4, 10).unwrap();
        TokenField_TOK_k10(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k14(&self) -> TokenField_TOK_k14 {
        let inner_value = self.read_u16::<false>(0, 0, 14).unwrap();
        TokenField_TOK_k14(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k15(&self) -> TokenField_TOK_k15 {
        let inner_value = self.read_u16::<false>(0, 0, 15).unwrap();
        TokenField_TOK_k15(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k16(&self) -> TokenField_TOK_k16 {
        let inner_value = self.read_u32::<false>(0, 4, 16).unwrap();
        TokenField_TOK_k16(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_k16t(&self) -> TokenField_TOK_k16t {
        let inner_value = self.read_u16::<false>(0, 0, 16).unwrap();
        TokenField_TOK_k16t(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_r4(&self) -> TokenField_TOK_r4 {
        let inner_value = self.read_i16::<false>(0, 7, 4).unwrap();
        TokenField_TOK_r4(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_bit4word(&self) -> TokenField_TOK_bit4word {
        let inner_value = self.read_u8::<false>(0, 0, 1).unwrap();
        TokenField_TOK_bit4word(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_b3(&self) -> TokenField_TOK_b3 {
        let inner_value = self.read_u8::<false>(1, 5, 3).unwrap();
        TokenField_TOK_b3(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_b1(&self) -> TokenField_TOK_b1 {
        let inner_value = self.read_u8::<false>(0, 0, 1).unwrap();
        TokenField_TOK_b1(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_b4(&self) -> TokenField_TOK_b4 {
        let inner_value = self.read_u8::<false>(1, 4, 4).unwrap();
        TokenField_TOK_b4(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_n6(&self) -> TokenField_TOK_n6 {
        let inner_value = self.read_i16::<false>(0, 4, 6).unwrap();
        TokenField_TOK_n6(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_n7(&self) -> TokenField_TOK_n7 {
        let inner_value = self.read_u8::<false>(0, 0, 7).unwrap();
        TokenField_TOK_n7(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_n15(&self) -> TokenField_TOK_n15 {
        let inner_value = self.read_u16::<false>(0, 1, 15).unwrap();
        TokenField_TOK_n15(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_n16(&self) -> TokenField_TOK_n16 {
        let inner_value = self.read_i16::<false>(0, 0, 16).unwrap();
        TokenField_TOK_n16(i16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_0(&self) -> TokenField_TOK_0 {
        let inner_value = self.read_u8::<false>(0, 0, 1).unwrap();
        TokenField_TOK_0(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_7(&self) -> TokenField_TOK_7 {
        let inner_value = self.read_u8::<false>(0, 7, 1).unwrap();
        TokenField_TOK_7(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_13(&self) -> TokenField_TOK_13 {
        let inner_value = self.read_u8::<false>(1, 5, 1).unwrap();
        TokenField_TOK_13(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_3_0_Wreg(&self) -> TokenField_TOK_3_0_Wreg {
        let inner_value = self.read_u8::<false>(0, 0, 4).unwrap();
        TokenField_TOK_3_0_Wreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_3_0_Breg(&self) -> TokenField_TOK_3_0_Breg {
        let inner_value = self.read_u8::<false>(0, 0, 4).unwrap();
        TokenField_TOK_3_0_Breg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_3_1_Dreg(&self) -> TokenField_TOK_3_1_Dreg {
        let inner_value = self.read_u8::<false>(0, 1, 3).unwrap();
        TokenField_TOK_3_1_Dreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_3_1_Dregn(&self) -> TokenField_TOK_3_1_Dregn {
        let inner_value = self.read_u8::<false>(0, 1, 3).unwrap();
        TokenField_TOK_3_1_Dregn(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_4_0_U(&self) -> TokenField_TOK_4_0_U {
        let inner_value = self.read_u8::<false>(0, 0, 5).unwrap();
        TokenField_TOK_4_0_U(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_6_4_U(&self) -> TokenField_TOK_6_4_U {
        let inner_value = self.read_u8::<false>(0, 4, 3).unwrap();
        TokenField_TOK_6_4_U(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_9_0_U(&self) -> TokenField_TOK_9_0_U {
        let inner_value = self.read_u16::<false>(0, 0, 10).unwrap();
        TokenField_TOK_9_0_U(u16::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_10_7_Wreg(&self) -> TokenField_TOK_10_7_Wreg {
        let inner_value = self.read_u16::<false>(0, 7, 4).unwrap();
        TokenField_TOK_10_7_Wreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_10_7_Breg(&self) -> TokenField_TOK_10_7_Breg {
        let inner_value = self.read_u16::<false>(0, 7, 4).unwrap();
        TokenField_TOK_10_7_Breg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_10_7_Wregp(&self) -> TokenField_TOK_10_7_Wregp {
        let inner_value = self.read_u16::<false>(0, 7, 4).unwrap();
        TokenField_TOK_10_7_Wregp(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_10_8_Dreg(&self) -> TokenField_TOK_10_8_Dreg {
        let inner_value = self.read_u8::<false>(1, 0, 3).unwrap();
        TokenField_TOK_10_8_Dreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_10_8_Dregn(&self) -> TokenField_TOK_10_8_Dregn {
        let inner_value = self.read_u8::<false>(1, 0, 3).unwrap();
        TokenField_TOK_10_8_Dregn(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_11_8_Wreg(&self) -> TokenField_TOK_11_8_Wreg {
        let inner_value = self.read_u8::<false>(1, 0, 4).unwrap();
        TokenField_TOK_11_8_Wreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_13_11_U(&self) -> TokenField_TOK_13_11_U {
        let inner_value = self.read_u8::<false>(1, 3, 3).unwrap();
        TokenField_TOK_13_11_U(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_14_12_Dreg(&self) -> TokenField_TOK_14_12_Dreg {
        let inner_value = self.read_u8::<false>(1, 4, 3).unwrap();
        TokenField_TOK_14_12_Dreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_14_12_Dregn(&self) -> TokenField_TOK_14_12_Dregn {
        let inner_value = self.read_u8::<false>(1, 4, 3).unwrap();
        TokenField_TOK_14_12_Dregn(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_14_11_Wreg(&self) -> TokenField_TOK_14_11_Wreg {
        let inner_value = self.read_u8::<false>(1, 3, 4).unwrap();
        TokenField_TOK_14_11_Wreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_14_11_Wregn(&self) -> TokenField_TOK_14_11_Wregn {
        let inner_value = self.read_u8::<false>(1, 3, 4).unwrap();
        TokenField_TOK_14_11_Wregn(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_14_11_Breg(&self) -> TokenField_TOK_14_11_Breg {
        let inner_value = self.read_u8::<false>(1, 3, 4).unwrap();
        TokenField_TOK_14_11_Breg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_18_15_Wreg(&self) -> TokenField_TOK_18_15_Wreg {
        let inner_value = self.read_u16::<false>(1, 7, 4).unwrap();
        TokenField_TOK_18_15_Wreg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_18_15_Breg(&self) -> TokenField_TOK_18_15_Breg {
        let inner_value = self.read_u16::<false>(1, 7, 4).unwrap();
        TokenField_TOK_18_15_Breg(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_18_15_S(&self) -> TokenField_TOK_18_15_S {
        let inner_value = self.read_i16::<false>(1, 7, 4).unwrap();
        TokenField_TOK_18_15_S(i8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_17_16_mm(&self) -> TokenField_TOK_17_16_mm {
        let inner_value = self.read_u8::<false>(2, 0, 2).unwrap();
        TokenField_TOK_17_16_mm(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_18_16_mmm(&self) -> TokenField_TOK_18_16_mmm {
        let inner_value = self.read_u8::<false>(2, 0, 3).unwrap();
        TokenField_TOK_18_16_mmm(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_13_12_xx(&self) -> TokenField_TOK_13_12_xx {
        let inner_value = self.read_u8::<false>(1, 4, 2).unwrap();
        TokenField_TOK_13_12_xx(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_13_12_kk(&self) -> TokenField_TOK_13_12_kk {
        let inner_value = self.read_u8::<false>(1, 4, 2).unwrap();
        TokenField_TOK_13_12_kk(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_11_10_yy(&self) -> TokenField_TOK_11_10_yy {
        let inner_value = self.read_u8::<false>(1, 2, 2).unwrap();
        TokenField_TOK_11_10_yy(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_11_10_PP(&self) -> TokenField_TOK_11_10_PP {
        let inner_value = self.read_u8::<false>(1, 2, 2).unwrap();
        TokenField_TOK_11_10_PP(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_9_6_iiii(&self) -> TokenField_TOK_9_6_iiii {
        let inner_value = self.read_u16::<false>(0, 6, 4).unwrap();
        TokenField_TOK_9_6_iiii(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_5_2_jjjj(&self) -> TokenField_TOK_5_2_jjjj {
        let inner_value = self.read_u8::<false>(0, 2, 4).unwrap();
        TokenField_TOK_5_2_jjjj(u8::try_from(inner_value).unwrap())
    }
    fn TokenFieldTOK_1_0_aa(&self) -> TokenField_TOK_1_0_aa {
        let inner_value = self.read_u8::<false>(0, 0, 2).unwrap();
        TokenField_TOK_1_0_aa(u8::try_from(inner_value).unwrap())
    }
}
#[derive(Clone, Copy, Debug)]
pub enum Register {
    W0,
    W1,
    W2,
    W3,
    W4,
    W5,
    W6,
    W7,
    W8,
    W9,
    W10,
    W11,
    W12,
    W13,
    W14,
    W15,
    W1W0,
    W3W2,
    W5W4,
    W7W6,
    W9W8,
    W11W10,
    W13W12,
    W15W14,
    W0byte,
    W1byte,
    W2byte,
    W3byte,
    W4byte,
    W5byte,
    W6byte,
    W7byte,
    W8byte,
    W9byte,
    W10byte,
    W11byte,
    W12byte,
    W13byte,
    W14byte,
    W15byte,
    SHADOW_W0,
    SHADOW_W1,
    SHADOW_W2,
    SHADOW_W3,
    SPLIM,
    ACCAL,
    ACCAH,
    ACCAU,
    ACCBL,
    ACCBH,
    ACCBU,
    ACCA,
    ACCB,
    PC,
    TBLPAG,
    PSVPAG,
    RCOUNT,
    DCOUNT,
    DOSTART,
    DOEND,
    CORCON,
    MODCON,
    XMODSRT,
    XMODEND,
    YMODSRT,
    YMODEND,
    XBREV,
    DISICNT,
    SRL,
    SRH,
    SRH_OA,
    SRH_OB,
    SRH_SA,
    SRH_SB,
    SRH_OAB,
    SRH_SAB,
    SRH_DA,
    SRH_DC,
    SRL_IPL2,
    SRL_IPL1,
    SRL_IPL0,
    SRL_RA,
    SRL_N,
    SRL_OV,
    SRL_Z,
    SRL_C,
    DISI,
    SHADOW_SRH_DC,
    SHADOW_SRL_N,
    SHADOW_SRL_OV,
    SHADOW_SRL_Z,
    SHADOW_SRL_C,
    DOSTART_SHADOW,
    DOEND_SHADOW,
    WDTcount,
    WDTprescalarA,
    WDTprescalarB,
    CORCON_VAR,
    CORCON_IPL3,
    CORCON_PSV,
    CORCON_SFA,
    DCOUNT_SHADOW,
    SkipNextFlag,
    contextreg,
}
impl core::fmt::Display for Register {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::W0 => write!(f, "W0"),
            Self::W1 => write!(f, "W1"),
            Self::W2 => write!(f, "W2"),
            Self::W3 => write!(f, "W3"),
            Self::W4 => write!(f, "W4"),
            Self::W5 => write!(f, "W5"),
            Self::W6 => write!(f, "W6"),
            Self::W7 => write!(f, "W7"),
            Self::W8 => write!(f, "W8"),
            Self::W9 => write!(f, "W9"),
            Self::W10 => write!(f, "W10"),
            Self::W11 => write!(f, "W11"),
            Self::W12 => write!(f, "W12"),
            Self::W13 => write!(f, "W13"),
            Self::W14 => write!(f, "W14"),
            Self::W15 => write!(f, "W15"),
            Self::W1W0 => write!(f, "W1W0"),
            Self::W3W2 => write!(f, "W3W2"),
            Self::W5W4 => write!(f, "W5W4"),
            Self::W7W6 => write!(f, "W7W6"),
            Self::W9W8 => write!(f, "W9W8"),
            Self::W11W10 => write!(f, "W11W10"),
            Self::W13W12 => write!(f, "W13W12"),
            Self::W15W14 => write!(f, "W15W14"),
            Self::W0byte => write!(f, "W0byte"),
            Self::W1byte => write!(f, "W1byte"),
            Self::W2byte => write!(f, "W2byte"),
            Self::W3byte => write!(f, "W3byte"),
            Self::W4byte => write!(f, "W4byte"),
            Self::W5byte => write!(f, "W5byte"),
            Self::W6byte => write!(f, "W6byte"),
            Self::W7byte => write!(f, "W7byte"),
            Self::W8byte => write!(f, "W8byte"),
            Self::W9byte => write!(f, "W9byte"),
            Self::W10byte => write!(f, "W10byte"),
            Self::W11byte => write!(f, "W11byte"),
            Self::W12byte => write!(f, "W12byte"),
            Self::W13byte => write!(f, "W13byte"),
            Self::W14byte => write!(f, "W14byte"),
            Self::W15byte => write!(f, "W15byte"),
            Self::SHADOW_W0 => write!(f, "SHADOW_W0"),
            Self::SHADOW_W1 => write!(f, "SHADOW_W1"),
            Self::SHADOW_W2 => write!(f, "SHADOW_W2"),
            Self::SHADOW_W3 => write!(f, "SHADOW_W3"),
            Self::SPLIM => write!(f, "SPLIM"),
            Self::ACCAL => write!(f, "ACCAL"),
            Self::ACCAH => write!(f, "ACCAH"),
            Self::ACCAU => write!(f, "ACCAU"),
            Self::ACCBL => write!(f, "ACCBL"),
            Self::ACCBH => write!(f, "ACCBH"),
            Self::ACCBU => write!(f, "ACCBU"),
            Self::ACCA => write!(f, "ACCA"),
            Self::ACCB => write!(f, "ACCB"),
            Self::PC => write!(f, "PC"),
            Self::TBLPAG => write!(f, "TBLPAG"),
            Self::PSVPAG => write!(f, "PSVPAG"),
            Self::RCOUNT => write!(f, "RCOUNT"),
            Self::DCOUNT => write!(f, "DCOUNT"),
            Self::DOSTART => write!(f, "DOSTART"),
            Self::DOEND => write!(f, "DOEND"),
            Self::CORCON => write!(f, "CORCON"),
            Self::MODCON => write!(f, "MODCON"),
            Self::XMODSRT => write!(f, "XMODSRT"),
            Self::XMODEND => write!(f, "XMODEND"),
            Self::YMODSRT => write!(f, "YMODSRT"),
            Self::YMODEND => write!(f, "YMODEND"),
            Self::XBREV => write!(f, "XBREV"),
            Self::DISICNT => write!(f, "DISICNT"),
            Self::SRL => write!(f, "SRL"),
            Self::SRH => write!(f, "SRH"),
            Self::SRH_OA => write!(f, "SRH_OA"),
            Self::SRH_OB => write!(f, "SRH_OB"),
            Self::SRH_SA => write!(f, "SRH_SA"),
            Self::SRH_SB => write!(f, "SRH_SB"),
            Self::SRH_OAB => write!(f, "SRH_OAB"),
            Self::SRH_SAB => write!(f, "SRH_SAB"),
            Self::SRH_DA => write!(f, "SRH_DA"),
            Self::SRH_DC => write!(f, "SRH_DC"),
            Self::SRL_IPL2 => write!(f, "SRL_IPL2"),
            Self::SRL_IPL1 => write!(f, "SRL_IPL1"),
            Self::SRL_IPL0 => write!(f, "SRL_IPL0"),
            Self::SRL_RA => write!(f, "SRL_RA"),
            Self::SRL_N => write!(f, "SRL_N"),
            Self::SRL_OV => write!(f, "SRL_OV"),
            Self::SRL_Z => write!(f, "SRL_Z"),
            Self::SRL_C => write!(f, "SRL_C"),
            Self::DISI => write!(f, "DISI"),
            Self::SHADOW_SRH_DC => write!(f, "SHADOW_SRH_DC"),
            Self::SHADOW_SRL_N => write!(f, "SHADOW_SRL_N"),
            Self::SHADOW_SRL_OV => write!(f, "SHADOW_SRL_OV"),
            Self::SHADOW_SRL_Z => write!(f, "SHADOW_SRL_Z"),
            Self::SHADOW_SRL_C => write!(f, "SHADOW_SRL_C"),
            Self::DOSTART_SHADOW => write!(f, "DOSTART_SHADOW"),
            Self::DOEND_SHADOW => write!(f, "DOEND_SHADOW"),
            Self::WDTcount => write!(f, "WDTcount"),
            Self::WDTprescalarA => write!(f, "WDTprescalarA"),
            Self::WDTprescalarB => write!(f, "WDTprescalarB"),
            Self::CORCON_VAR => write!(f, "CORCON_VAR"),
            Self::CORCON_IPL3 => write!(f, "CORCON_IPL3"),
            Self::CORCON_PSV => write!(f, "CORCON_PSV"),
            Self::CORCON_SFA => write!(f, "CORCON_SFA"),
            Self::DCOUNT_SHADOW => write!(f, "DCOUNT_SHADOW"),
            Self::SkipNextFlag => write!(f, "SkipNextFlag"),
            Self::contextreg => write!(f, "contextreg"),
        }
    }
}
#[derive(Clone, Copy, Debug)]
pub enum DisplayElement {
    Literal(&'static str),
    Register(Register),
    Number(bool, i128),
}
impl core::fmt::Display for DisplayElement {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Literal(lit) => lit.fmt(f),
            Self::Register(reg) => reg.fmt(f),
            Self::Number(hex, value) => match (*hex, value.is_negative()) {
                (true, true) => write!(f, "-0x{:x}", value.abs()),
                (true, false) => write!(f, "0x{:x}", value),
                (false, _) => value.fmt(f),
            },
        }
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3495:1, end:3495:2))"]
#[derive(Clone, Debug)]
struct repeat_instructionVar0 {
    TOK_10_8_Dregn: TokenField_TOK_10_8_Dregn,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl repeat_instructionVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("repeat"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("0x11"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("div.sd"),
            DisplayElement::Literal(" "),
            self.TOK_10_8_Dregn.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_31_0().disassembly() != 589841i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_8_Dreg = token_parser.TokenFieldTOK_10_8_Dreg();
        let TOK_10_8_Dregn = token_parser.TokenFieldTOK_10_8_Dregn();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_8_Dregn,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3582:1, end:3582:2))"]
#[derive(Clone, Debug)]
struct repeat_instructionVar1 {
    TOK_10_8_Dregn: TokenField_TOK_10_8_Dregn,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl repeat_instructionVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("repeat"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("0x11"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("div.ud"),
            DisplayElement::Literal(" "),
            self.TOK_10_8_Dregn.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_31_0().disassembly() != 589841i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_8_Dreg = token_parser.TokenFieldTOK_10_8_Dreg();
        let TOK_10_8_Dregn = token_parser.TokenFieldTOK_10_8_Dregn();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_8_Dregn,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3450:1, end:3450:2))"]
#[derive(Clone, Debug)]
struct repeat_instructionVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl repeat_instructionVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("repeat"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("0x11"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("div.sw"),
            DisplayElement::Literal(" "),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_31_0().disassembly() != 589841i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_7_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3538:1, end:3538:2))"]
#[derive(Clone, Debug)]
struct repeat_instructionVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl repeat_instructionVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 9usize] = [
            DisplayElement::Literal("repeat"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("0x11"),
            DisplayElement::Literal(" "),
            DisplayElement::Literal("div.uw"),
            DisplayElement::Literal(" "),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_31_0().disassembly() != 589841i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_7_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2781:1, end:2781:2))"]
#[derive(Clone, Debug)]
struct clrwdt_instructionVar4 {}
impl clrwdt_instructionVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("clrwdt")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6762:1, end:6762:2))"]
#[derive(Clone, Debug)]
struct pop_s_instructionVar5 {}
impl pop_s_instructionVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("pop.s")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6798:1, end:6798:2))"]
#[derive(Clone, Debug)]
struct push_s_instructionVar6 {}
impl push_s_instructionVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("push.s")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6898:1, end:6898:2))"]
#[derive(Clone, Debug)]
struct reset_instructionVar7 {}
impl reset_instructionVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("reset")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_0().disassembly() != 16646144i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6922:1, end:6922:2))"]
#[derive(Clone, Debug)]
struct retfie_instructionVar8 {}
impl retfie_instructionVar8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("retfie")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6997:1, end:6997:2))"]
#[derive(Clone, Debug)]
struct return_instructionVar9 {}
impl return_instructionVar9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("return")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7916:1, end:7916:2))"]
#[derive(Clone, Debug)]
struct ulnk_instructionVar10 {}
impl ulnk_instructionVar10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("ulnk")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7939:1, end:7939:2))"]
#[derive(Clone, Debug)]
struct urun_instructionVar11 {}
impl urun_instructionVar11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("urun")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_0().disassembly() != 14336000i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:8025:1, end:8025:2))"]
#[derive(Clone, Debug)]
struct break_instructionVar12 {}
impl break_instructionVar12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("break")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_0().disassembly() != 14303232i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6791:1, end:6791:2))"]
#[derive(Clone, Debug)]
struct push_d_instructionVar13 {
    TOK_3_1_Dregn: TokenField_TOK_3_1_Dregn,
}
impl push_d_instructionVar13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("push.d"),
            DisplayElement::Literal(" "),
            self.TOK_3_1_Dregn.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_1_Dreg = token_parser.TokenFieldTOK_3_1_Dreg();
        let TOK_3_1_Dregn = token_parser.TokenFieldTOK_3_1_Dregn();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_1_Dregn }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6815:1, end:6815:2))"]
#[derive(Clone, Debug)]
struct pwrsav_instructionVar14 {
    OP_0: TokenField_OP_0,
}
impl pwrsav_instructionVar14 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("pwrsav"),
            DisplayElement::Literal(" "),
            self.OP_0.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_1().disassembly() != 8331264i128 {
            return None;
        }
        let OP_0 = token_parser.TokenFieldOP_0();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { OP_0 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2026:1, end:2026:2))"]
#[derive(Clone, Debug)]
struct bra_instructionVar15 {
    Wns_t: TableWns_t,
    WordInstNext: TableWordInstNext,
}
impl bra_instructionVar15 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("bra"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.Wns_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let Wns_t = if let Some((len, table)) =
            TableWns_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let WordInstNext = if let Some((len, table)) = TableWordInstNext::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wns_t,
                WordInstNext,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2301:1, end:2301:2))"]
#[derive(Clone, Debug)]
struct call_instructionVar16 {
    WnDest_t: TableWnDest_t,
    WordInstNext4: TableWordInstNext4,
}
impl call_instructionVar16 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("call"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WnDest_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let WnDest_t = if let Some((len, table)) = TableWnDest_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let WordInstNext4 = if let Some((len, table)) =
            TableWordInstNext4::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WnDest_t,
                WordInstNext4,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6755:1, end:6755:2))"]
#[derive(Clone, Debug)]
struct pop_d_instructionVar17 {
    Wndd_t: TableWndd_t,
}
impl pop_d_instructionVar17 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("pop.d"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 15i128 {
            return None;
        }
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wndd_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2357:1, end:2357:2))"]
#[derive(Clone, Debug)]
struct clr_w_instructionVar18 {
    Wd_t: TableWd_t,
}
impl clr_w_instructionVar18 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("clr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2363:1, end:2363:2))"]
#[derive(Clone, Debug)]
struct clr_b_instructionVar19 {
    Wdbyte_t: TableWdbyte_t,
}
impl clr_b_instructionVar19 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("clr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3310:1, end:3310:2))"]
#[derive(Clone, Debug)]
struct daw_b_instructionVar20 {
    Wnsbyte_t: TableWnsbyte_t,
}
impl daw_b_instructionVar20 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("daw.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wnsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let Wnsbyte_t = if let Some((len, table)) = TableWnsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4002:1, end:4002:2))"]
#[derive(Clone, Debug)]
struct goto_instructionVar21 {
    WnDest_t: TableWnDest_t,
}
impl goto_instructionVar21 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("goto"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WnDest_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let WnDest_t = if let Some((len, table)) = TableWnDest_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WnDest_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6842:1, end:6842:2))"]
#[derive(Clone, Debug)]
struct rcall_instructionVar22 {
    WnRDest_t: TableWnRDest_t,
    WordInstNext4: TableWordInstNext4,
}
impl rcall_instructionVar22 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rcall"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WnRDest_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let WnRDest_t = if let Some((len, table)) = TableWnRDest_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let WordInstNext4 = if let Some((len, table)) =
            TableWordInstNext4::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WnRDest_t,
                WordInstNext4,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6881:1, end:6881:2))"]
#[derive(Clone, Debug)]
struct repeat_instructionVar23 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl repeat_instructionVar23 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_repeatInstr(
            Some(inst_next),
            context.register().read_repeatInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("repeat"),
            DisplayElement::Literal(" "),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_4().disassembly() != 38912i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_repeatInstr_disassembly(tmp)
            .unwrap();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7790:1, end:7790:2))"]
#[derive(Clone, Debug)]
struct swap_w_instructionVar24 {
    Wn_t: TableWn_t,
}
impl swap_w_instructionVar24 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swap.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7796:1, end:7796:2))"]
#[derive(Clone, Debug)]
struct swap_b_instructionVar25 {
    Wnbyte_t: TableWnbyte_t,
}
impl swap_b_instructionVar25 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("swap.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2958:1, end:2958:2))"]
#[derive(Clone, Debug)]
struct cp0_w_instructionVar26 {
    Wsb_t: TableWsb_t,
}
impl cp0_w_instructionVar26 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp0.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2970:1, end:2970:2))"]
#[derive(Clone, Debug)]
struct cp0_b_instructionVar27 {
    Wsbbyte_t: TableWsbbyte_t,
}
impl cp0_b_instructionVar27 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp0.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbbyte_t = if let Some((len, table)) = TableWsbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wsbbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3898:1, end:3898:2))"]
#[derive(Clone, Debug)]
struct exch_instructionVar28 {
    Wnd_t: TableWnd_t,
    Wns_t: TableWns_t,
}
impl exch_instructionVar28 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("exch"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wns_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 0i128 {
            return None;
        }
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wns_t = if let Some((len, table)) =
            TableWns_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnd_t, Wns_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5178:1, end:5178:2))"]
#[derive(Clone, Debug)]
struct mov_d_instructionVar29 {
    Wndd_t: TableWndd_t,
    Wsd_t: TableWsd_t,
}
impl mov_d_instructionVar29 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.d"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsd_t = if let Some((len, table)) =
            TableWsd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wndd_t, Wsd_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3908:1, end:3908:2))"]
#[derive(Clone, Debug)]
struct fbcl_instructionVar30 {
    Wnd_t: TableWnd_t,
    Ws_t: TableWs_t,
}
impl fbcl_instructionVar30 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("fbcl"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3931:1, end:3931:2))"]
#[derive(Clone, Debug)]
struct ff1l_instructionVar31 {
    Wnd_t: TableWnd_t,
    Ws_t: TableWs_t,
}
impl ff1l_instructionVar31 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ff1l"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3956:1, end:3956:2))"]
#[derive(Clone, Debug)]
struct ff1r_instructionVar32 {
    Wnd_t: TableWnd_t,
    Ws_t: TableWs_t,
}
impl ff1r_instructionVar32 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ff1r"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7253:1, end:7253:2))"]
#[derive(Clone, Debug)]
struct setm_w_instructionVar33 {
    Wd_t: TableWd_t,
}
impl setm_w_instructionVar33 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("setm.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 235i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_0().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7259:1, end:7259:2))"]
#[derive(Clone, Debug)]
struct setm_b_instructionVar34 {
    Wdbyte_t: TableWdbyte_t,
}
impl setm_b_instructionVar34 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("setm.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 235i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_0().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5185:1, end:5185:2))"]
#[derive(Clone, Debug)]
struct mov_d_instructionVar35 {
    TOK_3_1_Dregn: TokenField_TOK_3_1_Dregn,
    Wdd_t: TableWdd_t,
}
impl mov_d_instructionVar35 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov.d"),
            DisplayElement::Literal(" "),
            self.TOK_3_1_Dregn.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Wdd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_14().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdd_t = if let Some((len, table)) =
            TableWdd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let TOK_3_1_Dreg = token_parser.TokenFieldTOK_3_1_Dreg();
        let TOK_3_1_Dregn = token_parser.TokenFieldTOK_3_1_Dregn();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wdd_t,
                TOK_3_1_Dregn,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4276:1, end:4276:2))"]
#[derive(Clone, Debug)]
struct lnk_instructionVar36 {
    k14_t: Tablek14_t,
}
impl lnk_instructionVar36 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("lnk"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.k14_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_14().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
            return None;
        }
        let k14_t = if let Some((len, table)) =
            Tablek14_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k14_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7233:1, end:7233:2))"]
#[derive(Clone, Debug)]
struct se_instructionVar37 {
    Wnd_t: TableWnd_t,
    Ws_t: TableWs_t,
}
impl se_instructionVar37 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("se"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_11().disassembly() != 8032i128 {
            return None;
        }
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:8009:1, end:8009:2))"]
#[derive(Clone, Debug)]
struct ze_instructionVar38 {
    Wnd_t: TableWnd_t,
    Ws_t: TableWs_t,
}
impl ze_instructionVar38 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("ze"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wnd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5128:1, end:5128:2))"]
#[derive(Clone, Debug)]
struct mov_b_instructionVar39 {
    TOK_k8c: TokenField_TOK_k8c,
    Wndbyte_t: TableWndbyte_t,
}
impl mov_b_instructionVar39 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 4usize] = [
            DisplayElement::Literal("mov.b"),
            DisplayElement::Literal(" "),
            self.TOK_k8c.display(),
            DisplayElement::Literal(","),
        ];
        display.extend_from_slice(&extend);
        self.Wndbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_12().disassembly() != 12i128 {
            return None;
        }
        let Wndbyte_t = if let Some((len, table)) = TableWndbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let TOK_k8c = token_parser.TokenFieldTOK_k8c();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wndbyte_t, TOK_k8c }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6507:1, end:6507:2))"]
#[derive(Clone, Debug)]
struct mul_w_instructionVar40 {
    f13_t: Tablef13_t,
}
impl mul_w_instructionVar40 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 188i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14().disassembly() != 0i128 {
            return None;
        }
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6511:1, end:6511:2))"]
#[derive(Clone, Debug)]
struct mul_b_instructionVar41 {
    f13byte_t: Tablef13byte_t,
}
impl mul_b_instructionVar41 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 188i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14().disassembly() != 1i128 {
            return None;
        }
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13byte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1892:1, end:1892:2))"]
#[derive(Clone, Debug)]
struct asr_w_instructionVar42 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl asr_w_instructionVar42 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("asr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1906:1, end:1906:2))"]
#[derive(Clone, Debug)]
struct asr_b_instructionVar43 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl asr_b_instructionVar43 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("asr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3156:1, end:3156:2))"]
#[derive(Clone, Debug)]
struct cpseq_w_instructionVar44 {
    Wbb_t: TableWbb_t,
    Wnb_t: TableWnb_t,
}
impl cpseq_w_instructionVar44 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpseq.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbb_t = if let Some((len, table)) =
            TableWbb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnb_t = if let Some((len, table)) =
            TableWnb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbb_t, Wnb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3164:1, end:3164:2))"]
#[derive(Clone, Debug)]
struct cpseq_b_instructionVar45 {
    Wbbbyte_t: TableWbbbyte_t,
    Wnbbyte_t: TableWnbbyte_t,
}
impl cpseq_b_instructionVar45 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpseq.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbbbyte_t = if let Some((len, table)) = TableWbbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbbyte_t = if let Some((len, table)) = TableWnbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbbyte_t,
                Wnbbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3192:1, end:3192:2))"]
#[derive(Clone, Debug)]
struct cpsgt_w_instructionVar46 {
    Wbb_t: TableWbb_t,
    Wnb_t: TableWnb_t,
}
impl cpsgt_w_instructionVar46 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpsgt.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbb_t = if let Some((len, table)) =
            TableWbb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnb_t = if let Some((len, table)) =
            TableWnb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbb_t, Wnb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3200:1, end:3200:2))"]
#[derive(Clone, Debug)]
struct cpsgt_b_instructionVar47 {
    Wbbbyte_t: TableWbbbyte_t,
    Wnbbyte_t: TableWnbbyte_t,
}
impl cpsgt_b_instructionVar47 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpsgt.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbbbyte_t = if let Some((len, table)) = TableWbbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbbyte_t = if let Some((len, table)) = TableWnbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbbyte_t,
                Wnbbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3228:1, end:3228:2))"]
#[derive(Clone, Debug)]
struct cpslt_w_instructionVar48 {
    Wbb_t: TableWbb_t,
    Wnb_t: TableWnb_t,
}
impl cpslt_w_instructionVar48 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpslt.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbb_t = if let Some((len, table)) =
            TableWbb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnb_t = if let Some((len, table)) =
            TableWnb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbb_t, Wnb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3236:1, end:3236:2))"]
#[derive(Clone, Debug)]
struct cpslt_b_instructionVar49 {
    Wbbbyte_t: TableWbbbyte_t,
    Wnbbyte_t: TableWnbbyte_t,
}
impl cpslt_b_instructionVar49 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpslt.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbbbyte_t = if let Some((len, table)) = TableWbbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbbyte_t = if let Some((len, table)) = TableWnbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbbyte_t,
                Wnbbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3264:1, end:3264:2))"]
#[derive(Clone, Debug)]
struct cpsne_w_instructionVar50 {
    Wbb_t: TableWbb_t,
    Wnb_t: TableWnb_t,
}
impl cpsne_w_instructionVar50 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpsne.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbb_t = if let Some((len, table)) =
            TableWbb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnb_t = if let Some((len, table)) =
            TableWnb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbb_t, Wnb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3272:1, end:3272:2))"]
#[derive(Clone, Debug)]
struct cpsne_b_instructionVar51 {
    Wbbbyte_t: TableWbbbyte_t,
    Wnbbyte_t: TableWnbbyte_t,
}
impl cpsne_b_instructionVar51 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpsne.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_4().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Wbbbyte_t = if let Some((len, table)) = TableWbbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbbyte_t = if let Some((len, table)) = TableWnbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbbyte_t,
                Wnbbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3517:1, end:3517:2))"]
#[derive(Clone, Debug)]
struct div_sd_instructionVar52 {
    TOK_10_8_Dregn: TokenField_TOK_10_8_Dregn,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl div_sd_instructionVar52 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("div.sd"),
            DisplayElement::Literal(" "),
            self.TOK_10_8_Dregn.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_8_Dreg = token_parser.TokenFieldTOK_10_8_Dreg();
        let TOK_10_8_Dregn = token_parser.TokenFieldTOK_10_8_Dregn();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_8_Dregn,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3604:1, end:3604:2))"]
#[derive(Clone, Debug)]
struct div_ud_instructionVar53 {
    TOK_10_8_Dregn: TokenField_TOK_10_8_Dregn,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl div_ud_instructionVar53 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("div.ud"),
            DisplayElement::Literal(" "),
            self.TOK_10_8_Dregn.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_8_Dreg = token_parser.TokenFieldTOK_10_8_Dreg();
        let TOK_10_8_Dregn = token_parser.TokenFieldTOK_10_8_Dregn();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_8_Dregn,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1920:1, end:1920:2))"]
#[derive(Clone, Debug)]
struct asr_w_instructionVar54 {
    Wbd_t: TableWbd_t,
    Wnd_t: TableWnd_t,
    k4_t: Tablek4_t,
}
impl asr_w_instructionVar54 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("asr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 4i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k4_t = if let Some((len, table)) =
            Tablek4_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Wnd_t, k4_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1929:1, end:1929:2))"]
#[derive(Clone, Debug)]
struct asr_w_instructionVar55 {
    Wbd_t: TableWbd_t,
    Wnd_t: TableWnd_t,
    Wns_t: TableWns_t,
}
impl asr_w_instructionVar55 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("asr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wns_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wns_t = if let Some((len, table)) =
            TableWns_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbd_t,
                Wnd_t,
                Wns_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2120:1, end:2120:2))"]
#[derive(Clone, Debug)]
struct bsw_c_instructionVar56 {
    Wbd_t: TableWbd_t,
    Ws_t: TableWs_t,
}
impl bsw_c_instructionVar56 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bsw.c"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Z().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2128:1, end:2128:2))"]
#[derive(Clone, Debug)]
struct bsw_z_instructionVar57 {
    Wbd_t: TableWbd_t,
    Ws_t: TableWs_t,
}
impl bsw_z_instructionVar57 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bsw.z"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Z().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2223:1, end:2223:2))"]
#[derive(Clone, Debug)]
struct btst_c_instructionVar58 {
    Wbd_t: TableWbd_t,
    Ws_t: TableWs_t,
}
impl btst_c_instructionVar58 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btst.c"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Z().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2230:1, end:2230:2))"]
#[derive(Clone, Debug)]
struct btst_z_instructionVar59 {
    Wbd_t: TableWbd_t,
    Ws_t: TableWs_t,
}
impl btst_z_instructionVar59 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btst.z"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Z().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2806:1, end:2806:2))"]
#[derive(Clone, Debug)]
struct com_w_instructionVar60 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl com_w_instructionVar60 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("com.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2817:1, end:2817:2))"]
#[derive(Clone, Debug)]
struct com_b_instructionVar61 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl com_b_instructionVar61 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("com.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2828:1, end:2828:2))"]
#[derive(Clone, Debug)]
struct cp_w_instructionVar62 {
    f13_t: Tablef13_t,
}
impl cp_w_instructionVar62 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2841:1, end:2841:2))"]
#[derive(Clone, Debug)]
struct cp_b_instructionVar63 {
    f13byte_t: Tablef13byte_t,
}
impl cp_b_instructionVar63 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13byte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2855:1, end:2855:2))"]
#[derive(Clone, Debug)]
struct cp_w_instructionVar64 {
    Wbb_t: TableWbb_t,
    k5_B10_t: Tablek5_B10_t,
}
impl cp_w_instructionVar64 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_B10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_5().disassembly() != 3i128 {
            return None;
        }
        let Wbb_t = if let Some((len, table)) =
            TableWbb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_B10_t = if let Some((len, table)) = Tablek5_B10_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbb_t, k5_B10_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2867:1, end:2867:2))"]
#[derive(Clone, Debug)]
struct cp_b_instructionVar65 {
    Wbbbyte_t: TableWbbbyte_t,
    k5byte_B10_t: Tablek5byte_B10_t,
}
impl cp_b_instructionVar65 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_B10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbbyte_t = if let Some((len, table)) = TableWbbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_B10_t = if let Some((len, table)) = Tablek5byte_B10_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbbyte_t,
                k5byte_B10_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2907:1, end:2907:2))"]
#[derive(Clone, Debug)]
struct cp_w_instructionVar66 {
    Wbb_t: TableWbb_t,
    Wsb_t: TableWsb_t,
}
impl cp_w_instructionVar66 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbb_t = if let Some((len, table)) =
            TableWbb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbb_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2920:1, end:2920:2))"]
#[derive(Clone, Debug)]
struct cp_b_instructionVar67 {
    Wbbbyte_t: TableWbbbyte_t,
    Wsbbyte_t: TableWsbbyte_t,
}
impl cp_b_instructionVar67 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbbbyte_t = if let Some((len, table)) = TableWbbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbbyte_t = if let Some((len, table)) = TableWsbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbbyte_t,
                Wsbbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2934:1, end:2934:2))"]
#[derive(Clone, Debug)]
struct cp0_w_instructionVar68 {
    f13_t: Tablef13_t,
}
impl cp0_w_instructionVar68 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp0.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2946:1, end:2946:2))"]
#[derive(Clone, Debug)]
struct cp0_b_instructionVar69 {
    f13byte_t: Tablef13byte_t,
}
impl cp0_b_instructionVar69 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cp0.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13byte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2982:1, end:2982:2))"]
#[derive(Clone, Debug)]
struct cpb_w_instructionVar70 {
    f13_t: Tablef13_t,
}
impl cpb_w_instructionVar70 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpb.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2996:1, end:2996:2))"]
#[derive(Clone, Debug)]
struct cpb_b_instructionVar71 {
    f13byte_t: Tablef13byte_t,
}
impl cpb_b_instructionVar71 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpb.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 0i128 {
            return None;
        }
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13byte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3011:1, end:3011:2))"]
#[derive(Clone, Debug)]
struct cpb_w_instructionVar72 {
    Wb_t: TableWb_t,
    k5_t: Tablek5_t,
}
impl cpb_w_instructionVar72 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpb.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3024:1, end:3024:2))"]
#[derive(Clone, Debug)]
struct cpb_b_instructionVar73 {
    Wbbyte_t: TableWbbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl cpb_b_instructionVar73 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpb.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbbyte_t, k5byte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3067:1, end:3067:2))"]
#[derive(Clone, Debug)]
struct cpb_w_instructionVar74 {
    Wbb_t: TableWbb_t,
    Wsb_t: TableWsb_t,
}
impl cpb_w_instructionVar74 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpb.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbb_t = if let Some((len, table)) =
            TableWbb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbb_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3081:1, end:3081:2))"]
#[derive(Clone, Debug)]
struct cpb_b_instructionVar75 {
    Wbbbyte_t: TableWbbbyte_t,
    Wsbbyte_t: TableWsbbyte_t,
}
impl cpb_b_instructionVar75 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("cpb.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbbbyte_t = if let Some((len, table)) = TableWbbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbbyte_t = if let Some((len, table)) = TableWsbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbbyte_t,
                Wsbbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3351:1, end:3351:2))"]
#[derive(Clone, Debug)]
struct dec_w_instructionVar76 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl dec_w_instructionVar76 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3367:1, end:3367:2))"]
#[derive(Clone, Debug)]
struct dec_b_instructionVar77 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl dec_b_instructionVar77 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3411:1, end:3411:2))"]
#[derive(Clone, Debug)]
struct dec2_w_instructionVar78 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl dec2_w_instructionVar78 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec2.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3427:1, end:3427:2))"]
#[derive(Clone, Debug)]
struct dec2_b_instructionVar79 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl dec2_b_instructionVar79 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec2.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3443:1, end:3443:2))"]
#[derive(Clone, Debug)]
struct disi_instructionVar80 {
    k14_t: Tablek14_t,
}
impl disi_instructionVar80 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("disi"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k14_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15_14().disassembly() != 0i128 {
            return None;
        }
        let k14_t = if let Some((len, table)) =
            Tablek14_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k14_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3476:1, end:3476:2))"]
#[derive(Clone, Debug)]
struct div_sw_instructionVar81 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl div_sw_instructionVar81 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("div.sw"),
            DisplayElement::Literal(" "),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_7_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3562:1, end:3562:2))"]
#[derive(Clone, Debug)]
struct div_uw_instructionVar82 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl div_uw_instructionVar82 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("div.uw"),
            DisplayElement::Literal(" "),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal(","),
            self.TOK_3_0_Wreg.display(),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_W().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_5_4().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_10_7_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4053:1, end:4053:2))"]
#[derive(Clone, Debug)]
struct inc_w_instructionVar83 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl inc_w_instructionVar83 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4068:1, end:4068:2))"]
#[derive(Clone, Debug)]
struct inc_b_instructionVar84 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl inc_b_instructionVar84 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4112:1, end:4112:2))"]
#[derive(Clone, Debug)]
struct inc2_w_instructionVar85 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl inc2_w_instructionVar85 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc2.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 232i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4127:1, end:4127:2))"]
#[derive(Clone, Debug)]
struct inc2_b_instructionVar86 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl inc2_b_instructionVar86 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc2.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 232i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4324:1, end:4324:2))"]
#[derive(Clone, Debug)]
struct lsr_w_instructionVar87 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl lsr_w_instructionVar87 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lsr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4337:1, end:4337:2))"]
#[derive(Clone, Debug)]
struct lsr_b_instructionVar88 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl lsr_b_instructionVar88 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lsr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4351:1, end:4351:2))"]
#[derive(Clone, Debug)]
struct lsr_w_instructionVar89 {
    Wbd_t: TableWbd_t,
    Wnd_t: TableWnd_t,
    k4_t: Tablek4_t,
}
impl lsr_w_instructionVar89 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lsr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 4i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k4_t = if let Some((len, table)) =
            Tablek4_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Wnd_t, k4_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4360:1, end:4360:2))"]
#[derive(Clone, Debug)]
struct lsr_w_instructionVar90 {
    Wbd_t: TableWbd_t,
    Wnd_t: TableWnd_t,
    Wns_t: TableWns_t,
}
impl lsr_w_instructionVar90 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lsr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wns_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wns_t = if let Some((len, table)) =
            TableWns_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbd_t,
                Wnd_t,
                Wns_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5104:1, end:5104:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar91 {
    WREG_W0_t: TableWREG_W0_t,
    f13_t: Tablef13_t,
}
impl mov_w_instructionVar91 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WREG_W0_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 1i128 {
            return None;
        }
        let WREG_W0_t = if let Some((len, table)) = TableWREG_W0_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_W0_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5110:1, end:5110:2))"]
#[derive(Clone, Debug)]
struct mov_b_instructionVar92 {
    WREG_W0byte_t: TableWREG_W0byte_t,
    f13byte_t: Tablef13byte_t,
}
impl mov_b_instructionVar92 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WREG_W0byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_13().disassembly() != 1i128 {
            return None;
        }
        let WREG_W0byte_t = if let Some((len, table)) =
            TableWREG_W0byte_t::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREG_W0byte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6538:1, end:6538:2))"]
#[derive(Clone, Debug)]
struct mul_su_instructionVar93 {
    Wbd_t: TableWbd_t,
    Wndd_t: TableWndd_t,
    k5: Tablek5,
}
impl mul_su_instructionVar93 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.su"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5 = if let Some((len, table)) =
            Tablek5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Wndd_t, k5 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6581:1, end:6581:2))"]
#[derive(Clone, Debug)]
struct mul_uu_instructionVar94 {
    Wbd_t: TableWbd_t,
    Wndd_t: TableWndd_t,
    k5: Tablek5,
}
impl mul_uu_instructionVar94 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.uu"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5 = if let Some((len, table)) =
            Tablek5::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Wndd_t, k5 }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6517:1, end:6517:2))"]
#[derive(Clone, Debug)]
struct mul_ss_instructionVar95 {
    Wbd_t: TableWbd_t,
    Wndd_t: TableWndd_t,
    WsMUL_t: TableWsMUL_t,
}
impl mul_ss_instructionVar95 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.ss"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WsMUL_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsMUL_t = if let Some((len, table)) = TableWsMUL_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbd_t,
                Wndd_t,
                WsMUL_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6543:1, end:6543:2))"]
#[derive(Clone, Debug)]
struct mul_su_instructionVar96 {
    Wbd_t: TableWbd_t,
    Wndd_t: TableWndd_t,
    WsMUL_t: TableWsMUL_t,
}
impl mul_su_instructionVar96 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.su"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WsMUL_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsMUL_t = if let Some((len, table)) = TableWsMUL_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbd_t,
                Wndd_t,
                WsMUL_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6565:1, end:6565:2))"]
#[derive(Clone, Debug)]
struct mul_us_instructionVar97 {
    Wbd_t: TableWbd_t,
    Wndd_t: TableWndd_t,
    WsMUL_t: TableWsMUL_t,
}
impl mul_us_instructionVar97 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.us"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WsMUL_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsMUL_t = if let Some((len, table)) = TableWsMUL_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbd_t,
                Wndd_t,
                WsMUL_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6587:1, end:6587:2))"]
#[derive(Clone, Debug)]
struct mul_uu_instructionVar98 {
    Wbd_t: TableWbd_t,
    Wndd_t: TableWndd_t,
    WsMUL_t: TableWsMUL_t,
}
impl mul_uu_instructionVar98 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mul.uu"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WsMUL_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndd_t = if let Some((len, table)) = TableWndd_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsMUL_t = if let Some((len, table)) = TableWsMUL_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbd_t,
                Wndd_t,
                WsMUL_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6659:1, end:6659:2))"]
#[derive(Clone, Debug)]
struct neg_w_instructionVar99 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl neg_w_instructionVar99 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("neg.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 238i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6670:1, end:6670:2))"]
#[derive(Clone, Debug)]
struct neg_b_instructionVar100 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl neg_b_instructionVar100 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("neg.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 238i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6682:1, end:6682:2))"]
#[derive(Clone, Debug)]
struct neg_w_instructionVar101 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl neg_w_instructionVar101 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("neg.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 234i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6695:1, end:6695:2))"]
#[derive(Clone, Debug)]
struct neg_b_instructionVar102 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl neg_b_instructionVar102 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("neg.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 234i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6863:1, end:6863:2))"]
#[derive(Clone, Debug)]
struct repeat_instructionVar103 {
    k14_t: Tablek14_t,
}
impl repeat_instructionVar103 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_repeatInstr(
            Some(inst_next),
            context.register().read_repeatInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("repeat"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k14_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_14().disassembly() != 36i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_repeatInstr_disassembly(tmp)
            .unwrap();
        let k14_t = if let Some((len, table)) =
            Tablek14_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k14_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7035:1, end:7035:2))"]
#[derive(Clone, Debug)]
struct rlc_w_instructionVar104 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl rlc_w_instructionVar104 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 210i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7048:1, end:7048:2))"]
#[derive(Clone, Debug)]
struct rlc_b_instructionVar105 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl rlc_b_instructionVar105 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 210i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7077:1, end:7077:2))"]
#[derive(Clone, Debug)]
struct rlnc_w_instructionVar106 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl rlnc_w_instructionVar106 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlnc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 210i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7088:1, end:7088:2))"]
#[derive(Clone, Debug)]
struct rlnc_b_instructionVar107 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl rlnc_b_instructionVar107 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlnc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 210i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7120:1, end:7120:2))"]
#[derive(Clone, Debug)]
struct rrc_w_instructionVar108 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl rrc_w_instructionVar108 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 211i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7133:1, end:7133:2))"]
#[derive(Clone, Debug)]
struct rrc_b_instructionVar109 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl rrc_b_instructionVar109 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 211i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7146:1, end:7146:2))"]
#[derive(Clone, Debug)]
struct rrnc_w_instructionVar110 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl rrnc_w_instructionVar110 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrnc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 215i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7155:1, end:7155:2))"]
#[derive(Clone, Debug)]
struct rrnc_b_instructionVar111 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl rrnc_b_instructionVar111 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrnc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 215i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7164:1, end:7164:2))"]
#[derive(Clone, Debug)]
struct rrnc_w_instructionVar112 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl rrnc_w_instructionVar112 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrnc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 211i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7176:1, end:7176:2))"]
#[derive(Clone, Debug)]
struct rrnc_b_instructionVar113 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl rrnc_b_instructionVar113 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrnc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 211i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7327:1, end:7327:2))"]
#[derive(Clone, Debug)]
struct sl_w_instructionVar114 {
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl sl_w_instructionVar114 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sl.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7339:1, end:7339:2))"]
#[derive(Clone, Debug)]
struct sl_b_instructionVar115 {
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl sl_b_instructionVar115 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sl.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7352:1, end:7352:2))"]
#[derive(Clone, Debug)]
struct sl_instructionVar116 {
    Wbd_t: TableWbd_t,
    Wnd_t: TableWnd_t,
    k4_t: Tablek4_t,
}
impl sl_instructionVar116 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("sl"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 4i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k4_t = if let Some((len, table)) =
            Tablek4_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wbd_t, Wnd_t, k4_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7360:1, end:7360:2))"]
#[derive(Clone, Debug)]
struct sl_instructionVar117 {
    Wbd_t: TableWbd_t,
    Wnd_t: TableWnd_t,
    Wns_t: TableWns_t,
}
impl sl_instructionVar117 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("sl"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.Wbd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wns_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 0i128 {
            return None;
        }
        let Wbd_t = if let Some((len, table)) =
            TableWbd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnd_t = if let Some((len, table)) =
            TableWnd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wns_t = if let Some((len, table)) =
            TableWns_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbd_t,
                Wnd_t,
                Wns_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7803:1, end:7803:2))"]
#[derive(Clone, Debug)]
struct tblrdh_w_instructionVar118 {
    Wd_t: TableWd_t,
    WsROM_t: TableWsROM_t,
}
impl tblrdh_w_instructionVar118 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblrdh.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WsROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsROM_t = if let Some((len, table)) = TableWsROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, WsROM_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7811:1, end:7811:2))"]
#[derive(Clone, Debug)]
struct tblrdh_b_instructionVar119 {
    Wdbyte_t: TableWdbyte_t,
    WsROM_t: TableWsROM_t,
}
impl tblrdh_b_instructionVar119 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblrdh.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WsROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsROM_t = if let Some((len, table)) = TableWsROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, WsROM_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7826:1, end:7826:2))"]
#[derive(Clone, Debug)]
struct tblrdl_w_instructionVar120 {
    Wd_t: TableWd_t,
    WsROM_t: TableWsROM_t,
}
impl tblrdl_w_instructionVar120 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblrdl.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WsROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsROM_t = if let Some((len, table)) = TableWsROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wd_t, WsROM_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7833:1, end:7833:2))"]
#[derive(Clone, Debug)]
struct tblrdl_b_instructionVar121 {
    Wdbyte_t: TableWdbyte_t,
    WsROM_t: TableWsROM_t,
}
impl tblrdl_b_instructionVar121 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblrdl.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WsROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WsROM_t = if let Some((len, table)) = TableWsROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wdbyte_t, WsROM_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7846:1, end:7846:2))"]
#[derive(Clone, Debug)]
struct tblwth_w_instructionVar122 {
    WdROM_t: TableWdROM_t,
    Ws_t: TableWs_t,
}
impl tblwth_w_instructionVar122 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblwth.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WdROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WdROM_t = if let Some((len, table)) = TableWdROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WdROM_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7854:1, end:7854:2))"]
#[derive(Clone, Debug)]
struct tblwth_b_instructionVar123 {
    WdROM_t: TableWdROM_t,
    Wsbyte_t: TableWsbyte_t,
}
impl tblwth_b_instructionVar123 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblwth.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WdROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WdROM_t = if let Some((len, table)) = TableWdROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WdROM_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7868:1, end:7868:2))"]
#[derive(Clone, Debug)]
struct tblwtl_w_instructionVar124 {
    WdROM_t: TableWdROM_t,
    Ws_t: TableWs_t,
}
impl tblwtl_w_instructionVar124 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblwtl.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WdROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WdROM_t = if let Some((len, table)) = TableWdROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WdROM_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7875:1, end:7875:2))"]
#[derive(Clone, Debug)]
struct tblwtl_b_instructionVar125 {
    WdROM_t: TableWdROM_t,
    Wsbyte_t: TableWsbyte_t,
}
impl tblwtl_b_instructionVar125 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("tblwtl.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WdROM_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let WdROM_t = if let Some((len, table)) = TableWdROM_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WdROM_t, Wsbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1525:1, end:1525:2))"]
#[derive(Clone, Debug)]
struct add_w_instructionVar126 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl add_w_instructionVar126 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1539:1, end:1539:2))"]
#[derive(Clone, Debug)]
struct add_b_instructionVar127 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl add_b_instructionVar127 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1553:1, end:1553:2))"]
#[derive(Clone, Debug)]
struct add_w_instructionVar128 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl add_w_instructionVar128 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1567:1, end:1567:2))"]
#[derive(Clone, Debug)]
struct add_b_instructionVar129 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl add_b_instructionVar129 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6746:1, end:6746:2))"]
#[derive(Clone, Debug)]
struct pop_instructionVar130 {
    movWd: TablemovWd,
}
impl pop_instructionVar130 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("pop"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.movWd.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_4().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_3_0().disassembly() != 15i128 {
            return None;
        }
        let movWd = if let Some((len, table)) =
            TablemovWd::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { movWd }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1581:1, end:1581:2))"]
#[derive(Clone, Debug)]
struct add_w_instructionVar131 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl add_w_instructionVar131 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1595:1, end:1595:2))"]
#[derive(Clone, Debug)]
struct add_b_instructionVar132 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl add_b_instructionVar132 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6784:1, end:6784:2))"]
#[derive(Clone, Debug)]
struct push_instructionVar133 {
    movWs: TablemovWs,
}
impl push_instructionVar133 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("push"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.movWs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_14_12().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_8().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 1i128 {
            return None;
        }
        let movWs = if let Some((len, table)) =
            TablemovWs::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { movWs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1610:1, end:1610:2))"]
#[derive(Clone, Debug)]
struct add_w_instructionVar134 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl add_w_instructionVar134 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1624:1, end:1624:2))"]
#[derive(Clone, Debug)]
struct add_b_instructionVar135 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl add_b_instructionVar135 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("add.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1673:1, end:1673:2))"]
#[derive(Clone, Debug)]
struct addc_w_instructionVar136 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl addc_w_instructionVar136 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1687:1, end:1687:2))"]
#[derive(Clone, Debug)]
struct addc_b_instructionVar137 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl addc_b_instructionVar137 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1702:1, end:1702:2))"]
#[derive(Clone, Debug)]
struct addc_w_instructionVar138 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl addc_w_instructionVar138 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1715:1, end:1715:2))"]
#[derive(Clone, Debug)]
struct addc_b_instructionVar139 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl addc_b_instructionVar139 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1728:1, end:1728:2))"]
#[derive(Clone, Debug)]
struct addc_w_instructionVar140 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl addc_w_instructionVar140 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1743:1, end:1743:2))"]
#[derive(Clone, Debug)]
struct addc_b_instructionVar141 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl addc_b_instructionVar141 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1759:1, end:1759:2))"]
#[derive(Clone, Debug)]
struct addc_w_instructionVar142 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl addc_w_instructionVar142 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1775:1, end:1775:2))"]
#[derive(Clone, Debug)]
struct addc_b_instructionVar143 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl addc_b_instructionVar143 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("addc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1791:1, end:1791:2))"]
#[derive(Clone, Debug)]
struct and_w_instructionVar144 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl and_w_instructionVar144 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1800:1, end:1800:2))"]
#[derive(Clone, Debug)]
struct and_b_instructionVar145 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl and_b_instructionVar145 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1809:1, end:1809:2))"]
#[derive(Clone, Debug)]
struct and_w_instructionVar146 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl and_w_instructionVar146 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1818:1, end:1818:2))"]
#[derive(Clone, Debug)]
struct and_b_instructionVar147 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl and_b_instructionVar147 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1827:1, end:1827:2))"]
#[derive(Clone, Debug)]
struct and_w_instructionVar148 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl and_w_instructionVar148 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1837:1, end:1837:2))"]
#[derive(Clone, Debug)]
struct and_b_instructionVar149 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl and_b_instructionVar149 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1848:1, end:1848:2))"]
#[derive(Clone, Debug)]
struct and_w_instructionVar150 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl and_w_instructionVar150 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1859:1, end:1859:2))"]
#[derive(Clone, Debug)]
struct and_b_instructionVar151 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl and_b_instructionVar151 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("and.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1870:1, end:1870:2))"]
#[derive(Clone, Debug)]
struct asr_w_instructionVar152 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl asr_w_instructionVar152 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("asr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1881:1, end:1881:2))"]
#[derive(Clone, Debug)]
struct asr_b_instructionVar153 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl asr_b_instructionVar153 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("asr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1949:1, end:1949:2))"]
#[derive(Clone, Debug)]
struct bclr_w_instructionVar154 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl bclr_w_instructionVar154 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bclr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1957:1, end:1957:2))"]
#[derive(Clone, Debug)]
struct bclr_b_instructionVar155 {
    Bbit4_t: TableBbit4_t,
    Wsbbyte_t: TableWsbbyte_t,
}
impl bclr_b_instructionVar155 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bclr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbbyte_t = if let Some((len, table)) = TableWsbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsbbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2104:1, end:2104:2))"]
#[derive(Clone, Debug)]
struct bset_w_instructionVar156 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl bset_w_instructionVar156 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bset.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2112:1, end:2112:2))"]
#[derive(Clone, Debug)]
struct bset_b_instructionVar157 {
    Bbit4_t: TableBbit4_t,
    Wsbbyte_t: TableWsbbyte_t,
}
impl bset_b_instructionVar157 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bset.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbbyte_t = if let Some((len, table)) = TableWsbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsbbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2144:1, end:2144:2))"]
#[derive(Clone, Debug)]
struct btg_w_instructionVar158 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl btg_w_instructionVar158 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btg.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2152:1, end:2152:2))"]
#[derive(Clone, Debug)]
struct btg_b_instructionVar159 {
    Bbit4_t: TableBbit4_t,
    Wsbbyte_t: TableWsbbyte_t,
}
impl btg_b_instructionVar159 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btg.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_9_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbbyte_t = if let Some((len, table)) = TableWsbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsbbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2168:1, end:2168:2))"]
#[derive(Clone, Debug)]
struct btsc_w_instructionVar160 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl btsc_w_instructionVar160 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btsc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 167i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_7().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2184:1, end:2184:2))"]
#[derive(Clone, Debug)]
struct btss_w_instructionVar161 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl btss_w_instructionVar161 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btss.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 166i128 {
            return None;
        }
        if token_parser.TokenFieldOP_11_7().disassembly() != 0i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2200:1, end:2200:2))"]
#[derive(Clone, Debug)]
struct btst_c_instructionVar162 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl btst_c_instructionVar162 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btst.c"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 163i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_7().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Zb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2212:1, end:2212:2))"]
#[derive(Clone, Debug)]
struct btst_z_instructionVar163 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl btst_z_instructionVar163 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btst.z"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Zb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2250:1, end:2250:2))"]
#[derive(Clone, Debug)]
struct btsts_c_instructionVar164 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl btsts_c_instructionVar164 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btsts.c"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Zb().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2263:1, end:2263:2))"]
#[derive(Clone, Debug)]
struct btsts_z_instructionVar165 {
    Bbit4_t: TableBbit4_t,
    Wsb_t: TableWsb_t,
}
impl btsts_z_instructionVar165 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btsts.z"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wsb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Bbit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_Zb().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_10_8().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let Bbit4_t = if let Some((len, table)) = TableBbit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsb_t = if let Some((len, table)) =
            TableWsb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Bbit4_t, Wsb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2277:1, end:2277:2))"]
#[derive(Clone, Debug)]
struct call_instructionVar166 {
    WordInstNext4: TableWordInstNext4,
    dest24_t: Tabledest24_t,
}
impl call_instructionVar166 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("call"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.dest24_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        let mut sub_pattern_c21 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 4u64 as u32;
            let token_parser = <TokenParser<4usize>>::new(tokens)?;
            if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
                return None;
            }
            if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
                return None;
            }
            let WordInstNext4 = if let Some((len, table)) =
                TableWordInstNext4::parse(
                    tokens,
                    &mut context_instance,
                    inst_start,
                ) {
                block_0_len = block_0_len.max(len as u32);
                table
            } else {
                return None;
            };
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 4u64 as u32;
            let token_parser = <TokenParser<4usize>>::new(tokens)?;
            if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((WordInstNext4), (), pattern_len))
        };
        let ((mut WordInstNext4), (), sub_len) =
            sub_pattern_c21(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let dest24_t = if let Some((len, table)) = Tabledest24_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WordInstNext4,
                dest24_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2333:1, end:2333:2))"]
#[derive(Clone, Debug)]
struct clr_w_instructionVar167 {
    f13b_t: Tablef13b_t,
}
impl clr_w_instructionVar167 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("clr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13b_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let f13b_t = if let Some((len, table)) = Tablef13b_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13b_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2339:1, end:2339:2))"]
#[derive(Clone, Debug)]
struct clr_w_instructionVar168 {
    WREGb_t: TableWREGb_t,
}
impl clr_w_instructionVar168 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("clr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WREGb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGb_t = if let Some((len, table)) = TableWREGb_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREGb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2345:1, end:2345:2))"]
#[derive(Clone, Debug)]
struct clr_b_instructionVar169 {
    f13bbyte_t: Tablef13bbyte_t,
}
impl clr_b_instructionVar169 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("clr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13bbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let f13bbyte_t = if let Some((len, table)) = Tablef13bbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f13bbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2351:1, end:2351:2))"]
#[derive(Clone, Debug)]
struct clr_b_instructionVar170 {
    WREGbbyte_t: TableWREGbbyte_t,
}
impl clr_b_instructionVar170 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("clr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WREGbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbbyte_t = if let Some((len, table)) = TableWREGbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREGbbyte_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2789:1, end:2789:2))"]
#[derive(Clone, Debug)]
struct com_w_instructionVar171 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl com_w_instructionVar171 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("com.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2797:1, end:2797:2))"]
#[derive(Clone, Debug)]
struct com_b_instructionVar172 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl com_b_instructionVar172 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("com.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3323:1, end:3323:2))"]
#[derive(Clone, Debug)]
struct dec_w_instructionVar173 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl dec_w_instructionVar173 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3337:1, end:3337:2))"]
#[derive(Clone, Debug)]
struct dec_b_instructionVar174 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl dec_b_instructionVar174 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3383:1, end:3383:2))"]
#[derive(Clone, Debug)]
struct dec2_w_instructionVar175 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl dec2_w_instructionVar175 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec2.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3397:1, end:3397:2))"]
#[derive(Clone, Debug)]
struct dec2_b_instructionVar176 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl dec2_b_instructionVar176 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("dec2.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:3994:1, end:3994:2))"]
#[derive(Clone, Debug)]
struct goto_instructionVar177 {
    dest24_t: Tabledest24_t,
}
impl goto_instructionVar177 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("goto"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.dest24_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        let mut sub_pattern_c21 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let mut block_0_len = 4u64 as u32;
            let token_parser = <TokenParser<4usize>>::new(tokens)?;
            if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
                return None;
            }
            if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            let mut block_1_len = 4u64 as u32;
            let token_parser = <TokenParser<4usize>>::new(tokens)?;
            if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_19_16().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_15_12().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_11_8().disassembly() != 0i128 {
                return None;
            }
            if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
                return None;
            }
            pattern_len += block_1_len;
            tokens = &tokens[usize::try_from(block_1_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c21(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let dest24_t = if let Some((len, table)) = Tabledest24_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { dest24_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4025:1, end:4025:2))"]
#[derive(Clone, Debug)]
struct inc_w_instructionVar178 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl inc_w_instructionVar178 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4039:1, end:4039:2))"]
#[derive(Clone, Debug)]
struct inc_b_instructionVar179 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl inc_b_instructionVar179 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 14i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 12i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4084:1, end:4084:2))"]
#[derive(Clone, Debug)]
struct inc2_w_instructionVar180 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl inc2_w_instructionVar180 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc2.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 236i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4098:1, end:4098:2))"]
#[derive(Clone, Debug)]
struct inc2_b_instructionVar181 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl inc2_b_instructionVar181 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("inc2.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 236i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4143:1, end:4143:2))"]
#[derive(Clone, Debug)]
struct ior_w_instructionVar182 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl ior_w_instructionVar182 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4152:1, end:4152:2))"]
#[derive(Clone, Debug)]
struct ior_b_instructionVar183 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl ior_b_instructionVar183 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4161:1, end:4161:2))"]
#[derive(Clone, Debug)]
struct ior_w_instructionVar184 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl ior_w_instructionVar184 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4170:1, end:4170:2))"]
#[derive(Clone, Debug)]
struct ior_b_instructionVar185 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl ior_b_instructionVar185 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4300:1, end:4300:2))"]
#[derive(Clone, Debug)]
struct lsr_w_instructionVar186 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl lsr_w_instructionVar186 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lsr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4312:1, end:4312:2))"]
#[derive(Clone, Debug)]
struct lsr_b_instructionVar187 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl lsr_b_instructionVar187 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("lsr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5086:1, end:5086:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar188 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl mov_w_instructionVar188 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5095:1, end:5095:2))"]
#[derive(Clone, Debug)]
struct mov_b_instructionVar189 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl mov_b_instructionVar189 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6739:1, end:6739:2))"]
#[derive(Clone, Debug)]
struct pop_instructionVar190 {
    f15_t: Tablef15_t,
}
impl pop_instructionVar190 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("pop"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.f15_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
            return None;
        }
        let f15_t = if let Some((len, table)) =
            Tablef15_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f15_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6777:1, end:6777:2))"]
#[derive(Clone, Debug)]
struct push_instructionVar191 {
    f15_t: Tablef15_t,
}
impl push_instructionVar191 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("push"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f15_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 15i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
            return None;
        }
        let f15_t = if let Some((len, table)) =
            Tablef15_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f15_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6947:1, end:6947:2))"]
#[derive(Clone, Debug)]
struct retlw_w_instructionVar192 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl retlw_w_instructionVar192 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("retlw.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6958:1, end:6958:2))"]
#[derive(Clone, Debug)]
struct retlw_b_instructionVar193 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl retlw_b_instructionVar193 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("retlw.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7016:1, end:7016:2))"]
#[derive(Clone, Debug)]
struct rlc_w_instructionVar194 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl rlc_w_instructionVar194 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 214i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7025:1, end:7025:2))"]
#[derive(Clone, Debug)]
struct rlc_b_instructionVar195 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl rlc_b_instructionVar195 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 214i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7061:1, end:7061:2))"]
#[derive(Clone, Debug)]
struct rlnc_w_instructionVar196 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl rlnc_w_instructionVar196 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlnc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 214i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7068:1, end:7068:2))"]
#[derive(Clone, Debug)]
struct rlnc_b_instructionVar197 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl rlnc_b_instructionVar197 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rlnc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 214i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7100:1, end:7100:2))"]
#[derive(Clone, Debug)]
struct rrc_w_instructionVar198 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl rrc_w_instructionVar198 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrc.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 215i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7110:1, end:7110:2))"]
#[derive(Clone, Debug)]
struct rrc_b_instructionVar199 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl rrc_b_instructionVar199 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rrc.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 215i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7242:1, end:7242:2))"]
#[derive(Clone, Debug)]
struct setm_w_instructionVar200 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl setm_w_instructionVar200 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("setm.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 239i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7247:1, end:7247:2))"]
#[derive(Clone, Debug)]
struct setm_b_instructionVar201 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl setm_b_instructionVar201 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("setm.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 239i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7307:1, end:7307:2))"]
#[derive(Clone, Debug)]
struct sl_w_instructionVar202 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl sl_w_instructionVar202 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sl.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7317:1, end:7317:2))"]
#[derive(Clone, Debug)]
struct sl_b_instructionVar203 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl sl_b_instructionVar203 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sl.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 4i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7374:1, end:7374:2))"]
#[derive(Clone, Debug)]
struct sub_w_instructionVar204 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl sub_w_instructionVar204 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7387:1, end:7387:2))"]
#[derive(Clone, Debug)]
struct sub_b_instructionVar205 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl sub_b_instructionVar205 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7400:1, end:7400:2))"]
#[derive(Clone, Debug)]
struct sub_w_instructionVar206 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl sub_w_instructionVar206 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7412:1, end:7412:2))"]
#[derive(Clone, Debug)]
struct sub_b_instructionVar207 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl sub_b_instructionVar207 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7502:1, end:7502:2))"]
#[derive(Clone, Debug)]
struct subb_w_instructionVar208 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl subb_w_instructionVar208 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7514:1, end:7514:2))"]
#[derive(Clone, Debug)]
struct subb_b_instructionVar209 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl subb_b_instructionVar209 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7527:1, end:7527:2))"]
#[derive(Clone, Debug)]
struct subb_w_instructionVar210 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl subb_w_instructionVar210 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7540:1, end:7540:2))"]
#[derive(Clone, Debug)]
struct subb_b_instructionVar211 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl subb_b_instructionVar211 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7615:1, end:7615:2))"]
#[derive(Clone, Debug)]
struct subbr_w_instructionVar212 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl subbr_w_instructionVar212 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subbr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7628:1, end:7628:2))"]
#[derive(Clone, Debug)]
struct subbr_b_instructionVar213 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl subbr_b_instructionVar213 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subbr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7705:1, end:7705:2))"]
#[derive(Clone, Debug)]
struct subr_w_instructionVar214 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl subr_w_instructionVar214 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7718:1, end:7718:2))"]
#[derive(Clone, Debug)]
struct subr_b_instructionVar215 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl subr_b_instructionVar215 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 13i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 0i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7943:1, end:7943:2))"]
#[derive(Clone, Debug)]
struct xor_w_instructionVar216 {
    WREG_t: TableWREG_t,
    f13_t: Tablef13_t,
}
impl xor_w_instructionVar216 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREG_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREG_t = if let Some((len, table)) = TableWREG_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13_t = if let Some((len, table)) =
            Tablef13_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WREG_t, f13_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7950:1, end:7950:2))"]
#[derive(Clone, Debug)]
struct xor_b_instructionVar217 {
    WREGbyte_t: TableWREGbyte_t,
    f13byte_t: Tablef13byte_t,
}
impl xor_b_instructionVar217 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f13byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        self.WREGbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let WREGbyte_t = if let Some((len, table)) = TableWREGbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f13byte_t = if let Some((len, table)) = Tablef13byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WREGbyte_t,
                f13byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7958:1, end:7958:2))"]
#[derive(Clone, Debug)]
struct xor_w_instructionVar218 {
    k10_t: Tablek10_t,
    Wn_t: TableWn_t,
}
impl xor_w_instructionVar218 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let k10_t = if let Some((len, table)) =
            Tablek10_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7965:1, end:7965:2))"]
#[derive(Clone, Debug)]
struct xor_b_instructionVar219 {
    k10byte_t: Tablek10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl xor_b_instructionVar219 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 11i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 2i128 {
            return None;
        }
        if token_parser.TokenFieldOP_15().disassembly() != 1i128 {
            return None;
        }
        let k10byte_t = if let Some((len, table)) = Tablek10byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                k10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1941:1, end:1941:2))"]
#[derive(Clone, Debug)]
struct bclr_w_instructionVar220 {
    bit4_t: Tablebit4_t,
    f12_t: Tablef12_t,
}
impl bclr_w_instructionVar220 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bclr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f12_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.bit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 9i128 {
            return None;
        }
        let bit4_t = if let Some((len, table)) = Tablebit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f12_t = if let Some((len, table)) =
            Tablef12_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { bit4_t, f12_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2019:1, end:2019:2))"]
#[derive(Clone, Debug)]
struct bra_instructionVar221 {
    n16_t: Tablen16_t,
}
impl bra_instructionVar221 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("bra"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.n16_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 3i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        let n16_t = if let Some((len, table)) =
            Tablen16_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { n16_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2097:1, end:2097:2))"]
#[derive(Clone, Debug)]
struct bset_w_instructionVar222 {
    bit4byte_t: Tablebit4byte_t,
    bit4_t: Tablebit4_t,
    f12_t: Tablef12_t,
}
impl bset_w_instructionVar222 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("bset.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f12_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.bit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 8i128 {
            return None;
        }
        let bit4byte_t = if let Some((len, table)) = Tablebit4byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let bit4_t = if let Some((len, table)) = Tablebit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f12_t = if let Some((len, table)) =
            Tablef12_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                bit4byte_t,
                bit4_t,
                f12_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2136:1, end:2136:2))"]
#[derive(Clone, Debug)]
struct btg_instructionVar223 {
    bit4byte_t: Tablebit4byte_t,
    bit4_t: Tablebit4_t,
    f12_t: Tablef12_t,
}
impl btg_instructionVar223 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("btg")];
        display.extend_from_slice(&extend);
        self.bit4byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.f12_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.bit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 10i128 {
            return None;
        }
        let bit4byte_t = if let Some((len, table)) = Tablebit4byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let bit4_t = if let Some((len, table)) = Tablebit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f12_t = if let Some((len, table)) =
            Tablef12_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                bit4byte_t,
                bit4_t,
                f12_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2160:1, end:2160:2))"]
#[derive(Clone, Debug)]
struct btsc_instructionVar224 {
    bit4byte_t: Tablebit4byte_t,
    bit4_t: Tablebit4_t,
    f12_t: Tablef12_t,
}
impl btsc_instructionVar224 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("btsc")];
        display.extend_from_slice(&extend);
        self.bit4byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.f12_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.bit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 15i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let bit4byte_t = if let Some((len, table)) = Tablebit4byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let bit4_t = if let Some((len, table)) = Tablebit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f12_t = if let Some((len, table)) =
            Tablef12_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                bit4byte_t,
                bit4_t,
                f12_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2176:1, end:2176:2))"]
#[derive(Clone, Debug)]
struct btss_instructionVar225 {
    bit4byte_t: Tablebit4byte_t,
    bit4_t: Tablebit4_t,
    f12_t: Tablef12_t,
}
impl btss_instructionVar225 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        global_set.set_skipInstr(
            Some(inst_next),
            context.register().read_skipInstr_disassembly().unwrap(),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("btss")];
        display.extend_from_slice(&extend);
        self.bit4byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.f12_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.bit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 14i128 {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_skipInstr_disassembly(tmp)
            .unwrap();
        let bit4byte_t = if let Some((len, table)) = Tablebit4byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let bit4_t = if let Some((len, table)) = Tablebit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f12_t = if let Some((len, table)) =
            Tablef12_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                bit4byte_t,
                bit4_t,
                f12_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2192:1, end:2192:2))"]
#[derive(Clone, Debug)]
struct btst_w_instructionVar226 {
    bit4byte_t: Tablebit4byte_t,
    bit4_t: Tablebit4_t,
    f12_t: Tablef12_t,
}
impl btst_w_instructionVar226 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("btst.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f12_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.bit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 11i128 {
            return None;
        }
        let bit4byte_t = if let Some((len, table)) = Tablebit4byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let bit4_t = if let Some((len, table)) = Tablebit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f12_t = if let Some((len, table)) =
            Tablef12_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                bit4byte_t,
                bit4_t,
                f12_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2237:1, end:2237:2))"]
#[derive(Clone, Debug)]
struct btsts_instructionVar227 {
    bit4byte_t: Tablebit4byte_t,
    bit4_t: Tablebit4_t,
    f12_t: Tablef12_t,
}
impl btsts_instructionVar227 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("btsts")];
        display.extend_from_slice(&extend);
        self.bit4byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.f12_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.bit4_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 10i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 12i128 {
            return None;
        }
        let bit4byte_t = if let Some((len, table)) = Tablebit4byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let bit4_t = if let Some((len, table)) = Tablebit4_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let f12_t = if let Some((len, table)) =
            Tablef12_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                bit4byte_t,
                bit4_t,
                f12_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4179:1, end:4179:2))"]
#[derive(Clone, Debug)]
struct ior_w_instructionVar228 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl ior_w_instructionVar228 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4190:1, end:4190:2))"]
#[derive(Clone, Debug)]
struct ior_b_instructionVar229 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl ior_b_instructionVar229 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4202:1, end:4202:2))"]
#[derive(Clone, Debug)]
struct ior_w_instructionVar230 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl ior_w_instructionVar230 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:4212:1, end:4212:2))"]
#[derive(Clone, Debug)]
struct ior_b_instructionVar231 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl ior_b_instructionVar231 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("ior.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5140:1, end:5140:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar232 {
    WsSlit10_t: TableWsSlit10_t,
    Wnda_t: TableWnda_t,
}
impl mov_w_instructionVar232 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WsSlit10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wnda_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let WsSlit10_t = if let Some((len, table)) = TableWsSlit10_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnda_t = if let Some((len, table)) = TableWnda_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WsSlit10_t, Wnda_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5145:1, end:5145:2))"]
#[derive(Clone, Debug)]
struct mov_b_instructionVar233 {
    WsSlit10byte_t: TableWsSlit10byte_t,
    Wndabyte_t: TableWndabyte_t,
}
impl mov_b_instructionVar233 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.WsSlit10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndabyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let WsSlit10byte_t = if let Some((len, table)) =
            TableWsSlit10byte_t::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndabyte_t = if let Some((len, table)) = TableWndabyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WsSlit10byte_t,
                Wndabyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5151:1, end:5151:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar234 {
    WdSlit10_t: TableWdSlit10_t,
    Wn_t: TableWn_t,
}
impl mov_w_instructionVar234 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wn_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WdSlit10_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let WdSlit10_t = if let Some((len, table)) = TableWdSlit10_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wn_t = if let Some((len, table)) =
            TableWn_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { WdSlit10_t, Wn_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5156:1, end:5156:2))"]
#[derive(Clone, Debug)]
struct mov_b_instructionVar235 {
    WdSlit10byte_t: TableWdSlit10byte_t,
    Wnbyte_t: TableWnbyte_t,
}
impl mov_b_instructionVar235 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wnbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.WdSlit10byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 9i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let WdSlit10byte_t = if let Some((len, table)) =
            TableWdSlit10byte_t::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wnbyte_t = if let Some((len, table)) = TableWnbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                WdSlit10byte_t,
                Wnbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5162:1, end:5162:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar236 {
    movWd: TablemovWd,
    movWs: TablemovWs,
}
impl mov_w_instructionVar236 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.movWs.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.movWd.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let movWd = if let Some((len, table)) =
            TablemovWd::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let movWs = if let Some((len, table)) =
            TablemovWs::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { movWd, movWs }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5170:1, end:5170:2))"]
#[derive(Clone, Debug)]
struct mov_b_instructionVar237 {
    movWdbyte: TablemovWdbyte,
    movWsbyte: TablemovWsbyte,
}
impl mov_b_instructionVar237 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.movWsbyte.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.movWdbyte.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 7i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let movWdbyte = if let Some((len, table)) = TablemovWdbyte::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let movWsbyte = if let Some((len, table)) = TablemovWsbyte::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                movWdbyte,
                movWsbyte,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6728:1, end:6728:2))"]
#[derive(Clone, Debug)]
struct nop_instructionVar238 {}
impl nop_instructionVar238 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nop")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6734:1, end:6734:2))"]
#[derive(Clone, Debug)]
struct nopr_instructionVar239 {}
impl nopr_instructionVar239 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("nopr")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_16().disassembly() != 255i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:6821:1, end:6821:2))"]
#[derive(Clone, Debug)]
struct rcall_instructionVar240 {
    n16_t: Tablen16_t,
    WordInstNext4: TableWordInstNext4,
}
impl rcall_instructionVar240 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("rcall"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.n16_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19_16().disassembly() != 7i128 {
            return None;
        }
        let n16_t = if let Some((len, table)) =
            Tablen16_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let WordInstNext4 = if let Some((len, table)) =
            TableWordInstNext4::parse(
                tokens_current,
                &mut context_instance,
                inst_start,
            ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                n16_t,
                WordInstNext4,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7424:1, end:7424:2))"]
#[derive(Clone, Debug)]
struct sub_w_instructionVar241 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl sub_w_instructionVar241 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7438:1, end:7438:2))"]
#[derive(Clone, Debug)]
struct sub_b_instructionVar242 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl sub_b_instructionVar242 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7453:1, end:7453:2))"]
#[derive(Clone, Debug)]
struct sub_w_instructionVar243 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl sub_w_instructionVar243 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7468:1, end:7468:2))"]
#[derive(Clone, Debug)]
struct sub_b_instructionVar244 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl sub_b_instructionVar244 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("sub.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7553:1, end:7553:2))"]
#[derive(Clone, Debug)]
struct subb_w_instructionVar245 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl subb_w_instructionVar245 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7567:1, end:7567:2))"]
#[derive(Clone, Debug)]
struct subb_b_instructionVar246 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl subb_b_instructionVar246 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7583:1, end:7583:2))"]
#[derive(Clone, Debug)]
struct subb_w_instructionVar247 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl subb_w_instructionVar247 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7599:1, end:7599:2))"]
#[derive(Clone, Debug)]
struct subb_b_instructionVar248 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl subb_b_instructionVar248 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subb.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 5i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7642:1, end:7642:2))"]
#[derive(Clone, Debug)]
struct subbr_w_instructionVar249 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl subbr_w_instructionVar249 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subbr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7657:1, end:7657:2))"]
#[derive(Clone, Debug)]
struct subbr_b_instructionVar250 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl subbr_b_instructionVar250 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subbr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7673:1, end:7673:2))"]
#[derive(Clone, Debug)]
struct subbr_w_instructionVar251 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl subbr_w_instructionVar251 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subbr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7689:1, end:7689:2))"]
#[derive(Clone, Debug)]
struct subbr_b_instructionVar252 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl subbr_b_instructionVar252 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subbr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7731:1, end:7731:2))"]
#[derive(Clone, Debug)]
struct subr_w_instructionVar253 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl subr_w_instructionVar253 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7745:1, end:7745:2))"]
#[derive(Clone, Debug)]
struct subr_b_instructionVar254 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl subr_b_instructionVar254 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7760:1, end:7760:2))"]
#[derive(Clone, Debug)]
struct subr_w_instructionVar255 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl subr_w_instructionVar255 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subr.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7775:1, end:7775:2))"]
#[derive(Clone, Debug)]
struct subr_b_instructionVar256 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl subr_b_instructionVar256 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("subr.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7973:1, end:7973:2))"]
#[derive(Clone, Debug)]
struct xor_w_instructionVar257 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    k5_t: Tablek5_t,
}
impl xor_w_instructionVar257 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5_t = if let Some((len, table)) =
            Tablek5_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, k5_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7980:1, end:7980:2))"]
#[derive(Clone, Debug)]
struct xor_b_instructionVar258 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    k5byte_t: Tablek5byte_t,
}
impl xor_b_instructionVar258 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.k5byte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldOP_6_5().disassembly() != 3i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let k5byte_t = if let Some((len, table)) = Tablek5byte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                k5byte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7988:1, end:7988:2))"]
#[derive(Clone, Debug)]
struct xor_w_instructionVar259 {
    Wb_t: TableWb_t,
    Wd_t: TableWd_t,
    Ws_t: TableWs_t,
}
impl xor_w_instructionVar259 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Ws_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wd_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let Wb_t = if let Some((len, table)) =
            TableWb_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wd_t = if let Some((len, table)) =
            TableWd_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Ws_t = if let Some((len, table)) =
            TableWs_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { Wb_t, Wd_t, Ws_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:7998:1, end:7998:2))"]
#[derive(Clone, Debug)]
struct xor_b_instructionVar260 {
    Wbbyte_t: TableWbbyte_t,
    Wdbyte_t: TableWdbyte_t,
    Wsbyte_t: TableWsbyte_t,
}
impl xor_b_instructionVar260 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("xor.b"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wbbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wsbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wdbyte_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 6i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let Wbbyte_t = if let Some((len, table)) = TableWbbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_13().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_12().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wdbyte_t = if let Some((len, table)) = TableWdbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let mut sub_pattern_c1 = |tokens: &[u8], context_param: &mut T| {
            let mut pattern_len = 0 as u32;
            let mut context_instance = context_param.clone();
            let mut tokens = tokens;
            let block_0 = |tokens_param: &[u8], context_param: &mut T| {
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_6().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                let token_parser = <TokenParser<4usize>>::new(tokens_param)?;
                if token_parser.TokenFieldOP_5().disassembly() == 0i128 {
                    return Some(((), (), u32::try_from(4u64).unwrap()));
                }
                None
            };
            let ((), (), block_0_len) = block_0(tokens, &mut context_instance)?;
            pattern_len += block_0_len;
            tokens = &tokens[usize::try_from(block_0_len).unwrap()..];
            *context_param = context_instance;
            Some(((), (), pattern_len))
        };
        let ((), (), sub_len) =
            sub_pattern_c1(tokens_current, &mut context_instance)?;
        block_0_len = block_0_len.max(sub_len);
        let Wsbyte_t = if let Some((len, table)) = TableWsbyte_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                Wbbyte_t,
                Wdbyte_t,
                Wsbyte_t,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5116:1, end:5116:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar261 {
    f15b_t: Tablef15b_t,
    Wndb_t: TableWndb_t,
}
impl mov_w_instructionVar261 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.f15b_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 0i128 {
            return None;
        }
        let f15b_t = if let Some((len, table)) = Tablef15b_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndb_t = if let Some((len, table)) = TableWndb_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f15b_t, Wndb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5122:1, end:5122:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar262 {
    f15b_t: Tablef15b_t,
    Wns_t: TableWns_t,
}
impl mov_w_instructionVar262 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.Wns_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.f15b_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 8i128 {
            return None;
        }
        if token_parser.TokenFieldOP_19().disassembly() != 1i128 {
            return None;
        }
        let f15b_t = if let Some((len, table)) = Tablef15b_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wns_t = if let Some((len, table)) =
            TableWns_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { f15b_t, Wns_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2078:1, end:2078:2))"]
#[derive(Clone, Debug)]
struct bra_instructionVar263 {
    cond1: Tablecond1,
    n16_t: Tablen16_t,
}
impl bra_instructionVar263 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("bra"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.cond1.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.n16_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 3i128 {
            return None;
        }
        let cond1 = if let Some((len, table)) =
            Tablecond1::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let n16_t = if let Some((len, table)) =
            Tablen16_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { cond1, n16_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2091:1, end:2091:2))"]
#[derive(Clone, Debug)]
struct bra_instructionVar264 {
    cond2: Tablecond2,
    n16_t: Tablen16_t,
}
impl bra_instructionVar264 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("bra"), DisplayElement::Literal(" ")];
        display.extend_from_slice(&extend);
        self.cond2.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.n16_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 0i128 {
            return None;
        }
        let cond2 = if let Some((len, table)) =
            Tablecond2::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let n16_t = if let Some((len, table)) =
            Tablen16_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { cond2, n16_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:5134:1, end:5134:2))"]
#[derive(Clone, Debug)]
struct mov_w_instructionVar265 {
    k16_t: Tablek16_t,
    Wndb_t: TableWndb_t,
}
impl mov_w_instructionVar265 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("mov.w"),
            DisplayElement::Literal(" "),
        ];
        display.extend_from_slice(&extend);
        self.k16_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(",")];
        display.extend_from_slice(&extend);
        self.Wndb_t.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldOP_23_20().disassembly() != 2i128 {
            return None;
        }
        let k16_t = if let Some((len, table)) =
            Tablek16_t::parse(tokens_current, &mut context_instance, inst_start)
        {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        let Wndb_t = if let Some((len, table)) = TableWndb_t::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            table
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { k16_t, Wndb_t }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1490:1, end:1490:2))"]
#[derive(Clone, Debug)]
struct instructionVar266 {
    instruction: Box<Tableinstruction>,
}
impl instructionVar266 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        self.instruction.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 0i128
        {
            return None;
        }
        let tmp = 1i128;
        context_instance
            .register_mut()
            .write_phase_disassembly(tmp)
            .unwrap();
        let instruction = if let Some((len, table)) = Tableinstruction::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            Box::new(table)
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { instruction }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1496:1, end:1496:2))"]
#[derive(Clone, Debug)]
struct instructionVar267 {
    instruction: Box<Tableinstruction>,
}
impl instructionVar267 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        self.instruction.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if context_instance
            .register()
            .read_repeatInstr_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let tmp = 2i128;
        context_instance
            .register_mut()
            .write_phase_disassembly(tmp)
            .unwrap();
        let instruction = if let Some((len, table)) = Tableinstruction::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            Box::new(table)
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { instruction }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1510:1, end:1510:2))"]
#[derive(Clone, Debug)]
struct instructionVar268 {
    instruction: Box<Tableinstruction>,
}
impl instructionVar268 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        self.instruction.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        if context_instance
            .register()
            .read_skipInstr_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let tmp = 2i128;
        context_instance
            .register_mut()
            .write_phase_disassembly(tmp)
            .unwrap();
        let instruction = if let Some((len, table)) = Tableinstruction::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            Box::new(table)
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { instruction }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1517:1, end:1517:2))"]
#[derive(Clone, Debug)]
struct instructionVar269 {
    instruction: Box<Tableinstruction>,
}
impl instructionVar269 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        self.instruction.display_extend(
            display, context, inst_start, inst_next, global_set,
        );
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 0u64 as u32;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 1i128
        {
            return None;
        }
        let tmp = 2i128;
        context_instance
            .register_mut()
            .write_phase_disassembly(tmp)
            .unwrap();
        let instruction = if let Some((len, table)) = Tableinstruction::parse(
            tokens_current,
            &mut context_instance,
            inst_start,
        ) {
            block_0_len = block_0_len.max(len as u32);
            Box::new(table)
        } else {
            return None;
        };
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { instruction }))
    }
}
#[derive(Clone, Debug)]
enum Tableinstruction {
    Var0(repeat_instructionVar0),
    Var1(repeat_instructionVar1),
    Var2(repeat_instructionVar2),
    Var3(repeat_instructionVar3),
    Var4(clrwdt_instructionVar4),
    Var5(pop_s_instructionVar5),
    Var6(push_s_instructionVar6),
    Var7(reset_instructionVar7),
    Var8(retfie_instructionVar8),
    Var9(return_instructionVar9),
    Var10(ulnk_instructionVar10),
    Var11(urun_instructionVar11),
    Var12(break_instructionVar12),
    Var13(push_d_instructionVar13),
    Var14(pwrsav_instructionVar14),
    Var15(bra_instructionVar15),
    Var16(call_instructionVar16),
    Var17(pop_d_instructionVar17),
    Var18(clr_w_instructionVar18),
    Var19(clr_b_instructionVar19),
    Var20(daw_b_instructionVar20),
    Var21(goto_instructionVar21),
    Var22(rcall_instructionVar22),
    Var23(repeat_instructionVar23),
    Var24(swap_w_instructionVar24),
    Var25(swap_b_instructionVar25),
    Var26(cp0_w_instructionVar26),
    Var27(cp0_b_instructionVar27),
    Var28(exch_instructionVar28),
    Var29(mov_d_instructionVar29),
    Var30(fbcl_instructionVar30),
    Var31(ff1l_instructionVar31),
    Var32(ff1r_instructionVar32),
    Var33(setm_w_instructionVar33),
    Var34(setm_b_instructionVar34),
    Var35(mov_d_instructionVar35),
    Var36(lnk_instructionVar36),
    Var37(se_instructionVar37),
    Var38(ze_instructionVar38),
    Var39(mov_b_instructionVar39),
    Var40(mul_w_instructionVar40),
    Var41(mul_b_instructionVar41),
    Var42(asr_w_instructionVar42),
    Var43(asr_b_instructionVar43),
    Var44(cpseq_w_instructionVar44),
    Var45(cpseq_b_instructionVar45),
    Var46(cpsgt_w_instructionVar46),
    Var47(cpsgt_b_instructionVar47),
    Var48(cpslt_w_instructionVar48),
    Var49(cpslt_b_instructionVar49),
    Var50(cpsne_w_instructionVar50),
    Var51(cpsne_b_instructionVar51),
    Var52(div_sd_instructionVar52),
    Var53(div_ud_instructionVar53),
    Var54(asr_w_instructionVar54),
    Var55(asr_w_instructionVar55),
    Var56(bsw_c_instructionVar56),
    Var57(bsw_z_instructionVar57),
    Var58(btst_c_instructionVar58),
    Var59(btst_z_instructionVar59),
    Var60(com_w_instructionVar60),
    Var61(com_b_instructionVar61),
    Var62(cp_w_instructionVar62),
    Var63(cp_b_instructionVar63),
    Var64(cp_w_instructionVar64),
    Var65(cp_b_instructionVar65),
    Var66(cp_w_instructionVar66),
    Var67(cp_b_instructionVar67),
    Var68(cp0_w_instructionVar68),
    Var69(cp0_b_instructionVar69),
    Var70(cpb_w_instructionVar70),
    Var71(cpb_b_instructionVar71),
    Var72(cpb_w_instructionVar72),
    Var73(cpb_b_instructionVar73),
    Var74(cpb_w_instructionVar74),
    Var75(cpb_b_instructionVar75),
    Var76(dec_w_instructionVar76),
    Var77(dec_b_instructionVar77),
    Var78(dec2_w_instructionVar78),
    Var79(dec2_b_instructionVar79),
    Var80(disi_instructionVar80),
    Var81(div_sw_instructionVar81),
    Var82(div_uw_instructionVar82),
    Var83(inc_w_instructionVar83),
    Var84(inc_b_instructionVar84),
    Var85(inc2_w_instructionVar85),
    Var86(inc2_b_instructionVar86),
    Var87(lsr_w_instructionVar87),
    Var88(lsr_b_instructionVar88),
    Var89(lsr_w_instructionVar89),
    Var90(lsr_w_instructionVar90),
    Var91(mov_w_instructionVar91),
    Var92(mov_b_instructionVar92),
    Var93(mul_su_instructionVar93),
    Var94(mul_uu_instructionVar94),
    Var95(mul_ss_instructionVar95),
    Var96(mul_su_instructionVar96),
    Var97(mul_us_instructionVar97),
    Var98(mul_uu_instructionVar98),
    Var99(neg_w_instructionVar99),
    Var100(neg_b_instructionVar100),
    Var101(neg_w_instructionVar101),
    Var102(neg_b_instructionVar102),
    Var103(repeat_instructionVar103),
    Var104(rlc_w_instructionVar104),
    Var105(rlc_b_instructionVar105),
    Var106(rlnc_w_instructionVar106),
    Var107(rlnc_b_instructionVar107),
    Var108(rrc_w_instructionVar108),
    Var109(rrc_b_instructionVar109),
    Var110(rrnc_w_instructionVar110),
    Var111(rrnc_b_instructionVar111),
    Var112(rrnc_w_instructionVar112),
    Var113(rrnc_b_instructionVar113),
    Var114(sl_w_instructionVar114),
    Var115(sl_b_instructionVar115),
    Var116(sl_instructionVar116),
    Var117(sl_instructionVar117),
    Var118(tblrdh_w_instructionVar118),
    Var119(tblrdh_b_instructionVar119),
    Var120(tblrdl_w_instructionVar120),
    Var121(tblrdl_b_instructionVar121),
    Var122(tblwth_w_instructionVar122),
    Var123(tblwth_b_instructionVar123),
    Var124(tblwtl_w_instructionVar124),
    Var125(tblwtl_b_instructionVar125),
    Var126(add_w_instructionVar126),
    Var127(add_b_instructionVar127),
    Var128(add_w_instructionVar128),
    Var129(add_b_instructionVar129),
    Var130(pop_instructionVar130),
    Var131(add_w_instructionVar131),
    Var132(add_b_instructionVar132),
    Var133(push_instructionVar133),
    Var134(add_w_instructionVar134),
    Var135(add_b_instructionVar135),
    Var136(addc_w_instructionVar136),
    Var137(addc_b_instructionVar137),
    Var138(addc_w_instructionVar138),
    Var139(addc_b_instructionVar139),
    Var140(addc_w_instructionVar140),
    Var141(addc_b_instructionVar141),
    Var142(addc_w_instructionVar142),
    Var143(addc_b_instructionVar143),
    Var144(and_w_instructionVar144),
    Var145(and_b_instructionVar145),
    Var146(and_w_instructionVar146),
    Var147(and_b_instructionVar147),
    Var148(and_w_instructionVar148),
    Var149(and_b_instructionVar149),
    Var150(and_w_instructionVar150),
    Var151(and_b_instructionVar151),
    Var152(asr_w_instructionVar152),
    Var153(asr_b_instructionVar153),
    Var154(bclr_w_instructionVar154),
    Var155(bclr_b_instructionVar155),
    Var156(bset_w_instructionVar156),
    Var157(bset_b_instructionVar157),
    Var158(btg_w_instructionVar158),
    Var159(btg_b_instructionVar159),
    Var160(btsc_w_instructionVar160),
    Var161(btss_w_instructionVar161),
    Var162(btst_c_instructionVar162),
    Var163(btst_z_instructionVar163),
    Var164(btsts_c_instructionVar164),
    Var165(btsts_z_instructionVar165),
    Var166(call_instructionVar166),
    Var167(clr_w_instructionVar167),
    Var168(clr_w_instructionVar168),
    Var169(clr_b_instructionVar169),
    Var170(clr_b_instructionVar170),
    Var171(com_w_instructionVar171),
    Var172(com_b_instructionVar172),
    Var173(dec_w_instructionVar173),
    Var174(dec_b_instructionVar174),
    Var175(dec2_w_instructionVar175),
    Var176(dec2_b_instructionVar176),
    Var177(goto_instructionVar177),
    Var178(inc_w_instructionVar178),
    Var179(inc_b_instructionVar179),
    Var180(inc2_w_instructionVar180),
    Var181(inc2_b_instructionVar181),
    Var182(ior_w_instructionVar182),
    Var183(ior_b_instructionVar183),
    Var184(ior_w_instructionVar184),
    Var185(ior_b_instructionVar185),
    Var186(lsr_w_instructionVar186),
    Var187(lsr_b_instructionVar187),
    Var188(mov_w_instructionVar188),
    Var189(mov_b_instructionVar189),
    Var190(pop_instructionVar190),
    Var191(push_instructionVar191),
    Var192(retlw_w_instructionVar192),
    Var193(retlw_b_instructionVar193),
    Var194(rlc_w_instructionVar194),
    Var195(rlc_b_instructionVar195),
    Var196(rlnc_w_instructionVar196),
    Var197(rlnc_b_instructionVar197),
    Var198(rrc_w_instructionVar198),
    Var199(rrc_b_instructionVar199),
    Var200(setm_w_instructionVar200),
    Var201(setm_b_instructionVar201),
    Var202(sl_w_instructionVar202),
    Var203(sl_b_instructionVar203),
    Var204(sub_w_instructionVar204),
    Var205(sub_b_instructionVar205),
    Var206(sub_w_instructionVar206),
    Var207(sub_b_instructionVar207),
    Var208(subb_w_instructionVar208),
    Var209(subb_b_instructionVar209),
    Var210(subb_w_instructionVar210),
    Var211(subb_b_instructionVar211),
    Var212(subbr_w_instructionVar212),
    Var213(subbr_b_instructionVar213),
    Var214(subr_w_instructionVar214),
    Var215(subr_b_instructionVar215),
    Var216(xor_w_instructionVar216),
    Var217(xor_b_instructionVar217),
    Var218(xor_w_instructionVar218),
    Var219(xor_b_instructionVar219),
    Var220(bclr_w_instructionVar220),
    Var221(bra_instructionVar221),
    Var222(bset_w_instructionVar222),
    Var223(btg_instructionVar223),
    Var224(btsc_instructionVar224),
    Var225(btss_instructionVar225),
    Var226(btst_w_instructionVar226),
    Var227(btsts_instructionVar227),
    Var228(ior_w_instructionVar228),
    Var229(ior_b_instructionVar229),
    Var230(ior_w_instructionVar230),
    Var231(ior_b_instructionVar231),
    Var232(mov_w_instructionVar232),
    Var233(mov_b_instructionVar233),
    Var234(mov_w_instructionVar234),
    Var235(mov_b_instructionVar235),
    Var236(mov_w_instructionVar236),
    Var237(mov_b_instructionVar237),
    Var238(nop_instructionVar238),
    Var239(nopr_instructionVar239),
    Var240(rcall_instructionVar240),
    Var241(sub_w_instructionVar241),
    Var242(sub_b_instructionVar242),
    Var243(sub_w_instructionVar243),
    Var244(sub_b_instructionVar244),
    Var245(subb_w_instructionVar245),
    Var246(subb_b_instructionVar246),
    Var247(subb_w_instructionVar247),
    Var248(subb_b_instructionVar248),
    Var249(subbr_w_instructionVar249),
    Var250(subbr_b_instructionVar250),
    Var251(subbr_w_instructionVar251),
    Var252(subbr_b_instructionVar252),
    Var253(subr_w_instructionVar253),
    Var254(subr_b_instructionVar254),
    Var255(subr_w_instructionVar255),
    Var256(subr_b_instructionVar256),
    Var257(xor_w_instructionVar257),
    Var258(xor_b_instructionVar258),
    Var259(xor_w_instructionVar259),
    Var260(xor_b_instructionVar260),
    Var261(mov_w_instructionVar261),
    Var262(mov_w_instructionVar262),
    Var263(bra_instructionVar263),
    Var264(bra_instructionVar264),
    Var265(mov_w_instructionVar265),
    Var266(instructionVar266),
    Var267(instructionVar267),
    Var268(instructionVar268),
    Var269(instructionVar269),
}
impl Tableinstruction {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var14(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var15(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var16(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var17(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var18(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var19(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var20(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var21(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var22(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var23(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var24(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var25(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var26(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var27(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var28(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var29(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var30(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var31(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var32(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var33(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var34(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var35(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var36(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var37(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var38(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var39(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var40(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var41(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var42(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var43(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var44(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var45(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var46(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var47(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var48(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var49(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var50(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var51(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var52(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var53(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var54(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var55(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var56(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var57(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var58(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var59(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var60(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var61(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var62(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var63(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var64(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var65(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var66(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var67(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var68(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var69(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var70(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var71(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var72(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var73(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var74(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var75(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var76(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var77(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var78(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var79(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var80(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var81(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var82(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var83(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var84(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var85(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var86(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var87(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var88(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var89(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var90(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var91(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var92(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var93(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var94(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var95(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var96(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var97(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var98(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var99(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var100(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var101(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var102(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var103(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var104(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var105(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var106(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var107(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var108(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var109(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var110(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var111(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var112(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var113(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var114(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var115(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var116(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var117(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var118(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var119(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var120(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var121(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var122(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var123(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var124(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var125(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var126(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var127(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var128(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var129(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var130(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var131(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var132(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var133(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var134(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var135(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var136(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var137(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var138(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var139(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var140(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var141(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var142(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var143(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var144(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var145(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var146(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var147(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var148(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var149(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var150(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var151(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var152(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var153(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var154(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var155(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var156(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var157(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var158(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var159(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var160(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var161(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var162(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var163(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var164(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var165(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var166(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var167(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var168(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var169(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var170(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var171(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var172(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var173(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var174(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var175(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var176(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var177(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var178(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var179(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var180(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var181(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var182(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var183(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var184(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var185(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var186(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var187(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var188(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var189(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var190(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var191(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var192(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var193(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var194(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var195(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var196(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var197(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var198(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var199(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var200(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var201(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var202(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var203(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var204(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var205(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var206(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var207(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var208(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var209(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var210(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var211(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var212(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var213(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var214(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var215(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var216(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var217(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var218(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var219(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var220(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var221(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var222(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var223(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var224(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var225(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var226(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var227(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var228(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var229(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var230(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var231(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var232(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var233(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var234(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var235(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var236(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var237(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var238(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var239(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var240(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var241(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var242(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var243(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var244(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var245(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var246(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var247(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var248(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var249(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var250(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var251(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var252(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var253(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var254(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var255(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var256(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var257(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var258(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var259(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var260(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var261(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var262(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var263(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var264(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var265(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var266(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var267(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var268(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var269(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = repeat_instructionVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) = repeat_instructionVar1::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) = repeat_instructionVar2::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) = repeat_instructionVar3::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) = clrwdt_instructionVar4::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) = pop_s_instructionVar5::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) = push_s_instructionVar6::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) = reset_instructionVar7::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) = retfie_instructionVar8::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) = return_instructionVar9::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) = ulnk_instructionVar10::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) = urun_instructionVar11::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) = break_instructionVar12::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) = push_d_instructionVar13::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        if let Some((inst_len, parsed)) = pwrsav_instructionVar14::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var14(parsed)));
        }
        if let Some((inst_len, parsed)) = bra_instructionVar15::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var15(parsed)));
        }
        if let Some((inst_len, parsed)) = call_instructionVar16::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var16(parsed)));
        }
        if let Some((inst_len, parsed)) = pop_d_instructionVar17::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var17(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_w_instructionVar18::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var18(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_b_instructionVar19::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var19(parsed)));
        }
        if let Some((inst_len, parsed)) = daw_b_instructionVar20::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var20(parsed)));
        }
        if let Some((inst_len, parsed)) = goto_instructionVar21::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var21(parsed)));
        }
        if let Some((inst_len, parsed)) = rcall_instructionVar22::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var22(parsed)));
        }
        if let Some((inst_len, parsed)) = repeat_instructionVar23::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var23(parsed)));
        }
        if let Some((inst_len, parsed)) = swap_w_instructionVar24::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var24(parsed)));
        }
        if let Some((inst_len, parsed)) = swap_b_instructionVar25::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var25(parsed)));
        }
        if let Some((inst_len, parsed)) = cp0_w_instructionVar26::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var26(parsed)));
        }
        if let Some((inst_len, parsed)) = cp0_b_instructionVar27::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var27(parsed)));
        }
        if let Some((inst_len, parsed)) = exch_instructionVar28::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var28(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_d_instructionVar29::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var29(parsed)));
        }
        if let Some((inst_len, parsed)) = fbcl_instructionVar30::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var30(parsed)));
        }
        if let Some((inst_len, parsed)) = ff1l_instructionVar31::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var31(parsed)));
        }
        if let Some((inst_len, parsed)) = ff1r_instructionVar32::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var32(parsed)));
        }
        if let Some((inst_len, parsed)) = setm_w_instructionVar33::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var33(parsed)));
        }
        if let Some((inst_len, parsed)) = setm_b_instructionVar34::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var34(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_d_instructionVar35::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var35(parsed)));
        }
        if let Some((inst_len, parsed)) = lnk_instructionVar36::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var36(parsed)));
        }
        if let Some((inst_len, parsed)) = se_instructionVar37::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var37(parsed)));
        }
        if let Some((inst_len, parsed)) = ze_instructionVar38::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var38(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_b_instructionVar39::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var39(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_w_instructionVar40::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var40(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_b_instructionVar41::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var41(parsed)));
        }
        if let Some((inst_len, parsed)) = asr_w_instructionVar42::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var42(parsed)));
        }
        if let Some((inst_len, parsed)) = asr_b_instructionVar43::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var43(parsed)));
        }
        if let Some((inst_len, parsed)) = cpseq_w_instructionVar44::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var44(parsed)));
        }
        if let Some((inst_len, parsed)) = cpseq_b_instructionVar45::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var45(parsed)));
        }
        if let Some((inst_len, parsed)) = cpsgt_w_instructionVar46::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var46(parsed)));
        }
        if let Some((inst_len, parsed)) = cpsgt_b_instructionVar47::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var47(parsed)));
        }
        if let Some((inst_len, parsed)) = cpslt_w_instructionVar48::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var48(parsed)));
        }
        if let Some((inst_len, parsed)) = cpslt_b_instructionVar49::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var49(parsed)));
        }
        if let Some((inst_len, parsed)) = cpsne_w_instructionVar50::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var50(parsed)));
        }
        if let Some((inst_len, parsed)) = cpsne_b_instructionVar51::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var51(parsed)));
        }
        if let Some((inst_len, parsed)) = div_sd_instructionVar52::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var52(parsed)));
        }
        if let Some((inst_len, parsed)) = div_ud_instructionVar53::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var53(parsed)));
        }
        if let Some((inst_len, parsed)) = asr_w_instructionVar54::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var54(parsed)));
        }
        if let Some((inst_len, parsed)) = asr_w_instructionVar55::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var55(parsed)));
        }
        if let Some((inst_len, parsed)) = bsw_c_instructionVar56::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var56(parsed)));
        }
        if let Some((inst_len, parsed)) = bsw_z_instructionVar57::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var57(parsed)));
        }
        if let Some((inst_len, parsed)) = btst_c_instructionVar58::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var58(parsed)));
        }
        if let Some((inst_len, parsed)) = btst_z_instructionVar59::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var59(parsed)));
        }
        if let Some((inst_len, parsed)) = com_w_instructionVar60::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var60(parsed)));
        }
        if let Some((inst_len, parsed)) = com_b_instructionVar61::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var61(parsed)));
        }
        if let Some((inst_len, parsed)) = cp_w_instructionVar62::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var62(parsed)));
        }
        if let Some((inst_len, parsed)) = cp_b_instructionVar63::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var63(parsed)));
        }
        if let Some((inst_len, parsed)) = cp_w_instructionVar64::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var64(parsed)));
        }
        if let Some((inst_len, parsed)) = cp_b_instructionVar65::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var65(parsed)));
        }
        if let Some((inst_len, parsed)) = cp_w_instructionVar66::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var66(parsed)));
        }
        if let Some((inst_len, parsed)) = cp_b_instructionVar67::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var67(parsed)));
        }
        if let Some((inst_len, parsed)) = cp0_w_instructionVar68::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var68(parsed)));
        }
        if let Some((inst_len, parsed)) = cp0_b_instructionVar69::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var69(parsed)));
        }
        if let Some((inst_len, parsed)) = cpb_w_instructionVar70::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var70(parsed)));
        }
        if let Some((inst_len, parsed)) = cpb_b_instructionVar71::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var71(parsed)));
        }
        if let Some((inst_len, parsed)) = cpb_w_instructionVar72::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var72(parsed)));
        }
        if let Some((inst_len, parsed)) = cpb_b_instructionVar73::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var73(parsed)));
        }
        if let Some((inst_len, parsed)) = cpb_w_instructionVar74::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var74(parsed)));
        }
        if let Some((inst_len, parsed)) = cpb_b_instructionVar75::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var75(parsed)));
        }
        if let Some((inst_len, parsed)) = dec_w_instructionVar76::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var76(parsed)));
        }
        if let Some((inst_len, parsed)) = dec_b_instructionVar77::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var77(parsed)));
        }
        if let Some((inst_len, parsed)) = dec2_w_instructionVar78::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var78(parsed)));
        }
        if let Some((inst_len, parsed)) = dec2_b_instructionVar79::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var79(parsed)));
        }
        if let Some((inst_len, parsed)) = disi_instructionVar80::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var80(parsed)));
        }
        if let Some((inst_len, parsed)) = div_sw_instructionVar81::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var81(parsed)));
        }
        if let Some((inst_len, parsed)) = div_uw_instructionVar82::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var82(parsed)));
        }
        if let Some((inst_len, parsed)) = inc_w_instructionVar83::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var83(parsed)));
        }
        if let Some((inst_len, parsed)) = inc_b_instructionVar84::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var84(parsed)));
        }
        if let Some((inst_len, parsed)) = inc2_w_instructionVar85::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var85(parsed)));
        }
        if let Some((inst_len, parsed)) = inc2_b_instructionVar86::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var86(parsed)));
        }
        if let Some((inst_len, parsed)) = lsr_w_instructionVar87::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var87(parsed)));
        }
        if let Some((inst_len, parsed)) = lsr_b_instructionVar88::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var88(parsed)));
        }
        if let Some((inst_len, parsed)) = lsr_w_instructionVar89::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var89(parsed)));
        }
        if let Some((inst_len, parsed)) = lsr_w_instructionVar90::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var90(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar91::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var91(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_b_instructionVar92::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var92(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_su_instructionVar93::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var93(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_uu_instructionVar94::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var94(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_ss_instructionVar95::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var95(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_su_instructionVar96::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var96(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_us_instructionVar97::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var97(parsed)));
        }
        if let Some((inst_len, parsed)) = mul_uu_instructionVar98::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var98(parsed)));
        }
        if let Some((inst_len, parsed)) = neg_w_instructionVar99::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var99(parsed)));
        }
        if let Some((inst_len, parsed)) = neg_b_instructionVar100::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var100(parsed)));
        }
        if let Some((inst_len, parsed)) = neg_w_instructionVar101::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var101(parsed)));
        }
        if let Some((inst_len, parsed)) = neg_b_instructionVar102::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var102(parsed)));
        }
        if let Some((inst_len, parsed)) = repeat_instructionVar103::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var103(parsed)));
        }
        if let Some((inst_len, parsed)) = rlc_w_instructionVar104::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var104(parsed)));
        }
        if let Some((inst_len, parsed)) = rlc_b_instructionVar105::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var105(parsed)));
        }
        if let Some((inst_len, parsed)) = rlnc_w_instructionVar106::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var106(parsed)));
        }
        if let Some((inst_len, parsed)) = rlnc_b_instructionVar107::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var107(parsed)));
        }
        if let Some((inst_len, parsed)) = rrc_w_instructionVar108::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var108(parsed)));
        }
        if let Some((inst_len, parsed)) = rrc_b_instructionVar109::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var109(parsed)));
        }
        if let Some((inst_len, parsed)) = rrnc_w_instructionVar110::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var110(parsed)));
        }
        if let Some((inst_len, parsed)) = rrnc_b_instructionVar111::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var111(parsed)));
        }
        if let Some((inst_len, parsed)) = rrnc_w_instructionVar112::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var112(parsed)));
        }
        if let Some((inst_len, parsed)) = rrnc_b_instructionVar113::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var113(parsed)));
        }
        if let Some((inst_len, parsed)) = sl_w_instructionVar114::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var114(parsed)));
        }
        if let Some((inst_len, parsed)) = sl_b_instructionVar115::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var115(parsed)));
        }
        if let Some((inst_len, parsed)) = sl_instructionVar116::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var116(parsed)));
        }
        if let Some((inst_len, parsed)) = sl_instructionVar117::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var117(parsed)));
        }
        if let Some((inst_len, parsed)) = tblrdh_w_instructionVar118::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var118(parsed)));
        }
        if let Some((inst_len, parsed)) = tblrdh_b_instructionVar119::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var119(parsed)));
        }
        if let Some((inst_len, parsed)) = tblrdl_w_instructionVar120::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var120(parsed)));
        }
        if let Some((inst_len, parsed)) = tblrdl_b_instructionVar121::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var121(parsed)));
        }
        if let Some((inst_len, parsed)) = tblwth_w_instructionVar122::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var122(parsed)));
        }
        if let Some((inst_len, parsed)) = tblwth_b_instructionVar123::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var123(parsed)));
        }
        if let Some((inst_len, parsed)) = tblwtl_w_instructionVar124::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var124(parsed)));
        }
        if let Some((inst_len, parsed)) = tblwtl_b_instructionVar125::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var125(parsed)));
        }
        if let Some((inst_len, parsed)) = add_w_instructionVar126::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var126(parsed)));
        }
        if let Some((inst_len, parsed)) = add_b_instructionVar127::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var127(parsed)));
        }
        if let Some((inst_len, parsed)) = add_w_instructionVar128::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var128(parsed)));
        }
        if let Some((inst_len, parsed)) = add_b_instructionVar129::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var129(parsed)));
        }
        if let Some((inst_len, parsed)) = pop_instructionVar130::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var130(parsed)));
        }
        if let Some((inst_len, parsed)) = add_w_instructionVar131::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var131(parsed)));
        }
        if let Some((inst_len, parsed)) = add_b_instructionVar132::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var132(parsed)));
        }
        if let Some((inst_len, parsed)) = push_instructionVar133::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var133(parsed)));
        }
        if let Some((inst_len, parsed)) = add_w_instructionVar134::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var134(parsed)));
        }
        if let Some((inst_len, parsed)) = add_b_instructionVar135::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var135(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_w_instructionVar136::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var136(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_b_instructionVar137::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var137(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_w_instructionVar138::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var138(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_b_instructionVar139::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var139(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_w_instructionVar140::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var140(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_b_instructionVar141::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var141(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_w_instructionVar142::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var142(parsed)));
        }
        if let Some((inst_len, parsed)) = addc_b_instructionVar143::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var143(parsed)));
        }
        if let Some((inst_len, parsed)) = and_w_instructionVar144::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var144(parsed)));
        }
        if let Some((inst_len, parsed)) = and_b_instructionVar145::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var145(parsed)));
        }
        if let Some((inst_len, parsed)) = and_w_instructionVar146::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var146(parsed)));
        }
        if let Some((inst_len, parsed)) = and_b_instructionVar147::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var147(parsed)));
        }
        if let Some((inst_len, parsed)) = and_w_instructionVar148::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var148(parsed)));
        }
        if let Some((inst_len, parsed)) = and_b_instructionVar149::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var149(parsed)));
        }
        if let Some((inst_len, parsed)) = and_w_instructionVar150::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var150(parsed)));
        }
        if let Some((inst_len, parsed)) = and_b_instructionVar151::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var151(parsed)));
        }
        if let Some((inst_len, parsed)) = asr_w_instructionVar152::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var152(parsed)));
        }
        if let Some((inst_len, parsed)) = asr_b_instructionVar153::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var153(parsed)));
        }
        if let Some((inst_len, parsed)) = bclr_w_instructionVar154::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var154(parsed)));
        }
        if let Some((inst_len, parsed)) = bclr_b_instructionVar155::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var155(parsed)));
        }
        if let Some((inst_len, parsed)) = bset_w_instructionVar156::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var156(parsed)));
        }
        if let Some((inst_len, parsed)) = bset_b_instructionVar157::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var157(parsed)));
        }
        if let Some((inst_len, parsed)) = btg_w_instructionVar158::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var158(parsed)));
        }
        if let Some((inst_len, parsed)) = btg_b_instructionVar159::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var159(parsed)));
        }
        if let Some((inst_len, parsed)) = btsc_w_instructionVar160::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var160(parsed)));
        }
        if let Some((inst_len, parsed)) = btss_w_instructionVar161::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var161(parsed)));
        }
        if let Some((inst_len, parsed)) = btst_c_instructionVar162::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var162(parsed)));
        }
        if let Some((inst_len, parsed)) = btst_z_instructionVar163::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var163(parsed)));
        }
        if let Some((inst_len, parsed)) = btsts_c_instructionVar164::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var164(parsed)));
        }
        if let Some((inst_len, parsed)) = btsts_z_instructionVar165::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var165(parsed)));
        }
        if let Some((inst_len, parsed)) = call_instructionVar166::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var166(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_w_instructionVar167::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var167(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_w_instructionVar168::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var168(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_b_instructionVar169::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var169(parsed)));
        }
        if let Some((inst_len, parsed)) = clr_b_instructionVar170::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var170(parsed)));
        }
        if let Some((inst_len, parsed)) = com_w_instructionVar171::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var171(parsed)));
        }
        if let Some((inst_len, parsed)) = com_b_instructionVar172::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var172(parsed)));
        }
        if let Some((inst_len, parsed)) = dec_w_instructionVar173::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var173(parsed)));
        }
        if let Some((inst_len, parsed)) = dec_b_instructionVar174::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var174(parsed)));
        }
        if let Some((inst_len, parsed)) = dec2_w_instructionVar175::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var175(parsed)));
        }
        if let Some((inst_len, parsed)) = dec2_b_instructionVar176::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var176(parsed)));
        }
        if let Some((inst_len, parsed)) = goto_instructionVar177::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var177(parsed)));
        }
        if let Some((inst_len, parsed)) = inc_w_instructionVar178::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var178(parsed)));
        }
        if let Some((inst_len, parsed)) = inc_b_instructionVar179::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var179(parsed)));
        }
        if let Some((inst_len, parsed)) = inc2_w_instructionVar180::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var180(parsed)));
        }
        if let Some((inst_len, parsed)) = inc2_b_instructionVar181::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var181(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_w_instructionVar182::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var182(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_b_instructionVar183::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var183(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_w_instructionVar184::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var184(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_b_instructionVar185::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var185(parsed)));
        }
        if let Some((inst_len, parsed)) = lsr_w_instructionVar186::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var186(parsed)));
        }
        if let Some((inst_len, parsed)) = lsr_b_instructionVar187::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var187(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar188::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var188(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_b_instructionVar189::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var189(parsed)));
        }
        if let Some((inst_len, parsed)) = pop_instructionVar190::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var190(parsed)));
        }
        if let Some((inst_len, parsed)) = push_instructionVar191::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var191(parsed)));
        }
        if let Some((inst_len, parsed)) = retlw_w_instructionVar192::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var192(parsed)));
        }
        if let Some((inst_len, parsed)) = retlw_b_instructionVar193::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var193(parsed)));
        }
        if let Some((inst_len, parsed)) = rlc_w_instructionVar194::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var194(parsed)));
        }
        if let Some((inst_len, parsed)) = rlc_b_instructionVar195::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var195(parsed)));
        }
        if let Some((inst_len, parsed)) = rlnc_w_instructionVar196::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var196(parsed)));
        }
        if let Some((inst_len, parsed)) = rlnc_b_instructionVar197::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var197(parsed)));
        }
        if let Some((inst_len, parsed)) = rrc_w_instructionVar198::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var198(parsed)));
        }
        if let Some((inst_len, parsed)) = rrc_b_instructionVar199::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var199(parsed)));
        }
        if let Some((inst_len, parsed)) = setm_w_instructionVar200::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var200(parsed)));
        }
        if let Some((inst_len, parsed)) = setm_b_instructionVar201::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var201(parsed)));
        }
        if let Some((inst_len, parsed)) = sl_w_instructionVar202::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var202(parsed)));
        }
        if let Some((inst_len, parsed)) = sl_b_instructionVar203::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var203(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_w_instructionVar204::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var204(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_b_instructionVar205::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var205(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_w_instructionVar206::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var206(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_b_instructionVar207::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var207(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_w_instructionVar208::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var208(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_b_instructionVar209::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var209(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_w_instructionVar210::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var210(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_b_instructionVar211::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var211(parsed)));
        }
        if let Some((inst_len, parsed)) = subbr_w_instructionVar212::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var212(parsed)));
        }
        if let Some((inst_len, parsed)) = subbr_b_instructionVar213::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var213(parsed)));
        }
        if let Some((inst_len, parsed)) = subr_w_instructionVar214::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var214(parsed)));
        }
        if let Some((inst_len, parsed)) = subr_b_instructionVar215::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var215(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_w_instructionVar216::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var216(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_b_instructionVar217::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var217(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_w_instructionVar218::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var218(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_b_instructionVar219::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var219(parsed)));
        }
        if let Some((inst_len, parsed)) = bclr_w_instructionVar220::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var220(parsed)));
        }
        if let Some((inst_len, parsed)) = bra_instructionVar221::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var221(parsed)));
        }
        if let Some((inst_len, parsed)) = bset_w_instructionVar222::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var222(parsed)));
        }
        if let Some((inst_len, parsed)) = btg_instructionVar223::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var223(parsed)));
        }
        if let Some((inst_len, parsed)) = btsc_instructionVar224::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var224(parsed)));
        }
        if let Some((inst_len, parsed)) = btss_instructionVar225::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var225(parsed)));
        }
        if let Some((inst_len, parsed)) = btst_w_instructionVar226::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var226(parsed)));
        }
        if let Some((inst_len, parsed)) = btsts_instructionVar227::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var227(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_w_instructionVar228::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var228(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_b_instructionVar229::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var229(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_w_instructionVar230::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var230(parsed)));
        }
        if let Some((inst_len, parsed)) = ior_b_instructionVar231::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var231(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar232::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var232(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_b_instructionVar233::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var233(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar234::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var234(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_b_instructionVar235::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var235(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar236::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var236(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_b_instructionVar237::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var237(parsed)));
        }
        if let Some((inst_len, parsed)) = nop_instructionVar238::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var238(parsed)));
        }
        if let Some((inst_len, parsed)) = nopr_instructionVar239::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var239(parsed)));
        }
        if let Some((inst_len, parsed)) = rcall_instructionVar240::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var240(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_w_instructionVar241::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var241(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_b_instructionVar242::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var242(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_w_instructionVar243::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var243(parsed)));
        }
        if let Some((inst_len, parsed)) = sub_b_instructionVar244::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var244(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_w_instructionVar245::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var245(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_b_instructionVar246::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var246(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_w_instructionVar247::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var247(parsed)));
        }
        if let Some((inst_len, parsed)) = subb_b_instructionVar248::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var248(parsed)));
        }
        if let Some((inst_len, parsed)) = subbr_w_instructionVar249::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var249(parsed)));
        }
        if let Some((inst_len, parsed)) = subbr_b_instructionVar250::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var250(parsed)));
        }
        if let Some((inst_len, parsed)) = subbr_w_instructionVar251::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var251(parsed)));
        }
        if let Some((inst_len, parsed)) = subbr_b_instructionVar252::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var252(parsed)));
        }
        if let Some((inst_len, parsed)) = subr_w_instructionVar253::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var253(parsed)));
        }
        if let Some((inst_len, parsed)) = subr_b_instructionVar254::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var254(parsed)));
        }
        if let Some((inst_len, parsed)) = subr_w_instructionVar255::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var255(parsed)));
        }
        if let Some((inst_len, parsed)) = subr_b_instructionVar256::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var256(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_w_instructionVar257::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var257(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_b_instructionVar258::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var258(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_w_instructionVar259::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var259(parsed)));
        }
        if let Some((inst_len, parsed)) = xor_b_instructionVar260::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var260(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar261::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var261(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar262::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var262(parsed)));
        }
        if let Some((inst_len, parsed)) = bra_instructionVar263::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var263(parsed)));
        }
        if let Some((inst_len, parsed)) = bra_instructionVar264::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var264(parsed)));
        }
        if let Some((inst_len, parsed)) = mov_w_instructionVar265::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var265(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar266::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var266(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar267::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var267(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar268::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var268(parsed)));
        }
        if let Some((inst_len, parsed)) = instructionVar269::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var269(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:424:1, end:424:5))"]
#[derive(Clone, Debug)]
struct Ws_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Ws_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:427:1, end:427:5))"]
#[derive(Clone, Debug)]
struct Ws_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Ws_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:430:1, end:430:5))"]
#[derive(Clone, Debug)]
struct Ws_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Ws_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:433:1, end:433:5))"]
#[derive(Clone, Debug)]
struct Ws_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Ws_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:436:1, end:436:5))"]
#[derive(Clone, Debug)]
struct Ws_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Ws_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:439:1, end:439:5))"]
#[derive(Clone, Debug)]
struct Ws_tVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Ws_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWs_t {
    Var0(Ws_tVar0),
    Var1(Ws_tVar1),
    Var2(Ws_tVar2),
    Var3(Ws_tVar3),
    Var4(Ws_tVar4),
    Var5(Ws_tVar5),
}
impl TableWs_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Ws_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Ws_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Ws_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Ws_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Ws_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Ws_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:444:1, end:444:6))"]
#[derive(Clone, Debug)]
struct Wsd_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsd_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_1_Dreg = token_parser.TokenFieldTOK_3_1_Dreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:447:1, end:447:6))"]
#[derive(Clone, Debug)]
struct Wsd_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsd_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:450:1, end:450:6))"]
#[derive(Clone, Debug)]
struct Wsd_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsd_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:453:1, end:453:6))"]
#[derive(Clone, Debug)]
struct Wsd_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsd_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:456:1, end:456:6))"]
#[derive(Clone, Debug)]
struct Wsd_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsd_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:459:1, end:459:6))"]
#[derive(Clone, Debug)]
struct Wsd_tVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsd_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWsd_t {
    Var0(Wsd_tVar0),
    Var1(Wsd_tVar1),
    Var2(Wsd_tVar2),
    Var3(Wsd_tVar3),
    Var4(Wsd_tVar4),
    Var5(Wsd_tVar5),
}
impl TableWsd_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wsd_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsd_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsd_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsd_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsd_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsd_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:464:1, end:464:7))"]
#[derive(Clone, Debug)]
struct Wsnd_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsnd_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_0().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_1_Dreg = token_parser.TokenFieldTOK_3_1_Dreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:467:1, end:467:7))"]
#[derive(Clone, Debug)]
struct Wsnd_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsnd_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:470:1, end:470:7))"]
#[derive(Clone, Debug)]
struct Wsnd_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsnd_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:473:1, end:473:7))"]
#[derive(Clone, Debug)]
struct Wsnd_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsnd_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:476:1, end:476:7))"]
#[derive(Clone, Debug)]
struct Wsnd_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsnd_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:479:1, end:479:7))"]
#[derive(Clone, Debug)]
struct Wsnd_tVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsnd_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWsnd_t {
    Var0(Wsnd_tVar0),
    Var1(Wsnd_tVar1),
    Var2(Wsnd_tVar2),
    Var3(Wsnd_tVar3),
    Var4(Wsnd_tVar4),
    Var5(Wsnd_tVar5),
}
impl TableWsnd_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wsnd_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsnd_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsnd_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsnd_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsnd_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsnd_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:484:1, end:484:6))"]
#[derive(Clone, Debug)]
struct Wsb_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsb_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:487:1, end:487:6))"]
#[derive(Clone, Debug)]
struct Wsb_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsb_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:490:1, end:490:6))"]
#[derive(Clone, Debug)]
struct Wsb_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsb_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:493:1, end:493:6))"]
#[derive(Clone, Debug)]
struct Wsb_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsb_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:496:1, end:496:6))"]
#[derive(Clone, Debug)]
struct Wsb_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsb_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:499:1, end:499:6))"]
#[derive(Clone, Debug)]
struct Wsb_tVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsb_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWsb_t {
    Var0(Wsb_tVar0),
    Var1(Wsb_tVar1),
    Var2(Wsb_tVar2),
    Var3(Wsb_tVar3),
    Var4(Wsb_tVar4),
    Var5(Wsb_tVar5),
}
impl TableWsb_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wsb_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsb_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsb_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsb_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsb_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsb_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:504:1, end:504:9))"]
#[derive(Clone, Debug)]
struct Wsbyte_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_0_Breg = token_parser.TokenFieldTOK_3_0_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:507:1, end:507:9))"]
#[derive(Clone, Debug)]
struct Wsbyte_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbyte_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:510:1, end:510:9))"]
#[derive(Clone, Debug)]
struct Wsbyte_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbyte_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:513:1, end:513:9))"]
#[derive(Clone, Debug)]
struct Wsbyte_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbyte_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:516:1, end:516:9))"]
#[derive(Clone, Debug)]
struct Wsbyte_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbyte_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:519:1, end:519:9))"]
#[derive(Clone, Debug)]
struct Wsbyte_tVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbyte_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWsbyte_t {
    Var0(Wsbyte_tVar0),
    Var1(Wsbyte_tVar1),
    Var2(Wsbyte_tVar2),
    Var3(Wsbyte_tVar3),
    Var4(Wsbyte_tVar4),
    Var5(Wsbyte_tVar5),
}
impl TableWsbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wsbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbyte_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbyte_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbyte_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbyte_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbyte_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:524:1, end:524:10))"]
#[derive(Clone, Debug)]
struct Wsbbyte_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_0_Breg = token_parser.TokenFieldTOK_3_0_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:527:1, end:527:10))"]
#[derive(Clone, Debug)]
struct Wsbbyte_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbbyte_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:530:1, end:530:10))"]
#[derive(Clone, Debug)]
struct Wsbbyte_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbbyte_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:533:1, end:533:10))"]
#[derive(Clone, Debug)]
struct Wsbbyte_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbbyte_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:536:1, end:536:10))"]
#[derive(Clone, Debug)]
struct Wsbbyte_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbbyte_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:539:1, end:539:10))"]
#[derive(Clone, Debug)]
struct Wsbbyte_tVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wsbbyte_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWsbbyte_t {
    Var0(Wsbbyte_tVar0),
    Var1(Wsbbyte_tVar1),
    Var2(Wsbbyte_tVar2),
    Var3(Wsbbyte_tVar3),
    Var4(Wsbbyte_tVar4),
    Var5(Wsbbyte_tVar5),
}
impl TableWsbbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wsbbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbbyte_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbbyte_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbbyte_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbbyte_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wsbbyte_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:544:1, end:544:5))"]
#[derive(Clone, Debug)]
struct Wd_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wd_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:547:1, end:547:5))"]
#[derive(Clone, Debug)]
struct Wd_tVar1 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wd_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:550:1, end:550:5))"]
#[derive(Clone, Debug)]
struct Wd_tVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wd_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:553:1, end:553:5))"]
#[derive(Clone, Debug)]
struct Wd_tVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wd_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:556:1, end:556:5))"]
#[derive(Clone, Debug)]
struct Wd_tVar4 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wd_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:559:1, end:559:5))"]
#[derive(Clone, Debug)]
struct Wd_tVar5 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wd_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWd_t {
    Var0(Wd_tVar0),
    Var1(Wd_tVar1),
    Var2(Wd_tVar2),
    Var3(Wd_tVar3),
    Var4(Wd_tVar4),
    Var5(Wd_tVar5),
}
impl TableWd_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wd_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wd_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wd_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wd_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wd_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wd_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:564:1, end:564:6))"]
#[derive(Clone, Debug)]
struct Wdd_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdd_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldOP_7().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_10_8_Dreg = token_parser.TokenFieldTOK_10_8_Dreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:567:1, end:567:6))"]
#[derive(Clone, Debug)]
struct Wdd_tVar1 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdd_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:570:1, end:570:6))"]
#[derive(Clone, Debug)]
struct Wdd_tVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdd_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:573:1, end:573:6))"]
#[derive(Clone, Debug)]
struct Wdd_tVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdd_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:576:1, end:576:6))"]
#[derive(Clone, Debug)]
struct Wdd_tVar4 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdd_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:579:1, end:579:6))"]
#[derive(Clone, Debug)]
struct Wdd_tVar5 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdd_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWdd_t {
    Var0(Wdd_tVar0),
    Var1(Wdd_tVar1),
    Var2(Wdd_tVar2),
    Var3(Wdd_tVar3),
    Var4(Wdd_tVar4),
    Var5(Wdd_tVar5),
}
impl TableWdd_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wdd_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdd_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdd_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdd_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdd_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdd_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:584:1, end:584:9))"]
#[derive(Clone, Debug)]
struct Wdbyte_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_10_7_Breg = token_parser.TokenFieldTOK_10_7_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:587:1, end:587:9))"]
#[derive(Clone, Debug)]
struct Wdbyte_tVar1 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdbyte_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:590:1, end:590:9))"]
#[derive(Clone, Debug)]
struct Wdbyte_tVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdbyte_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:593:1, end:593:9))"]
#[derive(Clone, Debug)]
struct Wdbyte_tVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdbyte_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:596:1, end:596:9))"]
#[derive(Clone, Debug)]
struct Wdbyte_tVar4 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdbyte_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:599:1, end:599:9))"]
#[derive(Clone, Debug)]
struct Wdbyte_tVar5 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdbyte_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWdbyte_t {
    Var0(Wdbyte_tVar0),
    Var1(Wdbyte_tVar1),
    Var2(Wdbyte_tVar2),
    Var3(Wdbyte_tVar3),
    Var4(Wdbyte_tVar4),
    Var5(Wdbyte_tVar5),
}
impl TableWdbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wdbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdbyte_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdbyte_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdbyte_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdbyte_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            Wdbyte_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:604:1, end:604:6))"]
#[derive(Clone, Debug)]
struct movWsVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:607:1, end:607:6))"]
#[derive(Clone, Debug)]
struct movWsVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:610:1, end:610:6))"]
#[derive(Clone, Debug)]
struct movWsVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:613:1, end:613:6))"]
#[derive(Clone, Debug)]
struct movWsVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:616:1, end:616:6))"]
#[derive(Clone, Debug)]
struct movWsVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:619:1, end:619:6))"]
#[derive(Clone, Debug)]
struct movWsVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:622:1, end:622:6))"]
#[derive(Clone, Debug)]
struct movWsVar6 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWsVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 6i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:625:1, end:625:6))"]
#[derive(Clone, Debug)]
struct movWsVar7 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWsVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 7i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TablemovWs {
    Var0(movWsVar0),
    Var1(movWsVar1),
    Var2(movWsVar2),
    Var3(movWsVar3),
    Var4(movWsVar4),
    Var5(movWsVar5),
    Var6(movWsVar6),
    Var7(movWsVar7),
}
impl TablemovWs {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            movWsVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:629:1, end:629:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsbyteVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_0_Breg = token_parser.TokenFieldTOK_3_0_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:632:1, end:632:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsbyteVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:635:1, end:635:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsbyteVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:638:1, end:638:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsbyteVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:641:1, end:641:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsbyteVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:644:1, end:644:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl movWsbyteVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:647:1, end:647:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar6 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWsbyteVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 6i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:650:1, end:650:10))"]
#[derive(Clone, Debug)]
struct movWsbyteVar7 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWsbyteVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 7i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TablemovWsbyte {
    Var0(movWsbyteVar0),
    Var1(movWsbyteVar1),
    Var2(movWsbyteVar2),
    Var3(movWsbyteVar3),
    Var4(movWsbyteVar4),
    Var5(movWsbyteVar5),
    Var6(movWsbyteVar6),
    Var7(movWsbyteVar7),
}
impl TablemovWsbyte {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            movWsbyteVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsbyteVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsbyteVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsbyteVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsbyteVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsbyteVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsbyteVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWsbyteVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:655:1, end:655:6))"]
#[derive(Clone, Debug)]
struct movWdVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:658:1, end:658:6))"]
#[derive(Clone, Debug)]
struct movWdVar1 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:661:1, end:661:6))"]
#[derive(Clone, Debug)]
struct movWdVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:664:1, end:664:6))"]
#[derive(Clone, Debug)]
struct movWdVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:667:1, end:667:6))"]
#[derive(Clone, Debug)]
struct movWdVar4 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:670:1, end:670:6))"]
#[derive(Clone, Debug)]
struct movWdVar5 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:673:1, end:673:6))"]
#[derive(Clone, Debug)]
struct movWdVar6 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWdVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 6i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_10_7_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:676:1, end:676:6))"]
#[derive(Clone, Debug)]
struct movWdVar7 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWdVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 7i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_10_7_Wreg,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TablemovWd {
    Var0(movWdVar0),
    Var1(movWdVar1),
    Var2(movWdVar2),
    Var3(movWdVar3),
    Var4(movWdVar4),
    Var5(movWdVar5),
    Var6(movWdVar6),
    Var7(movWdVar7),
}
impl TablemovWd {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            movWdVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:681:1, end:681:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdbyteVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_10_7_Breg = token_parser.TokenFieldTOK_10_7_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:684:1, end:684:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar1 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdbyteVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:687:1, end:687:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdbyteVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:690:1, end:690:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdbyteVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:693:1, end:693:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar4 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdbyteVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:696:1, end:696:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar5 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl movWdbyteVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:699:1, end:699:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar6 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWdbyteVar6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 6i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_10_7_Wreg,
            },
        ))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:702:1, end:702:10))"]
#[derive(Clone, Debug)]
struct movWdbyteVar7 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl movWdbyteVar7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("+"),
            self.TOK_18_15_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 7i128 {
            return None;
        }
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_Wreg,
                TOK_10_7_Wreg,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TablemovWdbyte {
    Var0(movWdbyteVar0),
    Var1(movWdbyteVar1),
    Var2(movWdbyteVar2),
    Var3(movWdbyteVar3),
    Var4(movWdbyteVar4),
    Var5(movWdbyteVar5),
    Var6(movWdbyteVar6),
    Var7(movWdbyteVar7),
}
impl TablemovWdbyte {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            movWdbyteVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdbyteVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdbyteVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdbyteVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdbyteVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdbyteVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdbyteVar6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            movWdbyteVar7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:709:1, end:709:5))"]
#[derive(Clone, Debug)]
struct Wn_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wn_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWn_t {
    Var0(Wn_tVar0),
}
impl TableWn_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wn_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:712:1, end:712:9))"]
#[derive(Clone, Debug)]
struct Wnbyte_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wnbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_0_Breg = token_parser.TokenFieldTOK_3_0_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnbyte_t {
    Var0(Wnbyte_tVar0),
}
impl TableWnbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wnbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:715:1, end:715:6))"]
#[derive(Clone, Debug)]
struct Wnd_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wnd_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnd_t {
    Var0(Wnd_tVar0),
}
impl TableWnd_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wnd_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:718:1, end:718:7))"]
#[derive(Clone, Debug)]
struct Wndd_tVar0 {
    TOK_10_8_Dregn: TokenField_TOK_10_8_Dregn,
}
impl Wndd_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_8_Dregn.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_10_8_Dreg = token_parser.TokenFieldTOK_10_8_Dreg();
        let TOK_10_8_Dregn = token_parser.TokenFieldTOK_10_8_Dregn();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_8_Dregn }))
    }
}
#[derive(Clone, Debug)]
enum TableWndd_t {
    Var0(Wndd_tVar0),
}
impl TableWndd_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wndd_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:721:1, end:721:7))"]
#[derive(Clone, Debug)]
struct Wnda_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wnda_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnda_t {
    Var0(Wnda_tVar0),
}
impl TableWnda_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wnda_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:724:1, end:724:7))"]
#[derive(Clone, Debug)]
struct Wnbf_tVar0 {
    TOK_11_8_Wreg: TokenField_TOK_11_8_Wreg,
}
impl Wnbf_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_11_8_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_11_8_Wreg = token_parser.TokenFieldTOK_11_8_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_11_8_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnbf_t {
    Var0(Wnbf_tVar0),
}
impl TableWnbf_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wnbf_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:727:1, end:727:7))"]
#[derive(Clone, Debug)]
struct Wdpp_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wdpp_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWdpp_t {
    Var0(Wdpp_tVar0),
}
impl TableWdpp_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wdpp_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:730:1, end:730:11))"]
#[derive(Clone, Debug)]
struct Wndabyte_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl Wndabyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_10_7_Breg = token_parser.TokenFieldTOK_10_7_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWndabyte_t {
    Var0(Wndabyte_tVar0),
}
impl TableWndabyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = Wndabyte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:733:1, end:733:7))"]
#[derive(Clone, Debug)]
struct Wndb_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wndb_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWndb_t {
    Var0(Wndb_tVar0),
}
impl TableWndb_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wndb_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:736:1, end:736:10))"]
#[derive(Clone, Debug)]
struct Wndbyte_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wndbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_0_Breg = token_parser.TokenFieldTOK_3_0_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWndbyte_t {
    Var0(Wndbyte_tVar0),
}
impl TableWndbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wndbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:739:1, end:739:6))"]
#[derive(Clone, Debug)]
struct Wns_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wns_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWns_t {
    Var0(Wns_tVar0),
}
impl TableWns_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wns_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:742:1, end:742:10))"]
#[derive(Clone, Debug)]
struct Wnsbyte_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wnsbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_0_Breg = token_parser.TokenFieldTOK_3_0_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnsbyte_t {
    Var0(Wnsbyte_tVar0),
}
impl TableWnsbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wnsbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:745:1, end:745:5))"]
#[derive(Clone, Debug)]
struct Wb_tVar0 {
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl Wb_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_18_15_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_18_15_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWb_t {
    Var0(Wb_tVar0),
}
impl TableWb_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wb_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:748:1, end:748:9))"]
#[derive(Clone, Debug)]
struct Wbbyte_tVar0 {
    TOK_18_15_Wreg: TokenField_TOK_18_15_Wreg,
}
impl Wbbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_18_15_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_18_15_Wreg = token_parser.TokenFieldTOK_18_15_Wreg();
        let TOK_18_15_Breg = token_parser.TokenFieldTOK_18_15_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_18_15_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWbbyte_t {
    Var0(Wbbyte_tVar0),
}
impl TableWbbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wbbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:751:1, end:751:6))"]
#[derive(Clone, Debug)]
struct Wbb_tVar0 {
    TOK_14_11_Wreg: TokenField_TOK_14_11_Wreg,
}
impl Wbb_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_14_11_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_14_11_Wreg = token_parser.TokenFieldTOK_14_11_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_14_11_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWbb_t {
    Var0(Wbb_tVar0),
}
impl TableWbb_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wbb_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:754:1, end:754:7))"]
#[derive(Clone, Debug)]
struct Wbds_tVar0 {
    TOK_14_12_Dregn: TokenField_TOK_14_12_Dregn,
}
impl Wbds_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_14_12_Dregn.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_14_12_Dreg = token_parser.TokenFieldTOK_14_12_Dreg();
        let TOK_14_12_Dregn = token_parser.TokenFieldTOK_14_12_Dregn();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_14_12_Dregn }))
    }
}
#[derive(Clone, Debug)]
enum TableWbds_t {
    Var0(Wbds_tVar0),
}
impl TableWbds_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wbds_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:757:1, end:757:10))"]
#[derive(Clone, Debug)]
struct Wbbbyte_tVar0 {
    TOK_14_11_Wreg: TokenField_TOK_14_11_Wreg,
}
impl Wbbbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_14_11_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_14_11_Wreg = token_parser.TokenFieldTOK_14_11_Wreg();
        let TOK_14_11_Breg = token_parser.TokenFieldTOK_14_11_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_14_11_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWbbbyte_t {
    Var0(Wbbbyte_tVar0),
}
impl TableWbbbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wbbbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:760:1, end:760:6))"]
#[derive(Clone, Debug)]
struct Wnb_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wnb_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnb_t {
    Var0(Wnb_tVar0),
}
impl TableWnb_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wnb_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:763:1, end:763:10))"]
#[derive(Clone, Debug)]
struct Wnbbyte_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl Wnbbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        let TOK_3_0_Breg = token_parser.TokenFieldTOK_3_0_Breg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnbbyte_t {
    Var0(Wnbbyte_tVar0),
}
impl TableWnbbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wnbbyte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:766:1, end:766:6))"]
#[derive(Clone, Debug)]
struct Wbd_tVar0 {
    TOK_14_11_Wreg: TokenField_TOK_14_11_Wreg,
}
impl Wbd_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_14_11_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_14_11_Wreg = token_parser.TokenFieldTOK_14_11_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_14_11_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWbd_t {
    Var0(Wbd_tVar0),
}
impl TableWbd_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Wbd_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:769:1, end:769:7))"]
#[derive(Clone, Debug)]
struct WREG_tVar0 {}
impl WREG_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal(",wreg")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:772:1, end:772:7))"]
#[derive(Clone, Debug)]
struct WREG_tVar1 {}
impl WREG_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 1i128 {
            return None;
        }
        let TOK_f13 = token_parser.TokenFieldTOK_f13();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWREG_t {
    Var0(WREG_tVar0),
    Var1(WREG_tVar1),
}
impl TableWREG_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WREG_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WREG_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:775:1, end:775:11))"]
#[derive(Clone, Debug)]
struct WREGbyte_tVar0 {}
impl WREGbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal(",wreg")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:778:1, end:778:11))"]
#[derive(Clone, Debug)]
struct WREGbyte_tVar1 {}
impl WREGbyte_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 1i128 {
            return None;
        }
        let TOK_f13 = token_parser.TokenFieldTOK_f13();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWREGbyte_t {
    Var0(WREGbyte_tVar0),
    Var1(WREGbyte_tVar1),
}
impl TableWREGbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WREGbyte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) = WREGbyte_tVar1::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:781:1, end:781:8))"]
#[derive(Clone, Debug)]
struct WREGb_tVar0 {}
impl WREGb_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("wreg")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWREGb_t {
    Var0(WREGb_tVar0),
}
impl TableWREGb_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WREGb_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:784:1, end:784:12))"]
#[derive(Clone, Debug)]
struct WREGbbyte_tVar0 {}
impl WREGbbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("wreg")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWREGbbyte_t {
    Var0(WREGbbyte_tVar0),
}
impl TableWREGbbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WREGbbyte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:787:1, end:787:10))"]
#[derive(Clone, Debug)]
struct WREG_W0_tVar0 {}
impl WREG_W0_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("wreg")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWREG_W0_t {
    Var0(WREG_W0_tVar0),
}
impl TableWREG_W0_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WREG_W0_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:790:1, end:790:14))"]
#[derive(Clone, Debug)]
struct WREG_W0byte_tVar0 {}
impl WREG_W0byte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Literal("wreg")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWREG_W0byte_t {
    Var0(WREG_W0byte_tVar0),
}
impl TableWREG_W0byte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WREG_W0byte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:793:1, end:793:7))"]
#[derive(Clone, Debug)]
struct f13b_tVar0 {
    TOK_f13: TokenField_TOK_f13,
}
impl f13b_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_f13.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 1i128 {
            return None;
        }
        let TOK_f13 = token_parser.TokenFieldTOK_f13();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_f13 }))
    }
}
#[derive(Clone, Debug)]
enum Tablef13b_t {
    Var0(f13b_tVar0),
}
impl Tablef13b_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            f13b_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:796:1, end:796:11))"]
#[derive(Clone, Debug)]
struct f13bbyte_tVar0 {
    TOK_f13: TokenField_TOK_f13,
}
impl f13bbyte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_f13.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_D().disassembly() != 1i128 {
            return None;
        }
        let TOK_f13 = token_parser.TokenFieldTOK_f13();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_f13 }))
    }
}
#[derive(Clone, Debug)]
enum Tablef13bbyte_t {
    Var0(f13bbyte_tVar0),
}
impl Tablef13bbyte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = f13bbyte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:799:1, end:799:6))"]
#[derive(Clone, Debug)]
struct f12_tVar0 {
    TOK_f12: TokenField_TOK_f12,
}
impl f12_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_val: i128 = 0;
        calc_val = u32::try_from(1i128)
            .ok()
            .map(|shl| self.TOK_f12.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_val)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_val: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_val = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldTOK_f12()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let TOK_f12 = token_parser.TokenFieldTOK_f12();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_f12 }))
    }
}
#[derive(Clone, Debug)]
enum Tablef12_t {
    Var0(f12_tVar0),
}
impl Tablef12_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            f12_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:802:1, end:802:6))"]
#[derive(Clone, Debug)]
struct f13_tVar0 {
    TOK_f13: TokenField_TOK_f13,
}
impl f13_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_f13.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let TOK_f13 = token_parser.TokenFieldTOK_f13();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_f13 }))
    }
}
#[derive(Clone, Debug)]
enum Tablef13_t {
    Var0(f13_tVar0),
}
impl Tablef13_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            f13_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:805:1, end:805:10))"]
#[derive(Clone, Debug)]
struct f13byte_tVar0 {
    TOK_f13: TokenField_TOK_f13,
}
impl f13byte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_f13.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let TOK_f13 = token_parser.TokenFieldTOK_f13();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_f13 }))
    }
}
#[derive(Clone, Debug)]
enum Tablef13byte_t {
    Var0(f13byte_tVar0),
}
impl Tablef13byte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            f13byte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:808:1, end:808:6))"]
#[derive(Clone, Debug)]
struct f15_tVar0 {
    TOK_f15: TokenField_TOK_f15,
}
impl f15_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_addr: i128 = 0;
        calc_addr = u32::try_from(1i128)
            .ok()
            .map(|shl| self.TOK_f15.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_addr)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_addr: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_addr = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldTOK_f15()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let TOK_f15 = token_parser.TokenFieldTOK_f15();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_f15 }))
    }
}
#[derive(Clone, Debug)]
enum Tablef15_t {
    Var0(f15_tVar0),
}
impl Tablef15_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            f15_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:811:1, end:811:7))"]
#[derive(Clone, Debug)]
struct f15b_tVar0 {
    TOK_f15b: TokenField_TOK_f15b,
}
impl f15b_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_addr: i128 = 0;
        calc_addr = u32::try_from(1i128)
            .ok()
            .map(|shl| self.TOK_f15b.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_addr)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_addr: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_addr = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldTOK_f15b()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let TOK_f15b = token_parser.TokenFieldTOK_f15b();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_f15b }))
    }
}
#[derive(Clone, Debug)]
enum Tablef15b_t {
    Var0(f15b_tVar0),
}
impl Tablef15b_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            f15b_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:814:1, end:814:5))"]
#[derive(Clone, Debug)]
struct k3_tVar0 {
    TOK_k3: TokenField_TOK_k3,
}
impl k3_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k3.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_k3 = token_parser.TokenFieldTOK_k3();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k3 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek3_t {
    Var0(k3_tVar0),
}
impl Tablek3_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k3_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:817:1, end:817:5))"]
#[derive(Clone, Debug)]
struct k4_tVar0 {
    TOK_k4: TokenField_TOK_k4,
}
impl k4_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k4.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_k4 = token_parser.TokenFieldTOK_k4();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k4 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek4_t {
    Var0(k4_tVar0),
}
impl Tablek4_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k4_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:820:1, end:820:3))"]
#[derive(Clone, Debug)]
struct k5Var0 {
    TOK_k5: TokenField_TOK_k5,
}
impl k5Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k5.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_k5 = token_parser.TokenFieldTOK_k5();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k5 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek5 {
    Var0(k5Var0),
}
impl Tablek5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k5Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:823:1, end:823:5))"]
#[derive(Clone, Debug)]
struct k5_tVar0 {
    TOK_k5: TokenField_TOK_k5,
}
impl k5_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k5.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let TOK_k5 = token_parser.TokenFieldTOK_k5();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k5 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek5_t {
    Var0(k5_tVar0),
}
impl Tablek5_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k5_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:826:1, end:826:9))"]
#[derive(Clone, Debug)]
struct k5byte_tVar0 {
    TOK_k5: TokenField_TOK_k5,
}
impl k5byte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k5.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        let TOK_k5 = token_parser.TokenFieldTOK_k5();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k5 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek5byte_t {
    Var0(k5byte_tVar0),
}
impl Tablek5byte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k5byte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:829:1, end:829:9))"]
#[derive(Clone, Debug)]
struct k5_B10_tVar0 {
    TOK_k5: TokenField_TOK_k5,
}
impl k5_B10_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k5.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_Bb().disassembly() != 0i128 {
            return None;
        }
        let TOK_k5 = token_parser.TokenFieldTOK_k5();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k5 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek5_B10_t {
    Var0(k5_B10_tVar0),
}
impl Tablek5_B10_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k5_B10_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:832:1, end:832:13))"]
#[derive(Clone, Debug)]
struct k5byte_B10_tVar0 {
    TOK_k5: TokenField_TOK_k5,
}
impl k5byte_B10_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k5.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_Bb().disassembly() != 1i128 {
            return None;
        }
        let TOK_k5 = token_parser.TokenFieldTOK_k5();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k5 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek5byte_B10_t {
    Var0(k5byte_B10_tVar0),
}
impl Tablek5byte_B10_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = k5byte_B10_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:836:1, end:836:6))"]
#[derive(Clone, Debug)]
struct k10_tVar0 {
    TOK_k10: TokenField_TOK_k10,
}
impl k10_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k10.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 0i128 {
            return None;
        }
        let TOK_k10 = token_parser.TokenFieldTOK_k10();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k10 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek10_t {
    Var0(k10_tVar0),
}
impl Tablek10_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k10_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:839:1, end:839:10))"]
#[derive(Clone, Debug)]
struct k10byte_tVar0 {
    TOK_k10: TokenField_TOK_k10,
}
impl k10byte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k10.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_B().disassembly() != 1i128 {
            return None;
        }
        if token_parser.TokenFieldTOK_13_12_xx().disassembly() != 0i128 {
            return None;
        }
        let TOK_k10 = token_parser.TokenFieldTOK_k10();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k10 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek10byte_t {
    Var0(k10byte_tVar0),
}
impl Tablek10byte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k10byte_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:842:1, end:842:9))"]
#[derive(Clone, Debug)]
struct k13_12_tVar0 {
    TOK_13_12_kk: TokenField_TOK_13_12_kk,
}
impl k13_12_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_13_12_kk.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_13_12_kk = token_parser.TokenFieldTOK_13_12_kk();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_13_12_kk }))
    }
}
#[derive(Clone, Debug)]
enum Tablek13_12_t {
    Var0(k13_12_tVar0),
}
impl Tablek13_12_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k13_12_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:845:1, end:845:6))"]
#[derive(Clone, Debug)]
struct k14_tVar0 {
    TOK_k14: TokenField_TOK_k14,
}
impl k14_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k14.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_k14 = token_parser.TokenFieldTOK_k14();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k14 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek14_t {
    Var0(k14_tVar0),
}
impl Tablek14_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k14_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:848:1, end:848:6))"]
#[derive(Clone, Debug)]
struct k15_tVar0 {
    TOK_k15: TokenField_TOK_k15,
}
impl k15_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k15.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_k15 = token_parser.TokenFieldTOK_k15();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k15 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek15_t {
    Var0(k15_tVar0),
}
impl Tablek15_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k15_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:851:1, end:851:6))"]
#[derive(Clone, Debug)]
struct k16_tVar0 {
    TOK_k16: TokenField_TOK_k16,
}
impl k16_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_k16.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_k16 = token_parser.TokenFieldTOK_k16();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_k16 }))
    }
}
#[derive(Clone, Debug)]
enum Tablek16_t {
    Var0(k16_tVar0),
}
impl Tablek16_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            k16_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:854:1, end:854:7))"]
#[derive(Clone, Debug)]
struct bit4_tVar0 {
    TOK_b1: TokenField_TOK_b1,
    TOK_b3: TokenField_TOK_b3,
}
impl bit4_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_bit4: i128 = 0;
        calc_bit4 = (u32::try_from(3i128)
            .ok()
            .map(|shl| self.TOK_b1.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | self.TOK_b3.disassembly());
        let extend: [DisplayElement; 2usize] = [
            DisplayElement::Literal("#"),
            DisplayElement::Number(true, calc_bit4),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_bit4: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_bit4 = (u32::try_from(3i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldTOK_b1()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | token_parser.TokenFieldTOK_b3().disassembly());
        let TOK_b3 = token_parser.TokenFieldTOK_b3();
        let TOK_b1 = token_parser.TokenFieldTOK_b1();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_b3, TOK_b1 }))
    }
}
#[derive(Clone, Debug)]
enum Tablebit4_t {
    Var0(bit4_tVar0),
}
impl Tablebit4_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            bit4_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:857:1, end:857:11))"]
#[derive(Clone, Debug)]
struct bit4byte_tVar0 {}
impl bit4byte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(".w")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_bit4word().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:859:1, end:859:11))"]
#[derive(Clone, Debug)]
struct bit4byte_tVar1 {}
impl bit4byte_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal(".b")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_bit4word().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum Tablebit4byte_t {
    Var0(bit4byte_tVar0),
    Var1(bit4byte_tVar1),
}
impl Tablebit4byte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = bit4byte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) = bit4byte_tVar1::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:861:1, end:861:8))"]
#[derive(Clone, Debug)]
struct Bbit4_tVar0 {
    TOK_b4: TokenField_TOK_b4,
}
impl Bbit4_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 2usize] =
            [DisplayElement::Literal("#"), self.TOK_b4.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_b4 = token_parser.TokenFieldTOK_b4();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_b4 }))
    }
}
#[derive(Clone, Debug)]
enum TableBbit4_t {
    Var0(Bbit4_tVar0),
}
impl TableBbit4_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            Bbit4_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:864:1, end:864:6))"]
#[derive(Clone, Debug)]
struct n15_tVar0 {
    TOK_n15: TokenField_TOK_n15,
}
impl n15_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_n15.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_n15 = token_parser.TokenFieldTOK_n15();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_n15 }))
    }
}
#[derive(Clone, Debug)]
enum Tablen15_t {
    Var0(n15_tVar0),
}
impl Tablen15_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            n15_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:865:1, end:865:6))"]
#[derive(Clone, Debug)]
struct n16_tVar0 {
    TOK_n16: TokenField_TOK_n16,
}
impl n16_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_dest: i128 = 0;
        calc_dest = i128::try_from(inst_next).unwrap().wrapping_add(
            u32::try_from(1i128)
                .ok()
                .map(|shl| self.TOK_n16.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0),
        );
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_dest)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_dest: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_n16 = token_parser.TokenFieldTOK_n16();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_n16 }))
    }
}
#[derive(Clone, Debug)]
enum Tablen16_t {
    Var0(n16_tVar0),
}
impl Tablen16_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            n16_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:866:1, end:866:9))"]
#[derive(Clone, Debug)]
struct dest24_tVar0 {
    TOK_n7: TokenField_TOK_n7,
    TOK_n15: TokenField_TOK_n15,
}
impl dest24_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_dest: i128 = 0;
        calc_dest = (u32::try_from(16i128)
            .ok()
            .map(|shl| self.TOK_n7.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | u32::try_from(1i128)
                .ok()
                .map(|shl| self.TOK_n15.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0));
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_dest)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_dest: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_n15 = token_parser.TokenFieldTOK_n15();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        let mut block_1_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_dest = (u32::try_from(16i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldTOK_n7()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | u32::try_from(1i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldTOK_n15()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0));
        let TOK_n7 = token_parser.TokenFieldTOK_n7();
        pattern_len += block_1_len;
        tokens_current =
            &tokens_current[usize::try_from(block_1_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_n15, TOK_n7 }))
    }
}
#[derive(Clone, Debug)]
enum Tabledest24_t {
    Var0(dest24_tVar0),
}
impl Tabledest24_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            dest24_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:868:1, end:868:13))"]
#[derive(Clone, Debug)]
struct WordInstNextVar0 {}
impl WordInstNextVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_winstNext: i128 = 0;
        calc_winstNext = i128::try_from(inst_next).unwrap().wrapping_add(0i128);
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_winstNext)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_winstNext: i128 = 0;
        let mut block_0_len = 0u64 as u32;
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWordInstNext {
    Var0(WordInstNextVar0),
}
impl TableWordInstNext {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WordInstNextVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:869:1, end:869:14))"]
#[derive(Clone, Debug)]
struct WordInstNext4Var0 {}
impl WordInstNext4Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_winstNext: i128 = 0;
        calc_winstNext = i128::try_from(inst_next).unwrap().wrapping_add(0i128);
        let extend: [DisplayElement; 1usize] =
            [DisplayElement::Number(true, calc_winstNext)];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_winstNext: i128 = 0;
        let mut block_0_len = 0u64 as u32;
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum TableWordInstNext4 {
    Var0(WordInstNext4Var0),
}
impl TableWordInstNext4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WordInstNext4Var0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:871:1, end:871:9))"]
#[derive(Clone, Debug)]
struct WnDest_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WnDest_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnDest_t {
    Var0(WnDest_tVar0),
}
impl TableWnDest_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WnDest_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:872:1, end:872:10))"]
#[derive(Clone, Debug)]
struct WnRDest_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WnRDest_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWnRDest_t {
    Var0(WnRDest_tVar0),
}
impl TableWnRDest_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WnRDest_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:876:1, end:876:11))"]
#[derive(Clone, Debug)]
struct WsSlit10_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
    TOK_18_15_S: TokenField_TOK_18_15_S,
    TOK_13_11_U: TokenField_TOK_13_11_U,
    TOK_6_4_U: TokenField_TOK_6_4_U,
}
impl WsSlit10_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_val: i128 = 0;
        calc_val = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                ((u32::try_from(6i128)
                    .ok()
                    .map(|shl| self.TOK_18_15_S.disassembly().checked_shl(shl))
                    .flatten()
                    .unwrap_or(0)
                    | u32::try_from(3i128)
                        .ok()
                        .map(|shl| {
                            self.TOK_13_11_U.disassembly().checked_shl(shl)
                        })
                        .flatten()
                        .unwrap_or(0))
                    | self.TOK_6_4_U.disassembly())
                .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("+"),
            DisplayElement::Number(true, calc_val),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_val: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_val = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                ((u32::try_from(6i128)
                    .ok()
                    .map(|shl| {
                        token_parser
                            .TokenFieldTOK_18_15_S()
                            .disassembly()
                            .checked_shl(shl)
                    })
                    .flatten()
                    .unwrap_or(0)
                    | u32::try_from(3i128)
                        .ok()
                        .map(|shl| {
                            token_parser
                                .TokenFieldTOK_13_11_U()
                                .disassembly()
                                .checked_shl(shl)
                        })
                        .flatten()
                        .unwrap_or(0))
                    | token_parser.TokenFieldTOK_6_4_U().disassembly())
                .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let TOK_18_15_S = token_parser.TokenFieldTOK_18_15_S();
        let TOK_13_11_U = token_parser.TokenFieldTOK_13_11_U();
        let TOK_6_4_U = token_parser.TokenFieldTOK_6_4_U();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_S,
                TOK_13_11_U,
                TOK_6_4_U,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TableWsSlit10_t {
    Var0(WsSlit10_tVar0),
}
impl TableWsSlit10_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WsSlit10_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:880:1, end:880:15))"]
#[derive(Clone, Debug)]
struct WsSlit10byte_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
    TOK_18_15_S: TokenField_TOK_18_15_S,
    TOK_13_11_U: TokenField_TOK_13_11_U,
    TOK_6_4_U: TokenField_TOK_6_4_U,
}
impl WsSlit10byte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_val: i128 = 0;
        calc_val = ((u32::try_from(6i128)
            .ok()
            .map(|shl| self.TOK_18_15_S.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | u32::try_from(3i128)
                .ok()
                .map(|shl| self.TOK_13_11_U.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0))
            | self.TOK_6_4_U.disassembly());
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("+"),
            DisplayElement::Number(true, calc_val),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_val: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_val = ((u32::try_from(6i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldTOK_18_15_S()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | u32::try_from(3i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldTOK_13_11_U()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0))
            | token_parser.TokenFieldTOK_6_4_U().disassembly());
        let TOK_18_15_S = token_parser.TokenFieldTOK_18_15_S();
        let TOK_13_11_U = token_parser.TokenFieldTOK_13_11_U();
        let TOK_6_4_U = token_parser.TokenFieldTOK_6_4_U();
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_S,
                TOK_13_11_U,
                TOK_6_4_U,
                TOK_3_0_Wreg,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TableWsSlit10byte_t {
    Var0(WsSlit10byte_tVar0),
}
impl TableWsSlit10byte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WsSlit10byte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:885:1, end:885:11))"]
#[derive(Clone, Debug)]
struct WdSlit10_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_18_15_S: TokenField_TOK_18_15_S,
    TOK_13_11_U: TokenField_TOK_13_11_U,
    TOK_6_4_U: TokenField_TOK_6_4_U,
}
impl WdSlit10_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_val: i128 = 0;
        calc_val = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                ((u32::try_from(6i128)
                    .ok()
                    .map(|shl| self.TOK_18_15_S.disassembly().checked_shl(shl))
                    .flatten()
                    .unwrap_or(0)
                    | u32::try_from(3i128)
                        .ok()
                        .map(|shl| {
                            self.TOK_13_11_U.disassembly().checked_shl(shl)
                        })
                        .flatten()
                        .unwrap_or(0))
                    | self.TOK_6_4_U.disassembly())
                .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("+"),
            DisplayElement::Number(true, calc_val),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_val: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_val = u32::try_from(1i128)
            .ok()
            .map(|shl| {
                ((u32::try_from(6i128)
                    .ok()
                    .map(|shl| {
                        token_parser
                            .TokenFieldTOK_18_15_S()
                            .disassembly()
                            .checked_shl(shl)
                    })
                    .flatten()
                    .unwrap_or(0)
                    | u32::try_from(3i128)
                        .ok()
                        .map(|shl| {
                            token_parser
                                .TokenFieldTOK_13_11_U()
                                .disassembly()
                                .checked_shl(shl)
                        })
                        .flatten()
                        .unwrap_or(0))
                    | token_parser.TokenFieldTOK_6_4_U().disassembly())
                .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0);
        let TOK_18_15_S = token_parser.TokenFieldTOK_18_15_S();
        let TOK_13_11_U = token_parser.TokenFieldTOK_13_11_U();
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_6_4_U = token_parser.TokenFieldTOK_6_4_U();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_S,
                TOK_13_11_U,
                TOK_10_7_Wreg,
                TOK_6_4_U,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TableWdSlit10_t {
    Var0(WdSlit10_tVar0),
}
impl TableWdSlit10_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WdSlit10_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:889:1, end:889:15))"]
#[derive(Clone, Debug)]
struct WdSlit10byte_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
    TOK_18_15_S: TokenField_TOK_18_15_S,
    TOK_13_11_U: TokenField_TOK_13_11_U,
    TOK_6_4_U: TokenField_TOK_6_4_U,
}
impl WdSlit10byte_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let mut calc_val: i128 = 0;
        calc_val = ((u32::try_from(6i128)
            .ok()
            .map(|shl| self.TOK_18_15_S.disassembly().checked_shl(shl))
            .flatten()
            .unwrap_or(0)
            | u32::try_from(3i128)
                .ok()
                .map(|shl| self.TOK_13_11_U.disassembly().checked_shl(shl))
                .flatten()
                .unwrap_or(0))
            | self.TOK_6_4_U.disassembly());
        let extend: [DisplayElement; 5usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("+"),
            DisplayElement::Number(true, calc_val),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut calc_val: i128 = 0;
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        calc_val = ((u32::try_from(6i128)
            .ok()
            .map(|shl| {
                token_parser
                    .TokenFieldTOK_18_15_S()
                    .disassembly()
                    .checked_shl(shl)
            })
            .flatten()
            .unwrap_or(0)
            | u32::try_from(3i128)
                .ok()
                .map(|shl| {
                    token_parser
                        .TokenFieldTOK_13_11_U()
                        .disassembly()
                        .checked_shl(shl)
                })
                .flatten()
                .unwrap_or(0))
            | token_parser.TokenFieldTOK_6_4_U().disassembly());
        let TOK_18_15_S = token_parser.TokenFieldTOK_18_15_S();
        let TOK_13_11_U = token_parser.TokenFieldTOK_13_11_U();
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        let TOK_6_4_U = token_parser.TokenFieldTOK_6_4_U();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((
            pattern_len,
            Self {
                TOK_18_15_S,
                TOK_13_11_U,
                TOK_10_7_Wreg,
                TOK_6_4_U,
            },
        ))
    }
}
#[derive(Clone, Debug)]
enum TableWdSlit10byte_t {
    Var0(WdSlit10byte_tVar0),
}
impl TableWdSlit10byte_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) = WdSlit10byte_tVar0::parse(
            tokens_param,
            &mut context_current,
            inst_start,
        ) {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1166:1, end:1166:8))"]
#[derive(Clone, Debug)]
struct WsMUL_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsMUL_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_3_0_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1169:1, end:1169:8))"]
#[derive(Clone, Debug)]
struct WsMUL_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsMUL_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1172:1, end:1172:8))"]
#[derive(Clone, Debug)]
struct WsMUL_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsMUL_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1175:1, end:1175:8))"]
#[derive(Clone, Debug)]
struct WsMUL_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsMUL_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1178:1, end:1178:8))"]
#[derive(Clone, Debug)]
struct WsMUL_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsMUL_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1181:1, end:1181:8))"]
#[derive(Clone, Debug)]
struct WsMUL_tVar5 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsMUL_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWsMUL_t {
    Var0(WsMUL_tVar0),
    Var1(WsMUL_tVar1),
    Var2(WsMUL_tVar2),
    Var3(WsMUL_tVar3),
    Var4(WsMUL_tVar4),
    Var5(WsMUL_tVar5),
}
impl TableWsMUL_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WsMUL_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsMUL_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsMUL_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsMUL_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsMUL_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsMUL_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1187:1, end:1187:8))"]
#[derive(Clone, Debug)]
struct WdMUL_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdMUL_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [self.TOK_10_7_Wreg.display()];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 0i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1190:1, end:1190:8))"]
#[derive(Clone, Debug)]
struct WdMUL_tVar1 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdMUL_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1193:1, end:1193:8))"]
#[derive(Clone, Debug)]
struct WdMUL_tVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdMUL_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1196:1, end:1196:8))"]
#[derive(Clone, Debug)]
struct WdMUL_tVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdMUL_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1199:1, end:1199:8))"]
#[derive(Clone, Debug)]
struct WdMUL_tVar4 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdMUL_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1202:1, end:1202:8))"]
#[derive(Clone, Debug)]
struct WdMUL_tVar5 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdMUL_tVar5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWdMUL_t {
    Var0(WdMUL_tVar0),
    Var1(WdMUL_tVar1),
    Var2(WdMUL_tVar2),
    Var3(WdMUL_tVar3),
    Var4(WdMUL_tVar4),
    Var5(WdMUL_tVar5),
}
impl TableWdMUL_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WdMUL_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdMUL_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdMUL_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdMUL_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdMUL_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdMUL_tVar5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1207:1, end:1207:8))"]
#[derive(Clone, Debug)]
struct WsROM_tVar0 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsROM_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1210:1, end:1210:8))"]
#[derive(Clone, Debug)]
struct WsROM_tVar1 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsROM_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1213:1, end:1213:8))"]
#[derive(Clone, Debug)]
struct WsROM_tVar2 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsROM_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1216:1, end:1216:8))"]
#[derive(Clone, Debug)]
struct WsROM_tVar3 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsROM_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1219:1, end:1219:8))"]
#[derive(Clone, Debug)]
struct WsROM_tVar4 {
    TOK_3_0_Wreg: TokenField_TOK_3_0_Wreg,
}
impl WsROM_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_3_0_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_6_4_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_3_0_Wreg = token_parser.TokenFieldTOK_3_0_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_3_0_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWsROM_t {
    Var0(WsROM_tVar0),
    Var1(WsROM_tVar1),
    Var2(WsROM_tVar2),
    Var3(WsROM_tVar3),
    Var4(WsROM_tVar4),
}
impl TableWsROM_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WsROM_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsROM_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsROM_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsROM_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WsROM_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1224:1, end:1224:8))"]
#[derive(Clone, Debug)]
struct WdROM_tVar0 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdROM_tVar0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 1i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1227:1, end:1227:8))"]
#[derive(Clone, Debug)]
struct WdROM_tVar1 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdROM_tVar1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("--]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 2i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1230:1, end:1230:8))"]
#[derive(Clone, Debug)]
struct WdROM_tVar2 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdROM_tVar2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("["),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("++]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 3i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1233:1, end:1233:8))"]
#[derive(Clone, Debug)]
struct WdROM_tVar3 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdROM_tVar3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[--"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 4i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:1236:1, end:1236:8))"]
#[derive(Clone, Debug)]
struct WdROM_tVar4 {
    TOK_10_7_Wreg: TokenField_TOK_10_7_Wreg,
}
impl WdROM_tVar4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 3usize] = [
            DisplayElement::Literal("[++"),
            self.TOK_10_7_Wreg.display(),
            DisplayElement::Literal("]"),
        ];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if token_parser.TokenFieldTOK_13_11_U().disassembly() != 5i128 {
            return None;
        }
        let TOK_10_7_Wreg = token_parser.TokenFieldTOK_10_7_Wreg();
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self { TOK_10_7_Wreg }))
    }
}
#[derive(Clone, Debug)]
enum TableWdROM_t {
    Var0(WdROM_tVar0),
    Var1(WdROM_tVar1),
    Var2(WdROM_tVar2),
    Var3(WdROM_tVar3),
    Var4(WdROM_tVar4),
}
impl TableWdROM_t {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            WdROM_tVar0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdROM_tVar1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdROM_tVar2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdROM_tVar3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            WdROM_tVar4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2046:1, end:2046:6))"]
#[derive(Clone, Debug)]
struct cond1Var0 {}
impl cond1Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("c")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 1i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2047:1, end:2047:6))"]
#[derive(Clone, Debug)]
struct cond1Var1 {}
impl cond1Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("ge")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 13i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2050:1, end:2050:6))"]
#[derive(Clone, Debug)]
struct cond1Var2 {}
impl cond1Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("gt")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 12i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2052:1, end:2052:6))"]
#[derive(Clone, Debug)]
struct cond1Var3 {}
impl cond1Var3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("gtu")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 14i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2053:1, end:2053:6))"]
#[derive(Clone, Debug)]
struct cond1Var4 {}
impl cond1Var4 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("le")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 4i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2055:1, end:2055:6))"]
#[derive(Clone, Debug)]
struct cond1Var5 {}
impl cond1Var5 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("leu")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 6i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2056:1, end:2056:6))"]
#[derive(Clone, Debug)]
struct cond1Var6 {}
impl cond1Var6 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("lt")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 5i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2057:1, end:2057:6))"]
#[derive(Clone, Debug)]
struct cond1Var7 {}
impl cond1Var7 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("n")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 3i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2058:1, end:2058:6))"]
#[derive(Clone, Debug)]
struct cond1Var8 {}
impl cond1Var8 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nc")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 9i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2059:1, end:2059:6))"]
#[derive(Clone, Debug)]
struct cond1Var9 {}
impl cond1Var9 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nn")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 11i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2060:1, end:2060:6))"]
#[derive(Clone, Debug)]
struct cond1Var10 {}
impl cond1Var10 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nov")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 8i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2061:1, end:2061:6))"]
#[derive(Clone, Debug)]
struct cond1Var11 {}
impl cond1Var11 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("nz")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 10i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2064:1, end:2064:6))"]
#[derive(Clone, Debug)]
struct cond1Var12 {}
impl cond1Var12 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("ov")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 0i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2067:1, end:2067:6))"]
#[derive(Clone, Debug)]
struct cond1Var13 {}
impl cond1Var13 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("z")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 2i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum Tablecond1 {
    Var0(cond1Var0),
    Var1(cond1Var1),
    Var2(cond1Var2),
    Var3(cond1Var3),
    Var4(cond1Var4),
    Var5(cond1Var5),
    Var6(cond1Var6),
    Var7(cond1Var7),
    Var8(cond1Var8),
    Var9(cond1Var9),
    Var10(cond1Var10),
    Var11(cond1Var11),
    Var12(cond1Var12),
    Var13(cond1Var13),
}
impl Tablecond1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var4(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var5(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var6(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var7(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var8(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var9(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var10(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var11(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var12(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var13(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            cond1Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var4::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var4(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var5::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var5(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var6::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var6(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var7::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var7(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var8::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var8(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var9::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var9(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var10::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var10(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var11::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var11(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var12::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var12(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond1Var13::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var13(parsed)));
        }
        None
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2062:1, end:2062:6))"]
#[derive(Clone, Debug)]
struct cond2Var0 {}
impl cond2Var0 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("oa")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 12i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2063:1, end:2063:6))"]
#[derive(Clone, Debug)]
struct cond2Var1 {}
impl cond2Var1 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("ob")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 13i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2065:1, end:2065:6))"]
#[derive(Clone, Debug)]
struct cond2Var2 {}
impl cond2Var2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("sa")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 14i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[doc = "Constructor at Location(FileSpan(/home/rbran/src/ghidra/Ghidra/Processors/PIC/data/languages/PIC24.sinc, start:2066:1, end:2066:6))"]
#[derive(Clone, Debug)]
struct cond2Var3 {}
impl cond2Var3 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        let extend: [DisplayElement; 1usize] = [DisplayElement::Literal("sb")];
        display.extend_from_slice(&extend);
    }
    fn parse<T>(
        mut tokens_current: &[u8],
        context: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut pattern_len = 0 as u32;
        let mut context_instance = context.clone();
        let mut block_0_len = 4u64 as u32;
        let token_parser = <TokenParser<4usize>>::new(tokens_current)?;
        if context_instance
            .register()
            .read_phase_disassembly()
            .unwrap()
            != 2i128
        {
            return None;
        }
        if token_parser.TokenFieldTOK_CCCC().disassembly() != 15i128 {
            return None;
        }
        pattern_len += block_0_len;
        tokens_current =
            &tokens_current[usize::try_from(block_0_len).unwrap()..];
        *context = context_instance;
        Some((pattern_len, Self {}))
    }
}
#[derive(Clone, Debug)]
enum Tablecond2 {
    Var0(cond2Var0),
    Var1(cond2Var1),
    Var2(cond2Var2),
    Var3(cond2Var3),
}
impl Tablecond2 {
    fn display_extend<T>(
        &self,
        display: &mut Vec<DisplayElement>,
        context: &T,
        inst_start: u32,
        inst_next: u32,
        global_set_param: &mut impl GlobalSetTrait,
    ) where
        T: ContextTrait + Clone,
    {
        match self {
            Self::Var0(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var1(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var2(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
            Self::Var3(x) => x.display_extend(
                display,
                context,
                inst_start,
                inst_next,
                global_set_param,
            ),
        }
    }
    fn parse<T>(
        tokens_param: &[u8],
        context_param: &mut T,
        inst_start: u32,
    ) -> Option<(u32, Self)>
    where
        T: ContextTrait + Clone,
    {
        let mut context_current = context_param.clone();
        if let Some((inst_len, parsed)) =
            cond2Var0::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var0(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond2Var1::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var1(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond2Var2::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var2(parsed)));
        }
        if let Some((inst_len, parsed)) =
            cond2Var3::parse(tokens_param, &mut context_current, inst_start)
        {
            *context_param = context_current;
            return Some((inst_len, Self::Var3(parsed)));
        }
        None
    }
}
pub fn parse_instruction<T>(
    tokens: &[u8],
    context: &mut T,
    inst_start: u32,
    global_set: &mut impl GlobalSetTrait,
) -> Option<(u32, Vec<DisplayElement>)>
where
    T: ContextTrait + Clone,
{
    let (inst_len, instruction) =
        Tableinstruction::parse(tokens, context, inst_start)?;
    let inst_next = inst_start + inst_len;
    let mut display = vec![];
    instruction.display_extend(
        &mut display,
        context,
        inst_start,
        inst_next,
        global_set,
    );
    Some((inst_next, display))
}
